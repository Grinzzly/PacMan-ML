{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1528724212618},{"name":"@tensorflow/tfjs-core","loc":{"line":2,"column":33}},{"name":"../errors","loc":{"line":3,"column":27}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.isInteger = isInteger;\nexports.arrayProd = arrayProd;\nexports.min = min;\nexports.max = max;\nexports.sum = sum;\nexports.mean = mean;\nexports.variance = variance;\nexports.median = median;\nexports.range = range;\n\nvar _tfjsCore = require('@tensorflow/tfjs-core');\n\nvar tfc = _interopRequireWildcard(_tfjsCore);\n\nvar _errors = require('../errors');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction isInteger(x) {\n    return x === parseInt(x.toString(), 10);\n}\nfunction arrayProd(array, begin, end) {\n    if (begin == null) {\n        begin = 0;\n    }\n    if (end == null) {\n        end = array.length;\n    }\n    var prod = 1;\n    for (var i = begin; i < end; ++i) {\n        prod *= array[i];\n    }\n    return prod;\n}\nfunction toArray1D(array) {\n    array = Array.isArray(array) ? new Float32Array(array) : array;\n    return (0, _tfjsCore.tensor1d)(array);\n}\nfunction min(array) {\n    return tfc.min(toArray1D(array)).dataSync()[0];\n}\nfunction max(array) {\n    return tfc.max(toArray1D(array)).dataSync()[0];\n}\nfunction sum(array) {\n    return tfc.sum(toArray1D(array)).dataSync()[0];\n}\nfunction mean(array) {\n    return sum(array) / array.length;\n}\nfunction variance(array) {\n    var demeaned = tfc.sub(toArray1D(array), (0, _tfjsCore.scalar)(mean(array)));\n    var sumSquare = tfc.sum(tfc.mulStrict(demeaned, demeaned)).dataSync()[0];\n    return sumSquare / array.length;\n}\nfunction median(array) {\n    var arraySorted = array.slice().sort(function (a, b) {\n        return a - b;\n    });\n    var lowIdx = Math.floor((arraySorted.length - 1) / 2);\n    var highIdx = Math.ceil((arraySorted.length - 1) / 2);\n    if (lowIdx === highIdx) {\n        return arraySorted[lowIdx];\n    }\n    return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\nfunction range(begin, end) {\n    if (end < begin) {\n        throw new _errors.ValueError(\"end (\" + end + \") < begin (\" + begin + \") is forbidden.\");\n    }\n    var out = [];\n    for (var i = begin; i < end; ++i) {\n        out.push(i);\n    }\n    return out;\n}\n//# sourceMappingURL=math_utils.js.map"},"hash":"18c945aef1b079fc93a01f46b1424827","cacheData":{"env":{}}}