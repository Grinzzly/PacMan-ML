{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1528724212618},{"name":"@tensorflow/tfjs-core","loc":{"line":17,"column":107}},{"name":"./backend/tfjs_backend","loc":{"line":18,"column":19}},{"name":"./common","loc":{"line":19,"column":32}},{"name":"./errors","loc":{"line":20,"column":48}},{"name":"./utils/generic_utils","loc":{"line":21,"column":88}},{"name":"./utils/math_utils","loc":{"line":22,"column":26}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = exports.Orthogonal = exports.LeCunNormal = exports.HeNormal = exports.GlorotNormal = exports.GlorotUniform = exports.VarianceScaling = exports.Identity = exports.TruncatedNormal = exports.RandomNormal = exports.RandomUniform = exports.Constant = exports.Ones = exports.Zeros = exports.Initializer = exports.VALID_DISTRIBUTION_VALUES = exports.VALID_FAN_MODE_VALUES = undefined;\nexports.checkFanMode = checkFanMode;\nexports.checkDistribution = checkDistribution;\nexports.serializeInitializer = serializeInitializer;\nexports.getInitializer = getInitializer;\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar _tfjs_backend = require(\"./backend/tfjs_backend\");\n\nvar K = _interopRequireWildcard(_tfjs_backend);\n\nvar _common = require(\"./common\");\n\nvar _errors = require(\"./errors\");\n\nvar _generic_utils = require(\"./utils/generic_utils\");\n\nvar _math_utils = require(\"./utils/math_utils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar __extends = undefined && undefined.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar VALID_FAN_MODE_VALUES = exports.VALID_FAN_MODE_VALUES = ['fanIn', 'fanOut', 'fanAvg'];\nfunction checkFanMode(value) {\n    (0, _generic_utils.checkStringTypeUnionValue)(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\nvar VALID_DISTRIBUTION_VALUES = exports.VALID_DISTRIBUTION_VALUES = ['normal', 'uniform'];\nfunction checkDistribution(value) {\n    (0, _generic_utils.checkStringTypeUnionValue)(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\nvar Initializer = function (_super) {\n    __extends(Initializer, _super);\n    function Initializer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Initializer.prototype.fromConfigUsesCustomObjects = function () {\n        return false;\n    };\n    Initializer.prototype.getConfig = function () {\n        return {};\n    };\n    Initializer = __decorate([(0, _tfjsCore.doc)({ heading: 'Initializers', subheading: 'Classes', namespace: 'initializers' })], Initializer);\n    return Initializer;\n}(_tfjsCore.serialization.Serializable);\nexports.Initializer = Initializer;\n\nvar Zeros = function (_super) {\n    __extends(Zeros, _super);\n    function Zeros() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Zeros.prototype.apply = function (shape, dtype) {\n        return (0, _tfjsCore.zeros)(shape, dtype);\n    };\n    Zeros.className = 'Zeros';\n    return Zeros;\n}(Initializer);\nexports.Zeros = Zeros;\n\n_tfjsCore.serialization.SerializationMap.register(Zeros);\nvar Ones = function (_super) {\n    __extends(Ones, _super);\n    function Ones() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Ones.prototype.apply = function (shape, dtype) {\n        return (0, _tfjsCore.ones)(shape, dtype);\n    };\n    Ones.className = 'Ones';\n    return Ones;\n}(Initializer);\nexports.Ones = Ones;\n\n_tfjsCore.serialization.SerializationMap.register(Ones);\nvar Constant = function (_super) {\n    __extends(Constant, _super);\n    function Constant(config) {\n        var _this = _super.call(this) || this;\n        _this.value = config.value;\n        return _this;\n    }\n    Constant.prototype.apply = function (shape, dtype) {\n        var _this = this;\n        return (0, _tfjsCore.tidy)(function () {\n            return K.scalarTimesArray((0, _tfjsCore.scalar)(_this.value), (0, _tfjsCore.ones)(shape, dtype));\n        });\n    };\n    Constant.prototype.getConfig = function () {\n        return {\n            value: this.value\n        };\n    };\n    Constant.className = 'Constant';\n    return Constant;\n}(Initializer);\nexports.Constant = Constant;\n\n_tfjsCore.serialization.SerializationMap.register(Constant);\nvar RandomUniform = function (_super) {\n    __extends(RandomUniform, _super);\n    function RandomUniform(config) {\n        var _this = _super.call(this) || this;\n        _this.DEFAULT_MINVAL = -0.05;\n        _this.DEFAULT_MAXVAL = 0.05;\n        _this.minval = config.minval || _this.DEFAULT_MINVAL;\n        _this.maxval = config.maxval || _this.DEFAULT_MAXVAL;\n        _this.seed = config.seed;\n        return _this;\n    }\n    RandomUniform.prototype.apply = function (shape, dtype) {\n        return (0, _tfjsCore.randomUniform)(shape, this.minval, this.maxval, dtype);\n    };\n    RandomUniform.prototype.getConfig = function () {\n        return { minval: this.minval, maxval: this.maxval, seed: this.seed };\n    };\n    RandomUniform.className = 'RandomUniform';\n    return RandomUniform;\n}(Initializer);\nexports.RandomUniform = RandomUniform;\n\n_tfjsCore.serialization.SerializationMap.register(RandomUniform);\nvar RandomNormal = function (_super) {\n    __extends(RandomNormal, _super);\n    function RandomNormal(config) {\n        var _this = _super.call(this) || this;\n        _this.DEFAULT_MEAN = 0.;\n        _this.DEFAULT_STDDEV = 0.05;\n        _this.mean = config.mean || _this.DEFAULT_MEAN;\n        _this.stddev = config.stddev || _this.DEFAULT_STDDEV;\n        _this.seed = config.seed;\n        return _this;\n    }\n    RandomNormal.prototype.apply = function (shape, dtype) {\n        if (dtype === 'bool') {\n            throw new _errors.NotImplementedError(\"randomNormal does not support dType bool.\");\n        }\n        return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    };\n    RandomNormal.prototype.getConfig = function () {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    };\n    RandomNormal.className = 'RandomNormal';\n    return RandomNormal;\n}(Initializer);\nexports.RandomNormal = RandomNormal;\n\n_tfjsCore.serialization.SerializationMap.register(RandomNormal);\nvar TruncatedNormal = function (_super) {\n    __extends(TruncatedNormal, _super);\n    function TruncatedNormal(config) {\n        var _this = _super.call(this) || this;\n        _this.DEFAULT_MEAN = 0.;\n        _this.DEFAULT_STDDEV = 0.05;\n        _this.mean = config.mean || _this.DEFAULT_MEAN;\n        _this.stddev = config.stddev || _this.DEFAULT_STDDEV;\n        _this.seed = config.seed;\n        return _this;\n    }\n    TruncatedNormal.prototype.apply = function (shape, dtype) {\n        if (dtype === 'bool') {\n            throw new _errors.NotImplementedError(\"truncatedNormal does not support dType bool.\");\n        }\n        return (0, _tfjsCore.truncatedNormal)(shape, this.mean, this.stddev, dtype, this.seed);\n    };\n    TruncatedNormal.prototype.getConfig = function () {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    };\n    TruncatedNormal.className = 'TruncatedNormal';\n    return TruncatedNormal;\n}(Initializer);\nexports.TruncatedNormal = TruncatedNormal;\n\n_tfjsCore.serialization.SerializationMap.register(TruncatedNormal);\nvar Identity = function (_super) {\n    __extends(Identity, _super);\n    function Identity(config) {\n        var _this = _super.call(this) || this;\n        _this.gain = config.gain != null ? (0, _tfjsCore.scalar)(config.gain) : K.getScalar(1.0);\n        return _this;\n    }\n    Identity.prototype.apply = function (shape, dtype) {\n        var _this = this;\n        return (0, _tfjsCore.tidy)(function () {\n            if (shape.length !== 2 || shape[0] !== shape[1]) {\n                throw new _errors.ValueError('Identity matrix initializer can only be used for' + ' 2D square matrices.');\n            } else {\n                return K.scalarTimesArray(_this.gain, (0, _tfjsCore.eye)(shape[0]));\n            }\n        });\n    };\n    Identity.prototype.getConfig = function () {\n        return { gain: this.gain.get() };\n    };\n    Identity.className = 'Identity';\n    return Identity;\n}(Initializer);\nexports.Identity = Identity;\n\n_tfjsCore.serialization.SerializationMap.register(Identity);\nfunction computeFans(shape, dataFormat) {\n    if (dataFormat === void 0) {\n        dataFormat = 'channelsLast';\n    }\n    var fanIn;\n    var fanOut;\n    (0, _common.checkDataFormat)(dataFormat);\n    if (shape.length === 2) {\n        fanIn = shape[0];\n        fanOut = shape[1];\n    } else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n        if (dataFormat === 'channelsFirst') {\n            var receptiveFieldSize = (0, _math_utils.arrayProd)(shape, 2);\n            fanIn = shape[1] * receptiveFieldSize;\n            fanOut = shape[0] * receptiveFieldSize;\n        } else if (dataFormat === 'channelsLast') {\n            var receptiveFieldSize = (0, _math_utils.arrayProd)(shape, 0, shape.length - 2);\n            fanIn = shape[shape.length - 2] * receptiveFieldSize;\n            fanOut = shape[shape.length - 1] * receptiveFieldSize;\n        }\n    } else {\n        var shapeProd = (0, _math_utils.arrayProd)(shape);\n        fanIn = Math.sqrt(shapeProd);\n        fanOut = Math.sqrt(shapeProd);\n    }\n    return [fanIn, fanOut];\n}\nvar VarianceScaling = function (_super) {\n    __extends(VarianceScaling, _super);\n    function VarianceScaling(config) {\n        var _this = _super.call(this) || this;\n        if (config.scale < 0.0) {\n            throw new _errors.ValueError(\"scale must be a positive float. Got: \" + config.scale);\n        }\n        _this.scale = config.scale == null ? 1.0 : config.scale;\n        _this.mode = config.mode;\n        checkFanMode(_this.mode);\n        _this.distribution = config.distribution;\n        checkDistribution(_this.distribution);\n        _this.seed = config.seed;\n        return _this;\n    }\n    VarianceScaling.prototype.apply = function (shape, dtype) {\n        var fans = computeFans(shape);\n        var fanIn = fans[0];\n        var fanOut = fans[1];\n        var scale = this.scale;\n        if (this.mode === 'fanIn') {\n            scale /= Math.max(1, fanIn);\n        } else if (this.mode === 'fanOut') {\n            scale /= Math.max(1, fanOut);\n        } else {\n            scale /= Math.max(1, (fanIn + fanOut) / 2);\n        }\n        if (this.distribution === 'normal') {\n            var stddev = Math.sqrt(scale);\n            if (dtype === 'bool') {\n                throw new _errors.NotImplementedError(this.getClassName() + \" does not support dType bool.\");\n            }\n            return (0, _tfjsCore.truncatedNormal)(shape, 0, stddev, dtype, this.seed);\n        } else {\n            var limit = Math.sqrt(3 * scale);\n            return (0, _tfjsCore.randomUniform)(shape, -limit, limit, dtype);\n        }\n    };\n    VarianceScaling.prototype.getConfig = function () {\n        return {\n            scale: this.scale,\n            mode: this.mode,\n            distribution: this.distribution,\n            seed: this.seed\n        };\n    };\n    VarianceScaling.className = 'VarianceScaling';\n    return VarianceScaling;\n}(Initializer);\nexports.VarianceScaling = VarianceScaling;\n\n_tfjsCore.serialization.SerializationMap.register(VarianceScaling);\nvar GlorotUniform = function (_super) {\n    __extends(GlorotUniform, _super);\n    function GlorotUniform(config) {\n        return _super.call(this, {\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'uniform',\n            seed: config == null ? null : config.seed\n        }) || this;\n    }\n    GlorotUniform.prototype.getClassName = function () {\n        return VarianceScaling.className;\n    };\n    return GlorotUniform;\n}(VarianceScaling);\nexports.GlorotUniform = GlorotUniform;\n\nvar GlorotNormal = function (_super) {\n    __extends(GlorotNormal, _super);\n    function GlorotNormal(config) {\n        return _super.call(this, {\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'normal',\n            seed: config == null ? null : config.seed\n        }) || this;\n    }\n    GlorotNormal.prototype.getClassName = function () {\n        return VarianceScaling.className;\n    };\n    return GlorotNormal;\n}(VarianceScaling);\nexports.GlorotNormal = GlorotNormal;\n\nvar HeNormal = function (_super) {\n    __extends(HeNormal, _super);\n    function HeNormal(config) {\n        return _super.call(this, {\n            scale: 2.0,\n            mode: 'fanIn',\n            distribution: 'normal',\n            seed: config == null ? null : config.seed\n        }) || this;\n    }\n    HeNormal.prototype.getClassName = function () {\n        return VarianceScaling.className;\n    };\n    return HeNormal;\n}(VarianceScaling);\nexports.HeNormal = HeNormal;\n\nvar LeCunNormal = function (_super) {\n    __extends(LeCunNormal, _super);\n    function LeCunNormal(config) {\n        return _super.call(this, {\n            scale: 1.0,\n            mode: 'fanIn',\n            distribution: 'normal',\n            seed: config == null ? null : config.seed\n        }) || this;\n    }\n    LeCunNormal.prototype.getClassName = function () {\n        return VarianceScaling.className;\n    };\n    return LeCunNormal;\n}(VarianceScaling);\nexports.LeCunNormal = LeCunNormal;\n\nvar Orthogonal = function (_super) {\n    __extends(Orthogonal, _super);\n    function Orthogonal(config) {\n        var _this = _super.call(this) || this;\n        _this.DEFAULT_GAIN = 1;\n        _this.gain = config.gain == null ? _this.DEFAULT_GAIN : config.gain;\n        _this.seed = config.seed;\n        if (_this.seed != null) {\n            throw new _errors.NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');\n        }\n        return _this;\n    }\n    Orthogonal.prototype.apply = function (shape, dtype) {\n        var _this = this;\n        return (0, _tfjsCore.tidy)(function () {\n            if (shape.length !== 2) {\n                throw new _errors.NotImplementedError('The Orthogonal Initializer does not support non-2D shapes yet.');\n            }\n            if (shape[0] * shape[1] > 2000) {\n                console.warn(\"Orthogonal initializer is being called on a matrix with more \" + (\"than 2000 (\" + shape[0] * shape[1] + \") elements: \") + \"Slowness may result.\");\n            }\n            var normalizedShape = shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n            var a = K.randomNormal(normalizedShape, 0, 1, 'float32');\n            var q = _tfjsCore.linalg.gramSchmidt(a);\n            if (shape[0] > shape[1]) {\n                q = q.transpose();\n            }\n            return K.scalarTimesArray(K.getScalar(_this.gain), q);\n        });\n    };\n    Orthogonal.prototype.getConfig = function () {\n        return {\n            gain: this.gain,\n            seed: this.seed\n        };\n    };\n    Orthogonal.className = 'Orthogonal';\n    return Orthogonal;\n}(Initializer);\nexports.Orthogonal = Orthogonal;\n\n_tfjsCore.serialization.SerializationMap.register(Orthogonal);\nvar INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = exports.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'constant': 'Constant',\n    'glorotNormal': 'GlorotNormal',\n    'glorotUniform': 'GlorotUniform',\n    'heNormal': 'HeNormal',\n    'identity': 'Identity',\n    'leCunNormal': 'LeCunNormal',\n    'ones': 'Ones',\n    'orthogonal': 'Orthogonal',\n    'randomNormal': 'RandomNormal',\n    'randomUniform': 'RandomUniform',\n    'truncatedNormal': 'TruncatedNormal',\n    'varianceScaling': 'VarianceScaling',\n    'zeros': 'Zeros'\n};\nfunction deserializeInitializer(config, customObjects) {\n    if (customObjects === void 0) {\n        customObjects = {};\n    }\n    return (0, _generic_utils.deserializeKerasObject)(config, _tfjsCore.serialization.SerializationMap.getMap().classNameMap, customObjects, 'initializer');\n}\nfunction serializeInitializer(initializer) {\n    return (0, _generic_utils.serializeKerasObject)(initializer);\n}\nfunction getInitializer(identifier) {\n    if (typeof identifier === 'string') {\n        var className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n        if (className === 'GlorotUniform') {\n            return new GlorotUniform();\n        } else if (className === 'GlorotNormal') {\n            return new GlorotNormal();\n        } else if (className === 'HeNormal') {\n            return new HeNormal();\n        } else if (className === 'LeCunNormal') {\n            return new LeCunNormal();\n        } else {\n            var config = { className: className, config: {} };\n            return deserializeInitializer(config);\n        }\n    } else if (identifier instanceof Initializer) {\n        return identifier;\n    } else {\n        return deserializeInitializer(identifier);\n    }\n}\n//# sourceMappingURL=initializers.js.map"},"hash":"24dc36c33443fb60a8988d4f8412f0b7","cacheData":{"env":{}}}