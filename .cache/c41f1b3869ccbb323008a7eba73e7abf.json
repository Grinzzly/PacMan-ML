{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"./tensor","loc":{"line":1,"column":23}},{"name":"./util","loc":{"line":2,"column":22}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.TEST_EPSILON = exports.ALL_ENVS = exports.CPU_ENVS = exports.WEBGL_ENVS = undefined;\nexports.expectArraysClose = expectArraysClose;\nexports.expectPromiseToFail = expectPromiseToFail;\nexports.expectArraysEqual = expectArraysEqual;\nexports.expectNumbersClose = expectNumbersClose;\nexports.expectValuesInRange = expectValuesInRange;\n\nvar _tensor = require('./tensor');\n\nvar _util = require('./util');\n\nvar util = _interopRequireWildcard(_util);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar WEBGL_ENVS = exports.WEBGL_ENVS = {\n    'BACKEND': 'test-webgl'\n};\nvar CPU_ENVS = exports.CPU_ENVS = {\n    'BACKEND': 'test-cpu'\n};\nvar ALL_ENVS = exports.ALL_ENVS = {};\nvar TEST_EPSILON = exports.TEST_EPSILON = 1e-3;\nfunction expectArraysClose(actual, expected, epsilon) {\n    if (epsilon === void 0) {\n        epsilon = TEST_EPSILON;\n    }\n    if (!(actual instanceof _tensor.Tensor) && !(expected instanceof _tensor.Tensor)) {\n        var aType = actual.constructor.name;\n        var bType = expected.constructor.name;\n        if (aType !== bType) {\n            throw new Error(\"Arrays are of different type actual: \" + aType + \" \" + (\"vs expected: \" + bType));\n        }\n    } else if (actual instanceof _tensor.Tensor && expected instanceof _tensor.Tensor) {\n        if (actual.dtype !== expected.dtype) {\n            throw new Error(\"Arrays are of different type actual: \" + actual.dtype + \" \" + (\"vs expected: \" + expected.dtype + \".\"));\n        }\n        if (!util.arraysEqual(actual.shape, expected.shape)) {\n            throw new Error(\"Arrays are of different shape actual: \" + actual.shape + \" \" + (\"vs expected: \" + expected.shape + \".\"));\n        }\n    }\n    var actualValues;\n    var expectedValues;\n    if (actual instanceof _tensor.Tensor) {\n        actualValues = actual.dataSync();\n    } else {\n        actualValues = actual;\n    }\n    if (expected instanceof _tensor.Tensor) {\n        expectedValues = expected.dataSync();\n    } else {\n        expectedValues = expected;\n    }\n    if (actualValues.length !== expectedValues.length) {\n        throw new Error(\"Arrays have different lengths actual: \" + actualValues.length + \" vs \" + (\"expected: \" + expectedValues.length + \".\\n\") + (\"Actual:   \" + actualValues + \".\\n\") + (\"Expected: \" + expectedValues + \".\"));\n    }\n    for (var i = 0; i < expectedValues.length; ++i) {\n        var a = actualValues[i];\n        var e = expectedValues[i];\n        if (!areClose(a, Number(e), epsilon)) {\n            throw new Error(\"Arrays differ: actual[\" + i + \"] = \" + a + \", expected[\" + i + \"] = \" + e + \".\\n\" + (\"Actual:   \" + actualValues + \".\\n\") + (\"Expected: \" + expectedValues + \".\"));\n        }\n    }\n}\nfunction expectPromiseToFail(fn, done) {\n    fn().then(function () {\n        return done.fail();\n    }, function () {\n        return done();\n    });\n}\nfunction expectArraysEqual(actual, expected) {\n    return expectArraysClose(actual, expected, 0);\n}\nfunction expectNumbersClose(a, e, epsilon) {\n    if (epsilon === void 0) {\n        epsilon = TEST_EPSILON;\n    }\n    if (!areClose(a, e, epsilon)) {\n        throw new Error(\"Numbers differ: actual === \" + a + \", expected === \" + e);\n    }\n}\nfunction areClose(a, e, epsilon) {\n    if (isNaN(a) && isNaN(e)) {\n        return true;\n    }\n    if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n        return false;\n    }\n    return true;\n}\nfunction expectValuesInRange(actual, low, high) {\n    var actualVals;\n    if (actual instanceof _tensor.Tensor) {\n        actualVals = actual.dataSync();\n    } else {\n        actualVals = actual;\n    }\n    for (var i = 0; i < actualVals.length; i++) {\n        if (actualVals[i] < low || actualVals[i] > high) {\n            throw new Error(\"Value out of range:\" + actualVals[i] + \" low: \" + low + \", high: \" + high);\n        }\n    }\n}\n//# sourceMappingURL=test_util.js.map"},"hash":"d77d5a62b64d3a71514703f85b617169","cacheData":{"env":{}}}