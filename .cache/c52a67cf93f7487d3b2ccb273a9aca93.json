{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../doc","loc":{"line":7,"column":20}},{"name":"../environment","loc":{"line":8,"column":20}},{"name":"../globals","loc":{"line":9,"column":27}},{"name":"../util","loc":{"line":10,"column":22}},{"name":"./axis_util","loc":{"line":11,"column":27}},{"name":"./operation","loc":{"line":12,"column":26}},{"name":"./ops","loc":{"line":13,"column":21}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ReductionOps = undefined;\n\nvar _doc = require(\"../doc\");\n\nvar _environment = require(\"../environment\");\n\nvar _globals = require(\"../globals\");\n\nvar _util = require(\"../util\");\n\nvar util = _interopRequireWildcard(_util);\n\nvar _axis_util = require(\"./axis_util\");\n\nvar axis_util = _interopRequireWildcard(_axis_util);\n\nvar _operation = require(\"./operation\");\n\nvar _ops = require(\"./ops\");\n\nvar ops = _interopRequireWildcard(_ops);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar ReductionOps = function () {\n    function ReductionOps() {}\n    ReductionOps.logSumExp = function (x, axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        util.assertArgumentsAreTensors({ x: x }, 'logSumExp');\n        var axes = axis_util.parseAxisParam(axis, x.shape);\n        var xMax = x.max(axes, true);\n        var a = x.sub(xMax);\n        var b = a.exp();\n        var c = b.sum(axes);\n        var d = c.log();\n        var res = xMax.reshape(d.shape).add(d);\n        if (keepDims) {\n            var newShape = axis_util.expandShapeToKeepDim(res.shape, axes);\n            return res.reshape(newShape);\n        }\n        return res;\n    };\n    ReductionOps.sum = function (x, axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        util.assertArgumentsAreTensors({ x: x }, 'sum');\n        if (x.dtype === 'bool') {\n            x = x.toInt();\n        }\n        var axes = axis_util.parseAxisParam(axis, x.shape);\n        var customOp = (0, _globals.customGrad)(function (x) {\n            var permutation = axis_util.getAxesPermutation(axes, x.rank);\n            var reductionAxes = axes;\n            var permutedX = x;\n            if (permutation != null) {\n                permutedX = x.transpose(permutation);\n                reductionAxes = axis_util.getInnerMostAxes(reductionAxes.length, x.rank);\n            }\n            var value = _environment.ENV.engine.runKernel(function (backend) {\n                return backend.sum(permutedX, reductionAxes);\n            }, { permutedX: permutedX });\n            if (keepDims) {\n                var newShape = axis_util.expandShapeToKeepDim(value.shape, axes);\n                value = value.reshape(newShape);\n            }\n            var gradFunc = function (dy) {\n                var expandedDyShape = x.shape.slice();\n                axes.forEach(function (axis) {\n                    expandedDyShape[axis] = 1;\n                });\n                var expandedDy = dy.reshape(expandedDyShape);\n                var derX = expandedDy.mul(ops.ones(x.shape, 'float32'));\n                return derX;\n            };\n            return { value: value, gradFunc: gradFunc };\n        });\n        return customOp(x);\n    };\n    ReductionOps.mean = function (x, axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        util.assertArgumentsAreTensors({ x: x }, 'mean');\n        var axes = axis_util.parseAxisParam(axis, x.shape);\n        var shapes = axis_util.computeOutAndReduceShapes(x.shape, axes);\n        var reduceShape = shapes[1];\n        var reduceSize = util.sizeFromShape(reduceShape);\n        var customOp = (0, _globals.customGrad)(function (x) {\n            var reduceSizeScalar = ops.scalar(reduceSize);\n            var xReduce = reduceSizeScalar.dtype === x.dtype ? x : x.cast(reduceSizeScalar.dtype);\n            var res = xReduce.div(reduceSizeScalar);\n            var value = res.sum(axis, keepDims);\n            var gradFunc = function (dy) {\n                var expandedDyShape = x.shape.slice();\n                axes.forEach(function (axis) {\n                    expandedDyShape[axis] = 1;\n                });\n                var expandedDy = dy.reshape(expandedDyShape);\n                var derX = expandedDy.mul(ops.ones(x.shape, 'float32')).div(reduceSizeScalar);\n                return derX;\n            };\n            return { value: value, gradFunc: gradFunc };\n        });\n        return customOp(x);\n    };\n    ReductionOps.min = function (x, axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        util.assertArgumentsAreTensors({ x: x }, 'min');\n        var origAxes = axis_util.parseAxisParam(axis, x.shape);\n        var axes = origAxes;\n        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);\n        if (permutedAxes != null) {\n            x = x.transpose(permutedAxes);\n            axes = axis_util.getInnerMostAxes(axes.length, x.rank);\n        }\n        var res = _environment.ENV.engine.runKernel(function (backend) {\n            return backend.min(x, axes);\n        }, { x: x });\n        if (keepDims) {\n            var newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n            return res.reshape(newShape);\n        }\n        return res;\n    };\n    ReductionOps.max = function (x, axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        util.assertArgumentsAreTensors({ x: x }, 'max');\n        var origAxes = axis_util.parseAxisParam(axis, x.shape);\n        var axes = origAxes;\n        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);\n        if (permutedAxes != null) {\n            x = x.transpose(permutedAxes);\n            axes = axis_util.getInnerMostAxes(axes.length, x.rank);\n        }\n        var res = _environment.ENV.engine.runKernel(function (backend) {\n            return backend.max(x, axes);\n        }, { x: x });\n        if (keepDims) {\n            var newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n            return res.reshape(newShape);\n        }\n        return res;\n    };\n    ReductionOps.argMin = function (x, axis) {\n        if (axis === void 0) {\n            axis = 0;\n        }\n        util.assertArgumentsAreTensors({ x: x }, 'argMin');\n        if (axis == null) {\n            axis = 0;\n        }\n        var axes = axis_util.parseAxisParam(axis, x.shape);\n        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);\n        if (permutedAxes != null) {\n            x = x.transpose(permutedAxes);\n            axes = axis_util.getInnerMostAxes(axes.length, x.rank);\n        }\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.argMin(x, axes[0]);\n        }, { x: x });\n    };\n    ReductionOps.argMax = function (x, axis) {\n        if (axis === void 0) {\n            axis = 0;\n        }\n        util.assertArgumentsAreTensors({ x: x }, 'argMax');\n        if (axis == null) {\n            axis = 0;\n        }\n        var axes = axis_util.parseAxisParam(axis, x.shape);\n        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);\n        if (permutedAxes != null) {\n            x = x.transpose(permutedAxes);\n            axes = axis_util.getInnerMostAxes(axes.length, x.rank);\n        }\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.argMax(x, axes[0]);\n        }, { x: x });\n    };\n    ReductionOps.moments = function (x, axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        util.assertArgumentsAreTensors({ x: x }, 'moments');\n        var axes = axis_util.parseAxisParam(axis, x.shape);\n        var mean = x.mean(axes, keepDims);\n        var keepDimsShape = mean.shape;\n        if (!keepDims) {\n            keepDimsShape = axis_util.expandShapeToKeepDim(mean.shape, axes);\n        }\n        var devSquared = x.toFloat().sub(mean.reshape(keepDimsShape)).square();\n        var variance = devSquared.mean(axes, keepDims);\n        return { mean: mean, variance: variance };\n    };\n    ReductionOps.unsortedSegmentSum = function (x, segmentIds, numSegments, axis) {\n        if (axis === void 0) {\n            axis = 0;\n        }\n        util.assertArgumentsAreTensors({ x: x, segmentIds: segmentIds }, 'unsortedSegmentSum');\n        util.assert(segmentIds.dtype === 'int32', 'Segment Ids must be of dtype `int32`');\n        axis = axis_util.parseAxisParam(axis, x.shape)[0];\n        var res = [];\n        var dim = segmentIds.shape[0];\n        var newShape = [];\n        for (var i = 0; i < x.shape.length; i++) {\n            if (i === axis) {\n                newShape.push(dim);\n            } else {\n                newShape.push(1);\n            }\n        }\n        var reshapedSegmentIds = ops.reshape(segmentIds, newShape);\n        for (var i = 0; i < numSegments; i++) {\n            var segmentId = ops.scalar(i, 'int32');\n            var mask = ops.equal(segmentId, reshapedSegmentIds).asType('float32');\n            var sum = mask.mul(x).sum(axis);\n            res.push(sum);\n        }\n        return ops.stack(res, axis);\n    };\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, \"logSumExp\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, \"sum\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, \"mean\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, \"min\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, \"max\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, \"argMin\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, \"argMax\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Normalization' }), _operation.operation], ReductionOps, \"moments\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, \"unsortedSegmentSum\", null);\n    return ReductionOps;\n}();\nexports.ReductionOps = ReductionOps;\n//# sourceMappingURL=reduction_ops.js.map"},"hash":"dd1637a2ee8c79c33a2a656321bd1bb9","cacheData":{"env":{}}}