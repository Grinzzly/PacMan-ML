{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../utils/generic_utils","loc":{"line":1,"column":31}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.convertPythonicToTs = convertPythonicToTs;\nexports.convertTsToPythonic = convertTsToPythonic;\n\nvar _generic_utils = require('../utils/generic_utils');\n\nvar generic_utils = _interopRequireWildcard(_generic_utils);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction isArrayItemInputOrOutputName(key, index, value) {\n    return (key === 'inboundNodes' || key === 'outputLayers' || key === 'inputLayers') && index === 0 && typeof value === 'string';\n}\nfunction convertPythonicToTs(pythonicConfig, key) {\n    if (pythonicConfig === null) {\n        return null;\n    } else if (typeof pythonicConfig === 'string') {\n        return generic_utils.toCamelCase(pythonicConfig);\n    } else if (typeof pythonicConfig === 'number' || typeof pythonicConfig === 'boolean') {\n        return pythonicConfig;\n    } else if (pythonicConfig instanceof Array) {\n        var tsArray = [];\n        var arrayLength = pythonicConfig.length;\n        for (var i = 0; i < arrayLength; ++i) {\n            var item = pythonicConfig[i];\n            if (isArrayItemInputOrOutputName(key, i, item)) {\n                tsArray.push(item);\n            } else {\n                tsArray.push(convertPythonicToTs(item, key));\n            }\n        }\n        return tsArray;\n    } else {\n        var tsDict = {};\n        for (var _i = 0, _a = Object.keys(pythonicConfig); _i < _a.length; _i++) {\n            var pythonicKey = _a[_i];\n            var pythonicValue = pythonicConfig[pythonicKey];\n            if (pythonicKey === 'name' && typeof pythonicValue === 'string') {\n                tsDict[pythonicKey] = pythonicValue;\n            } else {\n                var tsKey = generic_utils.toCamelCase(pythonicKey);\n                tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);\n            }\n        }\n        return tsDict;\n    }\n}\nfunction convertTsToPythonic(tsConfig, key) {\n    if (tsConfig === null || tsConfig === undefined) {\n        return null;\n    } else if (typeof tsConfig === 'string') {\n        return generic_utils.toSnakeCase(tsConfig);\n    } else if (typeof tsConfig === 'number' || typeof tsConfig === 'boolean') {\n        return tsConfig;\n    } else if (tsConfig instanceof Array) {\n        var pyArray = [];\n        var arrayLength = tsConfig.length;\n        for (var i = 0; i < arrayLength; ++i) {\n            var item = tsConfig[i];\n            if (isArrayItemInputOrOutputName(key, i, item)) {\n                pyArray.push(item);\n            } else {\n                pyArray.push(convertTsToPythonic(item, key));\n            }\n        }\n        return pyArray;\n    } else {\n        var pyDict = {};\n        for (var _i = 0, _a = Object.keys(tsConfig); _i < _a.length; _i++) {\n            var tsKey = _a[_i];\n            var tsValue = tsConfig[tsKey];\n            var pyKey = generic_utils.toSnakeCase(tsKey);\n            if ((tsKey === 'name' || tsKey === 'className') && typeof tsValue === 'string') {\n                pyDict[pyKey] = tsValue;\n            } else {\n                pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);\n            }\n        }\n        return pyDict;\n    }\n}\n//# sourceMappingURL=serialization_utils.js.map"},"hash":"d8cae8627273d7e2919125ef1432363e","cacheData":{"env":{}}}