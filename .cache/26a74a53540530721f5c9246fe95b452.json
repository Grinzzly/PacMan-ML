{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-converter/package.json","includedInParent":true,"mtime":1528724212618},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-converter/.babelrc","includedInParent":true,"mtime":1528724212614},{"name":"../data/compiled_api","loc":{"line":1,"column":27}},{"name":"./executors/utils","loc":{"line":2,"column":36}},{"name":"./op_list/arithmetic.json","loc":{"line":3,"column":28}},{"name":"./op_list/basic_math.json","loc":{"line":4,"column":27}},{"name":"./op_list/control.json","loc":{"line":5,"column":25}},{"name":"./op_list/convolution.json","loc":{"line":6,"column":29}},{"name":"./op_list/creation.json","loc":{"line":7,"column":26}},{"name":"./op_list/graph.json","loc":{"line":8,"column":23}},{"name":"./op_list/image.json","loc":{"line":9,"column":23}},{"name":"./op_list/logical.json","loc":{"line":10,"column":25}},{"name":"./op_list/matrices.json","loc":{"line":11,"column":26}},{"name":"./op_list/normalization.json","loc":{"line":12,"column":31}},{"name":"./op_list/reduction.json","loc":{"line":13,"column":27}},{"name":"./op_list/slice_join.json","loc":{"line":14,"column":27}},{"name":"./op_list/transformation.json","loc":{"line":15,"column":32}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.OperationMapper = undefined;\n\nvar _compiled_api = require('../data/compiled_api');\n\nvar _utils = require('./executors/utils');\n\nvar _arithmetic = require('./op_list/arithmetic.json');\n\nvar arithmetic = _interopRequireWildcard(_arithmetic);\n\nvar _basic_math = require('./op_list/basic_math.json');\n\nvar basicMath = _interopRequireWildcard(_basic_math);\n\nvar _control = require('./op_list/control.json');\n\nvar control = _interopRequireWildcard(_control);\n\nvar _convolution = require('./op_list/convolution.json');\n\nvar convolution = _interopRequireWildcard(_convolution);\n\nvar _creation = require('./op_list/creation.json');\n\nvar creation = _interopRequireWildcard(_creation);\n\nvar _graph = require('./op_list/graph.json');\n\nvar graph = _interopRequireWildcard(_graph);\n\nvar _image = require('./op_list/image.json');\n\nvar image = _interopRequireWildcard(_image);\n\nvar _logical = require('./op_list/logical.json');\n\nvar logical = _interopRequireWildcard(_logical);\n\nvar _matrices = require('./op_list/matrices.json');\n\nvar matrices = _interopRequireWildcard(_matrices);\n\nvar _normalization = require('./op_list/normalization.json');\n\nvar normalization = _interopRequireWildcard(_normalization);\n\nvar _reduction = require('./op_list/reduction.json');\n\nvar reduction = _interopRequireWildcard(_reduction);\n\nvar _slice_join = require('./op_list/slice_join.json');\n\nvar sliceJoin = _interopRequireWildcard(_slice_join);\n\nvar _transformation = require('./op_list/transformation.json');\n\nvar transformation = _interopRequireWildcard(_transformation);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration'];\nvar OperationMapper = function () {\n    function OperationMapper() {\n        var ops = [arithmetic, basicMath, control, convolution, creation, logical, image, graph, matrices, normalization, reduction, sliceJoin, transformation];\n        var mappersJson = [].concat.apply([], ops.map(function (op) {\n            return op.default ? op.default : op;\n        }));\n        this.opMappers = mappersJson.reduce(function (map, mapper) {\n            map[mapper.tfOpName] = mapper;\n            return map;\n        }, {});\n    }\n    Object.defineProperty(OperationMapper, \"Instance\", {\n        get: function () {\n            return this._instance || (this._instance = new this());\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OperationMapper.prototype.isControlFlow = function (node) {\n        return CONTROL_FLOW_OPS.some(function (op) {\n            return op === node.op;\n        });\n    };\n    OperationMapper.prototype.transformGraph = function (graph) {\n        var _this = this;\n        var tfNodes = graph.node;\n        var withControlFlow = false;\n        var placeholders = [];\n        var nodes = tfNodes.reduce(function (map, node) {\n            map[node.name] = _this.mapNode(node);\n            if (_this.isControlFlow(node)) withControlFlow = true;\n            if (node.op === 'Placeholder') placeholders.push(map[node.name]);\n            return map;\n        }, {});\n        var inputs = [];\n        var outputs = [];\n        Object.keys(nodes).forEach(function (key) {\n            var node = nodes[key];\n            node.inputNames.forEach(function (name) {\n                var nodeName = (0, _utils.getNodeNameAndIndex)(name)[0];\n                node.inputs.push(nodes[nodeName]);\n                nodes[nodeName].children.push(node);\n            });\n            if (node.inputs.length === 0) inputs.push(node);\n        });\n        Object.keys(nodes).forEach(function (key) {\n            var node = nodes[key];\n            if (node.children.length === 0) outputs.push(node);\n        });\n        return { nodes: nodes, inputs: inputs, outputs: outputs, placeholders: placeholders, withControlFlow: withControlFlow };\n    };\n    OperationMapper.prototype.mapNode = function (node) {\n        var _this = this;\n        var mapper = this.opMappers[node.op];\n        if (mapper === undefined) {\n            throw new Error('Tensorflow Op is not supported: ' + node.op);\n        }\n        var newNode = {\n            name: node.name,\n            op: mapper.dlOpName,\n            category: mapper.category,\n            inputNames: (node.input || []).map(function (input) {\n                return input.startsWith('^') ? input.substr(1) : input;\n            }),\n            inputs: [],\n            children: [],\n            params: {}\n        };\n        if (!!mapper.params) {\n            newNode.params = mapper.params.reduce(function (map, param) {\n                var inputIndex = param.tfInputIndex;\n                var inputParamLength = param.tfInputParamLength;\n                var type = param.type;\n                var value = undefined;\n                if (inputIndex === undefined) {\n                    switch (param.type) {\n                        case 'string':\n                            value = _this.getStringParam(node.attr, param.tfParamName, param.defaultValue);\n                            if (value === undefined && !!param.tfParamNameDeprecated) {\n                                value = _this.getStringParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);\n                            }\n                            break;\n                        case 'number':\n                            value = _this.getNumberParam(node.attr, param.tfParamName, param.defaultValue);\n                            if (value === undefined && !!param.tfParamNameDeprecated) {\n                                value = _this.getNumberParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);\n                            }\n                            break;\n                        case 'number[]':\n                            value = _this.getNumericArrayParam(node.attr, param.tfParamName, param.defaultValue);\n                            if (value === undefined && !!param.tfParamNameDeprecated) {\n                                value = _this.getNumericArrayParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);\n                            }\n                            break;\n                        case 'bool':\n                            value = _this.getBoolParam(node.attr, param.tfParamName, param.defaultValue);\n                            if (value === undefined && !!param.tfParamNameDeprecated) {\n                                value = _this.getBoolParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);\n                            }\n                            break;\n                        case 'shape':\n                            value = _this.getTensorShapeParam(node.attr, param.tfParamName, param.defaultValue);\n                            if (value === undefined && !!param.tfParamNameDeprecated) {\n                                value = _this.getTensorShapeParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);\n                            }\n                            break;\n                        case 'dtype':\n                            value = _this.getDtypeParam(node.attr, param.tfParamName, param.defaultValue);\n                            if (value === undefined && !!param.tfParamNameDeprecated) {\n                                value = _this.getDtypeParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);\n                            }\n                            break;\n                        case 'tensor':\n                        case 'tensors':\n                            break;\n                        default:\n                            throw new Error(\"Unsupported param type: \" + param.type + \" for op: \" + node.op);\n                    }\n                }\n                map[param.dlParamName] = { value: value, inputIndex: inputIndex, type: type, inputParamLength: inputParamLength };\n                return map;\n            }, {});\n        }\n        return newNode;\n    };\n    OperationMapper.prototype.getStringParam = function (attrs, name, def, keepCase) {\n        if (keepCase === void 0) {\n            keepCase = false;\n        }\n        var param = attrs[name];\n        if (param !== undefined) {\n            var value = String.fromCharCode.apply(null, param.s);\n            return keepCase ? value : value.toLowerCase();\n        }\n        return def;\n    };\n    OperationMapper.prototype.getBoolParam = function (attrs, name, def) {\n        var param = attrs[name];\n        return param ? param.b : def;\n    };\n    OperationMapper.prototype.getNumberParam = function (attrs, name, def) {\n        var param = attrs[name];\n        var value = param ? param.f !== undefined ? param.f : param.i : def;\n        return typeof value === 'number' ? value : value['toInt']();\n    };\n    OperationMapper.prototype.getDtypeParam = function (attrs, name, def) {\n        var param = attrs[name];\n        if (param && param.type) {\n            switch (param.type) {\n                case _compiled_api.tensorflow.DataType.DT_FLOAT:\n                    return 'float32';\n                case _compiled_api.tensorflow.DataType.DT_INT32:\n                    return 'int32';\n                case _compiled_api.tensorflow.DataType.DT_BOOL:\n                    return 'bool';\n                default:\n                    return def;\n            }\n        }\n        return def;\n    };\n    OperationMapper.prototype.getTensorShapeParam = function (attrs, name, def) {\n        var param = attrs[name];\n        if (param && param.shape) {\n            return param.shape.dim.map(function (dim) {\n                return dim.size;\n            });\n        }\n        return def;\n    };\n    OperationMapper.prototype.getNumericArrayParam = function (attrs, name, def) {\n        var param = attrs[name];\n        if (param) {\n            return (param.list.f && param.list.f.length ? param.list.f : param.list.i).map(function (v) {\n                return typeof v === 'number' ? v : v['toInt']();\n            });\n        }\n        return def;\n    };\n    return OperationMapper;\n}();\nexports.OperationMapper = OperationMapper;\n//# sourceMappingURL=operation_mapper.js.map"},"hash":"071c55fb5de01058c32b851d6a9f919b","cacheData":{"env":{}}}