{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1528724212618},{"name":"@tensorflow/tfjs-core","loc":{"line":18,"column":41}},{"name":"./backend/tfjs_backend","loc":{"line":19,"column":19}},{"name":"./utils/generic_utils","loc":{"line":20,"column":61}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = exports.MinMaxNorm = exports.NonNeg = exports.UnitNorm = exports.MaxNorm = exports.Constraint = undefined;\nexports.serializeConstraint = serializeConstraint;\nexports.deserializeConstraint = deserializeConstraint;\nexports.getConstraint = getConstraint;\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tfc = _interopRequireWildcard(_tfjsCore);\n\nvar _tfjs_backend = require(\"./backend/tfjs_backend\");\n\nvar K = _interopRequireWildcard(_tfjs_backend);\n\nvar _generic_utils = require(\"./utils/generic_utils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar __extends = undefined && undefined.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nfunction calcL2Norms(w, axis) {\n    return (0, _tfjsCore.tidy)(function () {\n        return tfc.sqrt(tfc.sum(K.square(w), axis, true));\n    });\n}\nvar Constraint = function (_super) {\n    __extends(Constraint, _super);\n    function Constraint() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Constraint.prototype.getConfig = function () {\n        return {};\n    };\n    Constraint = __decorate([(0, _tfjsCore.doc)({ heading: 'Constraints', subheading: 'Classes', namespace: 'constraints' })], Constraint);\n    return Constraint;\n}(_tfjsCore.serialization.Serializable);\nexports.Constraint = Constraint;\n\nvar MaxNorm = function (_super) {\n    __extends(MaxNorm, _super);\n    function MaxNorm(config) {\n        var _this = _super.call(this) || this;\n        _this.defaultMaxValue = 2;\n        _this.defaultAxis = 0;\n        _this.maxValue = config.maxValue != null ? config.maxValue : _this.defaultMaxValue;\n        _this.axis = config.axis != null ? config.axis : _this.defaultAxis;\n        return _this;\n    }\n    MaxNorm.prototype.apply = function (w) {\n        var _this = this;\n        return (0, _tfjsCore.tidy)(function () {\n            var norms = calcL2Norms(w, _this.axis);\n            var desired = tfc.clipByValue(norms, 0, _this.maxValue);\n            return tfc.mul(w, tfc.div(desired, K.scalarPlusArray(K.getScalar(K.epsilon()), norms)));\n        });\n    };\n    MaxNorm.prototype.getConfig = function () {\n        return { maxValue: this.maxValue, axis: this.axis };\n    };\n    MaxNorm.className = 'MaxNorm';\n    return MaxNorm;\n}(Constraint);\nexports.MaxNorm = MaxNorm;\n\n_tfjsCore.serialization.SerializationMap.register(MaxNorm);\nvar UnitNorm = function (_super) {\n    __extends(UnitNorm, _super);\n    function UnitNorm(config) {\n        var _this = _super.call(this) || this;\n        _this.defaultAxis = 0;\n        _this.axis = config.axis != null ? config.axis : _this.defaultAxis;\n        return _this;\n    }\n    UnitNorm.prototype.apply = function (w) {\n        var _this = this;\n        return (0, _tfjsCore.tidy)(function () {\n            return tfc.div(w, K.scalarPlusArray(K.getScalar(K.epsilon()), calcL2Norms(w, _this.axis)));\n        });\n    };\n    UnitNorm.prototype.getConfig = function () {\n        return { axis: this.axis };\n    };\n    UnitNorm.className = 'UnitNorm';\n    return UnitNorm;\n}(Constraint);\nexports.UnitNorm = UnitNorm;\n\n_tfjsCore.serialization.SerializationMap.register(UnitNorm);\nvar NonNeg = function (_super) {\n    __extends(NonNeg, _super);\n    function NonNeg() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NonNeg.prototype.apply = function (w) {\n        return tfc.relu(w);\n    };\n    NonNeg.className = 'NonNeg';\n    return NonNeg;\n}(Constraint);\nexports.NonNeg = NonNeg;\n\n_tfjsCore.serialization.SerializationMap.register(NonNeg);\nvar MinMaxNorm = function (_super) {\n    __extends(MinMaxNorm, _super);\n    function MinMaxNorm(config) {\n        var _this = _super.call(this) || this;\n        _this.defaultMinValue = 0.0;\n        _this.defaultMaxValue = 1.0;\n        _this.defaultRate = 1.0;\n        _this.defaultAxis = 0;\n        _this.minValue = config.minValue != null ? config.minValue : _this.defaultMinValue;\n        _this.maxValue = config.maxValue != null ? config.maxValue : _this.defaultMaxValue;\n        _this.rate = config.rate != null ? config.rate : _this.defaultRate;\n        _this.axis = config.axis != null ? config.axis : _this.defaultAxis;\n        return _this;\n    }\n    MinMaxNorm.prototype.apply = function (w) {\n        var _this = this;\n        return (0, _tfjsCore.tidy)(function () {\n            var norms = calcL2Norms(w, _this.axis);\n            var desired = tfc.add(K.scalarTimesArray(K.getScalar(_this.rate), tfc.clipByValue(norms, _this.minValue, _this.maxValue)), K.scalarTimesArray(K.getScalar(1.0 - _this.rate), norms));\n            return tfc.mul(w, tfc.div(desired, K.scalarPlusArray(K.getScalar(K.epsilon()), norms)));\n        });\n    };\n    MinMaxNorm.prototype.getConfig = function () {\n        return {\n            minValue: this.minValue,\n            maxValue: this.maxValue,\n            rate: this.rate,\n            axis: this.axis\n        };\n    };\n    MinMaxNorm.className = 'MinMaxNorm';\n    return MinMaxNorm;\n}(Constraint);\nexports.MinMaxNorm = MinMaxNorm;\n\n_tfjsCore.serialization.SerializationMap.register(MinMaxNorm);\nvar CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = exports.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'maxNorm': 'MaxNorm',\n    'minMaxNorm': 'MinMaxNorm',\n    'nonNeg': 'NonNeg',\n    'unitNorm': 'UnitNorm'\n};\nfunction serializeConstraint(constraint) {\n    return (0, _generic_utils.serializeKerasObject)(constraint);\n}\nfunction deserializeConstraint(config, customObjects) {\n    if (customObjects === void 0) {\n        customObjects = {};\n    }\n    return (0, _generic_utils.deserializeKerasObject)(config, _tfjsCore.serialization.SerializationMap.getMap().classNameMap, customObjects, 'constraint');\n}\nfunction getConstraint(identifier) {\n    if (identifier == null) {\n        return null;\n    }\n    if (typeof identifier === 'string') {\n        var className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n        var config = { className: className, config: {} };\n        return deserializeConstraint(config);\n    } else if (identifier instanceof Constraint) {\n        return identifier;\n    } else {\n        return deserializeConstraint(identifier);\n    }\n}\n//# sourceMappingURL=constraints.js.map"},"hash":"ebc57da14864f7d7c1ef0766ff501b4a","cacheData":{"env":{}}}