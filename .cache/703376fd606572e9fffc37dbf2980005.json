{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/.babelrc","includedInParent":true,"mtime":1527958497000},{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"babel-runtime/helpers/classCallCheck"},{"name":"babel-runtime/helpers/createClass"},{"name":"@tensorflow/tfjs","loc":{"line":1,"column":20}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DatasetController = undefined;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _tfjs = require('@tensorflow/tfjs');\n\nvar tf = _interopRequireWildcard(_tfjs);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar DatasetController = exports.DatasetController = function () {\n  function DatasetController(numClasses) {\n    (0, _classCallCheck3.default)(this, DatasetController);\n\n    this.numClasses = numClasses;\n  }\n\n  /**\n   * Adds an example to the dataset controller.\n   * @param {Tensor} example.\n   * @param {number} label.\n   */\n\n\n  (0, _createClass3.default)(DatasetController, [{\n    key: 'addExample',\n    value: function addExample(example, label) {\n      var _this = this;\n\n      /* One-hot encode the label. */\n      var y = tf.tidy(function () {\n        return tf.oneHot(tf.tensor1d([label]).toInt(), _this.numClasses);\n      });\n\n      if (this.xs == null) {\n\n        /* For the first example that gets added, keep example and y so that the\n        * DatasetController owns the memory of the inputs. This makes sure that\n        * if addExample() is called in a tf.tidy(), these Tensors will not get\n        * disposed.\n        */\n        this.xs = tf.keep(example);\n        this.ys = tf.keep(y);\n      } else {\n        var oldX = this.xs;\n        this.xs = tf.keep(oldX.concat(example, 0));\n\n        var oldY = this.ys;\n        this.ys = tf.keep(oldY.concat(y, 0));\n\n        oldX.dispose();\n        oldY.dispose();\n        y.dispose();\n      }\n    }\n  }]);\n  return DatasetController;\n}();"},"hash":"9fe05a61d07095118c4764c66f3b2376","cacheData":{"env":{}}}