{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"./doc","loc":{"line":7,"column":20}},{"name":"./environment","loc":{"line":8,"column":20}},{"name":"./globals","loc":{"line":9,"column":21}},{"name":"./tensor","loc":{"line":10,"column":33}},{"name":"./util","loc":{"line":11,"column":22}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Gradients = undefined;\n\nvar _doc = require(\"./doc\");\n\nvar _environment = require(\"./environment\");\n\nvar _globals = require(\"./globals\");\n\nvar _tensor = require(\"./tensor\");\n\nvar _util = require(\"./util\");\n\nvar util = _interopRequireWildcard(_util);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar Gradients = function () {\n    function Gradients() {}\n    Gradients.gradScope = function (nameOrScopeFn, scopeFn) {\n        return (0, _globals.tidy)(nameOrScopeFn, scopeFn, true);\n    };\n    Gradients.grad = function (f) {\n        util.assert(util.isFunction(f), 'The f passed in grad(f) must be a function');\n        return function (x, dy) {\n            util.assert(x instanceof _tensor.Tensor, 'The x passed in grad(f)(x) must be a tensor');\n            util.assert(dy == null || dy instanceof _tensor.Tensor, 'The dy passed in grad(f)(x, dy) must be a tensor');\n            return (0, _globals.tidy)(function () {\n                var _a = _environment.ENV.engine.gradients(function () {\n                    return f(x);\n                }, [x], dy),\n                    value = _a.value,\n                    grads = _a.grads;\n                if (dy != null) {\n                    util.assertShapesMatch(value.shape, dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' + 'returned by f(x)');\n                }\n                checkGrads(grads);\n                return grads[0];\n            });\n        };\n    };\n    Gradients.grads = function (f) {\n        util.assert(util.isFunction(f), 'The f passed in grads(f) must be a function');\n        return function (args, dy) {\n            util.assert(Array.isArray(args) && args.every(function (arg) {\n                return arg instanceof _tensor.Tensor;\n            }), 'The args passed in grads(f)(args) must be an array of tensors');\n            util.assert(dy == null || dy instanceof _tensor.Tensor, 'The dy passed in grads(f)(args, dy) must be a tensor');\n            return (0, _globals.tidy)(function () {\n                var _a = _environment.ENV.engine.gradients(function () {\n                    return f.apply(void 0, args);\n                }, args, dy),\n                    value = _a.value,\n                    grads = _a.grads;\n                if (dy != null) {\n                    util.assertShapesMatch(value.shape, dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');\n                }\n                checkGrads(grads);\n                return grads;\n            });\n        };\n    };\n    Gradients.valueAndGrad = function (f) {\n        util.assert(util.isFunction(f), 'The f passed in valueAndGrad(f) must be a function');\n        return function (x, dy) {\n            util.assert(x instanceof _tensor.Tensor, 'The x passed in valueAndGrad(f)(x) must be a tensor');\n            util.assert(dy == null || dy instanceof _tensor.Tensor, 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');\n            var _a = _environment.ENV.engine.gradients(function () {\n                return f(x);\n            }, [x], dy),\n                grads = _a.grads,\n                value = _a.value;\n            checkGrads(grads);\n            return { grad: grads[0], value: value };\n        };\n    };\n    Gradients.valueAndGrads = function (f) {\n        util.assert(util.isFunction(f), 'The f passed in valueAndGrads(f) must be a function');\n        return function (args, dy) {\n            util.assert(Array.isArray(args) && args.every(function (arg) {\n                return arg instanceof _tensor.Tensor;\n            }), 'The args passed in valueAndGrads(f)(args) must be array of tensors');\n            util.assert(dy == null || dy instanceof _tensor.Tensor, 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');\n            var res = _environment.ENV.engine.gradients(function () {\n                return f.apply(void 0, args);\n            }, args, dy);\n            if (dy != null) {\n                util.assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');\n            }\n            checkGrads(res.grads);\n            return res;\n        };\n    };\n    Gradients.variableGrads = function (f, varList) {\n        util.assert(util.isFunction(f), 'The f passed in variableGrads(f) must be a function');\n        util.assert(varList == null || Array.isArray(varList) && varList.every(function (v) {\n            return v instanceof _tensor.Variable;\n        }), 'The varList passed in variableGrads(f, varList) must be an array ' + 'of variables');\n        if (varList == null) {\n            varList = [];\n            for (var varName in _environment.ENV.engine.registeredVariables) {\n                varList.push(_environment.ENV.engine.registeredVariables[varName]);\n            }\n        }\n        var originalVarCount = varList.length;\n        varList = varList.filter(function (variable) {\n            return variable.trainable;\n        });\n        util.assert(varList.length > 0, \"variableGrads() expects at least one of the input variables to be \" + (\"trainable, but none of the \" + originalVarCount + \" variables is \") + \"trainable.\");\n        var allowNoGradients = true;\n        var _a = _environment.ENV.engine.gradients(f, varList, null, allowNoGradients),\n            value = _a.value,\n            grads = _a.grads;\n        util.assert(grads.some(function (g) {\n            return g != null;\n        }), 'Cannot find a connection between any variable and the result of the ' + 'loss function y=f(x). Please make sure the operations that use ' + 'variables are inside the function f passed to minimize().');\n        util.assert(value.rank === 0, \"The f passed in variableGrads(f) must return a scalar, but it \" + (\"returned a rank-\" + value.rank + \" tensor\"));\n        var namedGrads = {};\n        varList.forEach(function (v, i) {\n            if (grads[i] != null) {\n                namedGrads[v.name] = grads[i];\n            }\n        });\n        return { value: value, grads: namedGrads };\n    };\n    Gradients.customGrad = function (f) {\n        return _environment.ENV.engine.customGrad(f);\n    };\n    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Gradients' })], Gradients, \"grad\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Gradients' })], Gradients, \"grads\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Gradients' })], Gradients, \"valueAndGrad\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Gradients' })], Gradients, \"valueAndGrads\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Gradients' })], Gradients, \"variableGrads\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Gradients' })], Gradients, \"customGrad\", null);\n    return Gradients;\n}();\nexports.Gradients = Gradients;\n\nfunction checkGrads(grads) {\n    var numNullGradients = grads.filter(function (g) {\n        return g == null;\n    }).length;\n    if (numNullGradients > 0) {\n        throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that\\n    the f you passed encloses all operations that lead from x to y.\");\n    }\n}\n//# sourceMappingURL=gradients.js.map"},"hash":"f49cc0195a455592833d3db916e5d20e","cacheData":{"env":{}}}