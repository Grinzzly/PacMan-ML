{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../doc","loc":{"line":7,"column":20}},{"name":"../environment","loc":{"line":8,"column":20}},{"name":"../util","loc":{"line":9,"column":22}},{"name":"./operation","loc":{"line":10,"column":26}},{"name":"./ops","loc":{"line":12,"column":26}},{"name":"./selu_util","loc":{"line":13,"column":27}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.UnaryOps = undefined;\n\nvar _doc = require(\"../doc\");\n\nvar _environment = require(\"../environment\");\n\nvar _util = require(\"../util\");\n\nvar util = _interopRequireWildcard(_util);\n\nvar _operation = require(\"./operation\");\n\nvar _ops = require(\"./ops\");\n\nvar ops = _interopRequireWildcard(_ops);\n\nvar _selu_util = require(\"./selu_util\");\n\nvar selu_util = _interopRequireWildcard(_selu_util);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar UnaryOps = function () {\n    function UnaryOps() {}\n    UnaryOps.neg = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'neg');\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.neg();\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.neg(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.ceil = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'ceil');\n        var grad = function (dy) {\n            return { x: function () {\n                    return ops.zerosLike(dy);\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.ceil(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.floor = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'floor');\n        var grad = function (dy) {\n            return { x: function () {\n                    return ops.zerosLike(dy);\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.floor(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.sign = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'sign');\n        var grad = function (dy) {\n            return { x: function () {\n                    return ops.zerosLike(dy);\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.sign(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.round = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'round');\n        var grad = function (dy) {\n            return { x: function () {\n                    return ops.zerosLike(dy);\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.round(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.exp = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'exp');\n        var bck = function (dy, saved) {\n            var y = saved[0];\n            return { x: function () {\n                    return dy.mulStrict(y);\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend, save) {\n            return save(backend.exp(x));\n        }, { x: x }, bck);\n    };\n    UnaryOps.expm1 = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'expm1');\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.mulStrict(x.exp());\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.expm1(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.log = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'log');\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.divStrict(x.toFloat());\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.log(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.log1p = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'log1p');\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.divStrict(x.add(ops.scalar(1)));\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.log1p(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.sqrt = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'sqrt');\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.divStrict(x.toFloat().sqrt().mul(ops.scalar(2)));\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.sqrt(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.rsqrt = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'rsqrt');\n        var grad = function (dy) {\n            return {\n                x: function () {\n                    return dy.divStrict(x.pow(ops.scalar(1.5)).mul(ops.scalar(2))).neg();\n                }\n            };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.rsqrt(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.square = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'square');\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.mulStrict(x.toFloat().mul(ops.scalar(2)));\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.square(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.reciprocal = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'reciprocal');\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.divStrict(x.square().neg());\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.reciprocal(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.abs = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'abs');\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.mulStrict(x.toFloat().step(-1));\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.abs(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.clipByValue = function (x, clipValueMin, clipValueMax) {\n        util.assertArgumentsAreTensors({ x: x }, 'clipByValue');\n        util.assert(clipValueMin <= clipValueMax, \"Error in clip: min (\" + clipValueMin + \") must be \" + (\"less than or equal to max (\" + clipValueMax + \").\"));\n        var grad = function (dy) {\n            return {\n                x: function () {\n                    return dy.where(x.greaterEqual(ops.scalar(clipValueMin)).logicalAnd(x.lessEqual(ops.scalar(clipValueMax))), (0, _ops.zerosLike)(dy));\n                }\n            };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.clip(x, clipValueMin, clipValueMax);\n        }, { x: x }, grad);\n    };\n    UnaryOps.relu = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'relu');\n        if (x.dtype === 'bool') {\n            return x.toInt();\n        }\n        var grad = function (dy) {\n            var stepRes = x.step();\n            return { x: function () {\n                    return dy.mulStrict(stepRes.toFloat());\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.relu(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.elu = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'elu');\n        var grad = function (dy, saved) {\n            var y = saved[0];\n            return {\n                x: function () {\n                    return _environment.ENV.engine.runKernel(function (backend) {\n                        return backend.eluDer(dy, y);\n                    }, { dy: dy, y: y });\n                }\n            };\n        };\n        return _environment.ENV.engine.runKernel(function (backend, save) {\n            return save(backend.elu(x));\n        }, { x: x }, grad);\n    };\n    UnaryOps.selu = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'selu');\n        var grad = function (dy) {\n            return {\n                x: function () {\n                    var mask = x.greater(ops.scalar(0));\n                    var scaleAlpha = ops.scalar(selu_util.SELU_SCALEALPHA);\n                    var scale = ops.scalar(selu_util.SELU_SCALE);\n                    var greaterThanZeroDer = dy.mul(scale);\n                    var lessEqualZeroDer = dy.mul(scaleAlpha).mul(x.toFloat().exp());\n                    return ops.where(mask, greaterThanZeroDer, lessEqualZeroDer);\n                }\n            };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.selu(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.leakyRelu = function (x, alpha) {\n        if (alpha === void 0) {\n            alpha = 0.2;\n        }\n        util.assertArgumentsAreTensors({ x: x }, 'leakyRelu');\n        return ops.maximum(ops.scalar(alpha).mul(x), x);\n    };\n    UnaryOps.prelu = function (x, alpha) {\n        util.assertArgumentsAreTensors({ x: x, alpha: alpha }, 'prelu');\n        var zero = ops.scalar(0);\n        return ops.maximum(zero, x).add(alpha.mul(ops.minimum(zero, x)));\n    };\n    UnaryOps.sigmoid = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'sigmoid');\n        var grad = function (dy, saved) {\n            var y = saved[0];\n            return { x: function () {\n                    return dy.mulStrict(y.mul(ops.scalar(1).sub(y)));\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend, save) {\n            return save(backend.sigmoid(x));\n        }, { x: x }, grad);\n    };\n    UnaryOps.logSigmoid = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'logSigmoid');\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.mulStrict(x.neg().sigmoid());\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.softplus(x.neg()).neg();\n        }, { x: x }, grad);\n    };\n    UnaryOps.softplus = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'softplus');\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.mulStrict(x.sigmoid());\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.softplus(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.sin = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'sin');\n        var grad = function (dy) {\n            return { x: function () {\n                    return x.toFloat().cos().mulStrict(dy);\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.sin(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.cos = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'cos');\n        var grad = function (dy) {\n            return { x: function () {\n                    return x.toFloat().sin().neg().mulStrict(dy);\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.cos(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.tan = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'tan');\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.divStrict(x.cos().square());\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.tan(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.asin = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'asin');\n        var grad = function (dy) {\n            return {\n                x: function () {\n                    return dy.divStrict(UnaryOps.sqrt(ops.scalar(1).sub(x.toFloat().square())));\n                }\n            };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.asin(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.acos = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'acos');\n        var grad = function (dy) {\n            return {\n                x: function () {\n                    return dy.divStrict(UnaryOps.sqrt(ops.scalar(1).sub(x.toFloat().square()))).neg();\n                }\n            };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.acos(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.atan = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'atan');\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.divStrict(ops.scalar(1).add(x.toFloat().square()));\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.atan(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.sinh = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'sinh');\n        var grad = function (dy) {\n            return { x: function () {\n                    return x.toFloat().cosh().mulStrict(dy);\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.sinh(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.cosh = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'cosh');\n        var grad = function (dy) {\n            return { x: function () {\n                    return x.toFloat().sinh().mulStrict(dy);\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.cosh(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.tanh = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'tanh');\n        var grad = function (dy, saved) {\n            var y = saved[0];\n            return { x: function () {\n                    return ops.scalar(1).sub(y.square()).mulStrict(dy);\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend, save) {\n            return save(backend.tanh(x));\n        }, { x: x }, grad);\n    };\n    UnaryOps.asinh = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'asinh');\n        var grad = function (dy) {\n            return {\n                x: function () {\n                    return dy.divStrict(UnaryOps.sqrt(ops.scalar(1).add(x.toFloat().square())));\n                }\n            };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.asinh(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.acosh = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'acosh');\n        var grad = function (dy) {\n            return {\n                x: function () {\n                    return dy.divStrict(UnaryOps.sqrt(x.toFloat().square().sub(ops.scalar(1))));\n                }\n            };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.acosh(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.atanh = function (x) {\n        util.assertArgumentsAreTensors({ x: x }, 'atanh');\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.divStrict(ops.scalar(1).sub(x.toFloat().square()));\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.atanh(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.erf = function (x) {\n        util.assert(x.dtype === 'int32' || x.dtype === 'float32', 'Input dtype must be `int32` or `float32`.');\n        if (x.dtype === 'int32') {\n            x = x.toFloat();\n        }\n        var grad = function (dy) {\n            return {\n                x: function () {\n                    return dy.mulStrict(ops.scalar(2 / Math.sqrt(Math.PI)).mul(x.square().neg().exp()));\n                }\n            };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.erf(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.step = function (x, alpha) {\n        if (alpha === void 0) {\n            alpha = 0.0;\n        }\n        util.assertArgumentsAreTensors({ x: x }, 'step');\n        var grad = function (dy) {\n            return { x: function () {\n                    return ops.zerosLike(dy);\n                } };\n        };\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.step(x, alpha);\n        }, { x: x }, grad);\n    };\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"neg\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"ceil\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"floor\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"sign\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"round\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"exp\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"expm1\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"log\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"log1p\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"sqrt\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"rsqrt\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"square\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"reciprocal\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"abs\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"clipByValue\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"relu\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"elu\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"selu\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"leakyRelu\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"prelu\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"sigmoid\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"logSigmoid\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"softplus\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"sin\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"cos\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"tan\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"asin\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"acos\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"atan\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"sinh\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"cosh\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"tanh\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"asinh\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"acosh\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"atanh\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"erf\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, \"step\", null);\n    return UnaryOps;\n}();\nexports.UnaryOps = UnaryOps;\n//# sourceMappingURL=unary_ops.js.map"},"hash":"b002f48a92bfb65a3abdc60638a17276","cacheData":{"env":{}}}