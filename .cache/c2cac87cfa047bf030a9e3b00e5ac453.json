{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../../environment","loc":{"line":36,"column":20}},{"name":"./tex_util","loc":{"line":37,"column":26}},{"name":"./webgl_util","loc":{"line":38,"column":28}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getWebGLContextAttributes = getWebGLContextAttributes;\nexports.createWebGLContext = createWebGLContext;\nexports.createVertexShader = createVertexShader;\nexports.createVertexBuffer = createVertexBuffer;\nexports.createIndexBuffer = createIndexBuffer;\nexports.createMatrixTexture = createMatrixTexture;\nexports.createColorMatrixTexture = createColorMatrixTexture;\nexports.createPackedMatrixTexture = createPackedMatrixTexture;\nexports.bindVertexProgramAttributeStreams = bindVertexProgramAttributeStreams;\nexports.uploadPixelDataToTexture = uploadPixelDataToTexture;\nexports.uploadMatrixToTexture = uploadMatrixToTexture;\nexports.uploadMatrixToPackedTexture = uploadMatrixToPackedTexture;\nexports.downloadMatrixFromOutputTextureAsync = downloadMatrixFromOutputTextureAsync;\nexports.downloadMatrixFromOutputTexture = downloadMatrixFromOutputTexture;\nexports.downloadMatrixFromRGBAColorTexture = downloadMatrixFromRGBAColorTexture;\nexports.downloadMatrixFromPackedOutputTexture = downloadMatrixFromPackedOutputTexture;\n\nvar _environment = require(\"../../environment\");\n\nvar _tex_util = require(\"./tex_util\");\n\nvar tex_util = _interopRequireWildcard(_tex_util);\n\nvar _webgl_util = require(\"./webgl_util\");\n\nvar webgl_util = _interopRequireWildcard(_webgl_util);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = undefined && undefined.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nfunction getWebGLContextAttributes() {\n    return {\n        alpha: false,\n        antialias: false,\n        premultipliedAlpha: false,\n        preserveDrawingBuffer: false,\n        depth: false,\n        stencil: false,\n        failIfMajorPerformanceCaveat: true\n    };\n}\nfunction createWebGLContext(canvas) {\n    var attributes = getWebGLContextAttributes();\n    var gl;\n    if (canvas != null) {\n        gl = webgl_util.createWebGLRenderingContextFromCanvas(canvas, attributes);\n    } else {\n        gl = webgl_util.createWebGLRenderingContext(attributes);\n    }\n    webgl_util.callAndCheck(gl, function () {\n        return gl.disable(gl.DEPTH_TEST);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.disable(gl.STENCIL_TEST);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.disable(gl.BLEND);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.disable(gl.DITHER);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.disable(gl.POLYGON_OFFSET_FILL);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.disable(gl.SAMPLE_COVERAGE);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.enable(gl.SCISSOR_TEST);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.enable(gl.CULL_FACE);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.cullFace(gl.BACK);\n    });\n    return gl;\n}\nfunction createVertexShader(gl) {\n    var vertexShaderSource = \"\\n    precision highp float;\\n    attribute vec3 clipSpacePos;\\n    attribute vec2 uv;\\n    varying vec2 resultUV;\\n\\n    void main() {\\n      gl_Position = vec4(clipSpacePos, 1);\\n      resultUV = uv;\\n    }\";\n    return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nfunction createVertexBuffer(gl) {\n    var vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n    return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nfunction createIndexBuffer(gl) {\n    var triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n    return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\nfunction getTextureInternalFormat(gl, numChannels) {\n    if (!_environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {\n        return gl.RGBA;\n    }\n    if (_environment.ENV.get('WEBGL_VERSION') === 2) {\n        if (numChannels === 4) {\n            return gl.RGBA32F;\n        }\n        return gl.R32F;\n    }\n    return gl.RGBA;\n}\nfunction getTextureFormat(gl, numChannels) {\n    if (!_environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {\n        return gl.RGBA;\n    }\n    if (_environment.ENV.get('WEBGL_VERSION') === 2) {\n        if (numChannels === 4) {\n            return gl.RGBA;\n        }\n        return gl.RED;\n    }\n    return gl.RGBA;\n}\nfunction getTextureType(gl) {\n    if (!_environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {\n        return gl.UNSIGNED_BYTE;\n    }\n    return gl.FLOAT;\n}\nfunction createAndConfigureTexture(gl, width, height, numChannels) {\n    webgl_util.validateTextureSize(gl, width, height);\n    var texture = webgl_util.createTexture(gl);\n    var tex2d = gl.TEXTURE_2D;\n    var internalFormat = getTextureInternalFormat(gl, numChannels);\n    var format = getTextureFormat(gl, numChannels);\n    webgl_util.callAndCheck(gl, function () {\n        return gl.bindTexture(tex2d, texture);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, format, getTextureType(gl), null);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.bindTexture(gl.TEXTURE_2D, null);\n    });\n    return texture;\n}\nfunction createMatrixTexture(gl, rows, columns) {\n    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),\n        width = _a[0],\n        height = _a[1];\n    var numChannels = 1;\n    return createAndConfigureTexture(gl, width, height, numChannels);\n}\nfunction createColorMatrixTexture(gl, rows, columns) {\n    var _a = tex_util.getColorMatrixTextureShapeWidthHeight(rows, columns),\n        width = _a[0],\n        height = _a[1];\n    var numChannels = 4;\n    return createAndConfigureTexture(gl, width, height, numChannels);\n}\nfunction createPackedMatrixTexture(gl, rows, columns) {\n    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),\n        width = _a[0],\n        height = _a[1];\n    var numChannels = 4;\n    return createAndConfigureTexture(gl, width, height, numChannels);\n}\nfunction bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n    var posOffset = 0;\n    var uvOffset = 3 * 4;\n    var stride = 3 * 4 + 2 * 4;\n    webgl_util.callAndCheck(gl, function () {\n        return gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    });\n    var success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n    return success && webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nfunction uploadPixelDataToTexture(gl, texture, pixels) {\n    webgl_util.callAndCheck(gl, function () {\n        return gl.bindTexture(gl.TEXTURE_2D, texture);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.bindTexture(gl.TEXTURE_2D, null);\n    });\n}\nfunction uploadDataToTexture(gl, texture, width, height, data, numChannels) {\n    var textureFormat = getTextureFormat(gl, numChannels);\n    webgl_util.validateTextureSize(gl, width, height);\n    webgl_util.callAndCheck(gl, function () {\n        return gl.bindTexture(gl.TEXTURE_2D, texture);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, textureFormat, getTextureType(gl), data);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.bindTexture(gl.TEXTURE_2D, null);\n    });\n}\nfunction uploadMatrixToTexture(gl, texture, rows, columns, matrix, numChannels) {\n    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),\n        w = _a[0],\n        h = _a[1];\n    var unpackedArray;\n    if (_environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {\n        var channelsPerTexture = numChannels === 1 ? webgl_util.getChannelsPerTexture() : numChannels;\n        if (channelsPerTexture === 1) {\n            unpackedArray = matrix;\n        } else {\n            unpackedArray = new Float32Array(tex_util.getUnpackedArraySizeFromMatrixSize(matrix.length, channelsPerTexture));\n            tex_util.encodeMatrixToUnpackedArray(matrix, unpackedArray, channelsPerTexture);\n        }\n    } else {\n        unpackedArray = tex_util.encodeFloatArray(matrix);\n    }\n    uploadDataToTexture(gl, texture, w, h, unpackedArray, numChannels);\n}\nfunction uploadMatrixToPackedTexture(gl, texture, rows, columns, matrix) {\n    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),\n        w = _a[0],\n        h = _a[1];\n    var packedRGBA = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(rows, columns));\n    tex_util.encodeMatrixToPackedRGBA(matrix, rows, columns, packedRGBA);\n    var numChannels = 4;\n    uploadDataToTexture(gl, texture, w, h, packedRGBA, numChannels);\n}\nvar floatDownloadBuffer = null;\nvar byteDownloadBuffer = null;\nfunction getDownloadTargetArrayBuffer(rows, columns, channelsPerTexture) {\n    var isFloatTexture = _environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED');\n    var neededSize = rows * columns * channelsPerTexture;\n    if (isFloatTexture) {\n        if (floatDownloadBuffer == null || floatDownloadBuffer.length < neededSize) {\n            floatDownloadBuffer = new Float32Array(neededSize);\n        }\n    } else {\n        if (byteDownloadBuffer == null || byteDownloadBuffer.length < neededSize) {\n            byteDownloadBuffer = new Uint8Array(neededSize);\n        }\n    }\n    return (isFloatTexture ? floatDownloadBuffer : byteDownloadBuffer).subarray(0, neededSize);\n}\nfunction decodeDownloadTargetArrayBuffer(downloadTarget, rows, columns, channelsPerPixel) {\n    var isFloatTexture = _environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED');\n    if (isFloatTexture) {\n        var matrix = new Float32Array(rows * columns);\n        tex_util.decodeMatrixFromUnpackedArray(downloadTarget, matrix, channelsPerPixel);\n        return matrix;\n    } else {\n        return tex_util.decodeToFloatArray(downloadTarget);\n    }\n}\nfunction downloadMatrixFromOutputTextureAsync(gl, getBufferSubDataAsyncExtension, rows, columns) {\n    return __awaiter(this, void 0, void 0, function () {\n        var gl2, channelsPerPixel, downloadTarget, bufferSizeBytes, buffer;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    gl2 = gl;\n                    channelsPerPixel = 4;\n                    downloadTarget = getDownloadTargetArrayBuffer(rows, columns, channelsPerPixel);\n                    bufferSizeBytes = downloadTarget instanceof Float32Array ? downloadTarget.length * 4 : downloadTarget;\n                    buffer = gl.createBuffer();\n                    webgl_util.callAndCheck(gl, function () {\n                        return gl.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n                    });\n                    webgl_util.callAndCheck(gl, function () {\n                        return gl.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl.STATIC_DRAW);\n                    });\n                    webgl_util.callAndCheck(gl, function () {\n                        return gl2.readPixels(0, 0, columns, rows, gl.RGBA, getTextureType(gl), 0);\n                    });\n                    return [4, getBufferSubDataAsyncExtension.getBufferSubDataAsync(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget)];\n                case 1:\n                    _a.sent();\n                    return [2, decodeDownloadTargetArrayBuffer(downloadTarget, rows, columns, channelsPerPixel)];\n            }\n        });\n    });\n}\nfunction downloadMatrixFromOutputTexture(gl, rows, columns) {\n    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),\n        w = _a[0],\n        h = _a[1];\n    var channelsPerPixel = 4;\n    var downloadTarget = getDownloadTargetArrayBuffer(rows, columns, channelsPerPixel);\n    webgl_util.callAndCheck(gl, function () {\n        return gl.readPixels(0, 0, w, h, gl.RGBA, getTextureType(gl), downloadTarget);\n    });\n    return decodeDownloadTargetArrayBuffer(downloadTarget, rows, columns, channelsPerPixel);\n}\nfunction downloadMatrixFromRGBAColorTexture(gl, rows, columns, channels) {\n    var size = rows * columns * 4;\n    var downloadTarget = new Uint8Array(size);\n    webgl_util.callAndCheck(gl, function () {\n        return gl.readPixels(0, 0, columns, rows, gl.RGBA, gl.UNSIGNED_BYTE, downloadTarget);\n    });\n    var packedRGBA = new Float32Array(size);\n    for (var i = 0; i < downloadTarget.length; i++) {\n        packedRGBA[i] = downloadTarget[i];\n    }\n    var matrix = new Float32Array(rows * columns * channels);\n    tex_util.decodeMatrixFromUnpackedColorRGBAArray(packedRGBA, matrix, channels);\n    return matrix;\n}\nfunction downloadMatrixFromPackedOutputTexture(gl, rows, columns) {\n    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),\n        w = _a[0],\n        h = _a[1];\n    var packedRGBA = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(rows, columns));\n    webgl_util.callAndCheck(gl, function () {\n        return gl.readPixels(0, 0, w, h, gl.RGBA, getTextureType(gl), packedRGBA);\n    });\n    var matrix = new Float32Array(rows * columns);\n    return tex_util.decodeMatrixFromPackedRGBA(packedRGBA, rows, columns, matrix);\n}\n//# sourceMappingURL=gpgpu_util.js.map"},"hash":"618025ab1d47b2548505e5ffdfe2d19c","cacheData":{"env":{}}}