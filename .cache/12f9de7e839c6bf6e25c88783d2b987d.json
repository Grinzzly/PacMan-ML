{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-converter/package.json","includedInParent":true,"mtime":1528724212618},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-converter/.babelrc","includedInParent":true,"mtime":1528724212614},{"name":"@tensorflow/tfjs-core","loc":{"line":1,"column":21}},{"name":"./utils","loc":{"line":2,"column":30}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.CATEGORY = exports.executeOp = undefined;\n\nvar _tfjsCore = require('@tensorflow/tfjs-core');\n\nvar tfc = _interopRequireWildcard(_tfjsCore);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar executeOp = exports.executeOp = function (node, tensorMap, context) {\n    switch (node.op) {\n        case 'fill':\n            {\n                var shape = (0, _utils.getParamValue)('shape', node, tensorMap, context);\n                var value = (0, _utils.getParamValue)('value', node, tensorMap, context);\n                return [tfc.fill(shape, value)];\n            }\n        case 'linspace':\n            {\n                var start = (0, _utils.getParamValue)('start', node, tensorMap, context);\n                var stop_1 = (0, _utils.getParamValue)('stop', node, tensorMap, context);\n                var num = (0, _utils.getParamValue)('num', node, tensorMap, context);\n                return [tfc.linspace(start, stop_1, num)];\n            }\n        case 'oneHot':\n            {\n                var indices = (0, _utils.getParamValue)('indices', node, tensorMap, context);\n                var depth = (0, _utils.getParamValue)('depth', node, tensorMap, context);\n                var onValue = (0, _utils.getParamValue)('onValue', node, tensorMap, context);\n                var offValue = (0, _utils.getParamValue)('offValue', node, tensorMap, context);\n                return [tfc.oneHot(indices, depth, onValue, offValue)];\n            }\n        case 'ones':\n            {\n                return [tfc.ones((0, _utils.getParamValue)('shape', node, tensorMap, context), (0, _utils.getParamValue)('dtype', node, tensorMap, context))];\n            }\n        case 'onesLike':\n            {\n                return [tfc.onesLike((0, _utils.getParamValue)('x', node, tensorMap, context))];\n            }\n        case 'randomUniform':\n            {\n                return [tfc.randomUniform((0, _utils.getParamValue)('shape', node, tensorMap, context), (0, _utils.getParamValue)('minval', node, tensorMap, context), (0, _utils.getParamValue)('maxval', node, tensorMap, context), (0, _utils.getParamValue)('dtype', node, tensorMap, context))];\n            }\n        case 'range':\n            {\n                var start = (0, _utils.getParamValue)('start', node, tensorMap, context);\n                var stop_2 = (0, _utils.getParamValue)('stop', node, tensorMap, context);\n                var step = (0, _utils.getParamValue)('step', node, tensorMap, context);\n                return [tfc.range(start, stop_2, step, (0, _utils.getParamValue)('dtype', node, tensorMap, context))];\n            }\n        case 'truncatedNormal':\n            {\n                var shape = (0, _utils.getParamValue)('shape', node, tensorMap, context);\n                var mean = (0, _utils.getParamValue)('mean', node, tensorMap, context);\n                var stdDev = (0, _utils.getParamValue)('stdDev', node, tensorMap, context);\n                var seed = (0, _utils.getParamValue)('seed', node, tensorMap, context);\n                return [tfc.truncatedNormal(shape, mean, stdDev, (0, _utils.getParamValue)('dtype', node, tensorMap, context), seed)];\n            }\n        case 'zeros':\n            {\n                return [tfc.zeros((0, _utils.getParamValue)('shape', node, tensorMap, context), (0, _utils.getParamValue)('dtype', node, tensorMap, context))];\n            }\n        case 'zerosLike':\n            {\n                return [tfc.zerosLike((0, _utils.getParamValue)('x', node, tensorMap, context))];\n            }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nvar CATEGORY = exports.CATEGORY = 'creation';\n//# sourceMappingURL=creation_executor.js.map"},"hash":"9ea6fd9eefbdcfa7e85fd075de03663b","cacheData":{"env":{}}}