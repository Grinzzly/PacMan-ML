{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../doc","loc":{"line":7,"column":20}},{"name":"../environment","loc":{"line":8,"column":20}},{"name":"../util","loc":{"line":9,"column":22}},{"name":"./conv_util","loc":{"line":10,"column":27}},{"name":"./operation","loc":{"line":11,"column":26}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ConvOps = undefined;\n\nvar _doc = require(\"../doc\");\n\nvar _environment = require(\"../environment\");\n\nvar _util = require(\"../util\");\n\nvar util = _interopRequireWildcard(_util);\n\nvar _conv_util = require(\"./conv_util\");\n\nvar conv_util = _interopRequireWildcard(_conv_util);\n\nvar _operation = require(\"./operation\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar ConvOps = function () {\n    function ConvOps() {}\n    ConvOps.conv1d = function (x, filter, stride, pad, dataFormat, dilation, dimRoundingMode) {\n        if (dataFormat === void 0) {\n            dataFormat = 'NWC';\n        }\n        if (dilation === void 0) {\n            dilation = 1;\n        }\n        util.assertArgumentsAreTensors({ x: x, filter: filter }, 'conv1d');\n        var x3D = x;\n        var reshapedTo3D = false;\n        if (x.rank === 2) {\n            reshapedTo3D = true;\n            x3D = x.as3D(1, x.shape[0], x.shape[1]);\n        }\n        util.assert(x3D.rank === 3, \"Error in conv1d: input must be rank 3, but got rank \" + x3D.rank + \".\");\n        util.assert(filter.rank === 3, \"Error in conv1d: filter must be rank 3, but got rank \" + (filter.rank + \".\"));\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in conv1d: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        util.assert(x3D.shape[2] === filter.shape[1], \"Error in conv1d: depth of input (\" + x3D.shape[2] + \") must match \" + (\"input depth for filter \" + filter.shape[1] + \".\"));\n        util.assert(eitherStridesOrDilationsAreOne(stride, dilation), 'Error in conv1D: Either stride or dilation must be 1. ' + (\"Got stride \" + stride + \" and dilation '\" + dilation + \"'\"));\n        util.assert(dataFormat === 'NWC', \"Error in conv1d: got dataFormat of \" + dataFormat + \" but only NWC is currently supported.\");\n        var filter4D = filter.as4D(1, filter.shape[0], filter.shape[1], filter.shape[2]);\n        var input4D = x3D.as4D(x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]);\n        var strides = [1, stride];\n        var dilations = [1, dilation];\n        var conv2dDataFormat = 'NHWC';\n        var res = ConvOps.conv2d(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);\n        if (reshapedTo3D) {\n            return res.as2D(res.shape[2], res.shape[3]);\n        }\n        return res.as3D(res.shape[0], res.shape[2], res.shape[3]);\n    };\n    ConvOps.conv2d = function (x, filter, strides, pad, dataFormat, dilations, dimRoundingMode) {\n        if (dataFormat === void 0) {\n            dataFormat = 'NHWC';\n        }\n        if (dilations === void 0) {\n            dilations = [1, 1];\n        }\n        util.assertArgumentsAreTensors({ x: x, filter: filter }, 'conv2d');\n        var x4D = x;\n        var reshapedTo4D = false;\n        if (x.rank === 3) {\n            reshapedTo4D = true;\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        util.assert(x4D.rank === 4, \"Error in conv2d: input must be rank 4, but got rank \" + x4D.rank + \".\");\n        util.assert(filter.rank === 4, \"Error in conv2d: filter must be rank 4, but got rank \" + (filter.rank + \".\"));\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in conv2d: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        util.assert(x4D.shape[3] === filter.shape[2], \"Error in conv2d: depth of input (\" + x4D.shape[3] + \") must match \" + (\"input depth for filter \" + filter.shape[2] + \".\"));\n        util.assert(eitherStridesOrDilationsAreOne(strides, dilations), 'Error in conv2D: Either strides or dilations must be 1. ' + (\"Got strides \" + strides + \" and dilations '\" + dilations + \"'\"));\n        util.assert(dataFormat === 'NHWC', \"Error in conv2d: got dataFormat of \" + dataFormat + \" but only NHWC is currently supported.\");\n        var convInfo = conv_util.computeConv2DInfo(x4D.shape, filter.shape, strides, dilations, pad, dimRoundingMode);\n        var grad = function (dy) {\n            util.assert(tupleValuesAreOne(dilations), 'Error in gradient of conv2D: dilation rates greater than 1 are not' + (\"yet supported in gradients. Got dilations '\" + dilations + \"'\"));\n            return {\n                x: function () {\n                    return ConvOps.conv2dDerInput(x4D.shape, dy, filter, strides, pad);\n                },\n                filter: function () {\n                    return ConvOps.conv2dDerFilter(x4D, dy, filter.shape, strides, pad);\n                }\n            };\n        };\n        var res = _environment.ENV.engine.runKernel(function (backend) {\n            return backend.conv2d(x4D, filter, convInfo);\n        }, { x: x4D, filter: filter }, grad);\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    ConvOps.conv2dDerInput = function (xShape, dy, filter, strides, pad, dimRoundingMode) {\n        util.assertArgumentsAreTensors({ dy: dy, filter: filter }, 'conv2dDerInput');\n        util.assert(xShape.length === dy.rank, \"Length of inShape \" + (\"(\" + xShape.length + \") and rank of dy (\" + dy.rank + \") must match\"));\n        var xShape4D = xShape;\n        var dy4D = dy;\n        var reshapedTo4D = false;\n        if (dy.rank === 3) {\n            reshapedTo4D = true;\n            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n            xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n        }\n        var inDepth = xShape4D[3];\n        var outDepth = dy4D.shape[3];\n        util.assert(xShape4D.length === 4, \"Error in conv2dDerInput: inShape must be length 4, but got length \" + (xShape4D.length + \".\"));\n        util.assert(dy4D.rank === 4, \"Error in conv2dDerInput: dy must be rank 4, but got \" + (\"rank \" + dy4D.rank));\n        util.assert(filter.rank === 4, \"Error in conv2dDerInput: filter must be rank 4, but got \" + (\"rank \" + filter.rank));\n        util.assert(inDepth === filter.shape[2], \"Error in conv2dDerInput: depth of input (\" + inDepth + \") must \" + (\"match input depth for filter \" + filter.shape[2] + \".\"));\n        util.assert(outDepth === filter.shape[3], \"Error in conv2dDerInput: depth of output (\" + outDepth + \") must \" + (\"match output depth for filter \" + filter.shape[3] + \".\"));\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in conv2dDerInput: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var dilations = 1;\n        var convInfo = conv_util.computeConv2DInfo(xShape4D, filter.shape, strides, dilations, pad, dimRoundingMode);\n        var res = _environment.ENV.engine.runKernel(function (backend) {\n            return backend.conv2dDerInput(dy4D, filter, convInfo);\n        }, { dy4D: dy4D });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    ConvOps.conv2dDerFilter = function (x, dy, filterShape, strides, pad, dimRoundingMode) {\n        util.assertArgumentsAreTensors({ x: x, dy: dy }, 'conv2dDerFilter');\n        var x4D = x;\n        if (x.rank === 3) {\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        var dy4D = dy;\n        if (dy4D.rank === 3) {\n            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n        }\n        util.assert(x4D.rank === 4, \"Error in conv2dDerFilter: input must be rank 4, but got shape \" + (x4D.shape + \".\"));\n        util.assert(dy4D.rank === 4, \"Error in conv2dDerFilter: dy must be rank 4, but got shape \" + (dy4D.shape + \".\"));\n        util.assert(filterShape.length === 4, \"Error in conv2dDerFilter: filterShape must be length 4, but got \" + (filterShape + \".\"));\n        util.assert(x4D.shape[3] === filterShape[2], \"Error in conv2dDerFilter: depth of input \" + x4D.shape[3] + \") must \" + (\"match input depth in filter (\" + filterShape[2] + \".\"));\n        util.assert(dy4D.shape[3] === filterShape[3], \"Error in conv2dDerFilter: depth of dy (\" + dy4D.shape[3] + \") must \" + (\"match output depth for filter (\" + filterShape[3] + \").\"));\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in conv2dDerFilter: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var dilations = 1;\n        var convInfo = conv_util.computeConv2DInfo(x4D.shape, filterShape, strides, dilations, pad, dimRoundingMode);\n        return _environment.ENV.engine.runKernel(function (backend) {\n            return backend.conv2dDerFilter(x4D, dy4D, convInfo);\n        }, { x4D: x4D, dy4D: dy4D });\n    };\n    ConvOps.conv2dTranspose = function (x, filter, outputShape, strides, pad, dimRoundingMode) {\n        util.assertArgumentsAreTensors({ x: x, filter: filter }, 'conv2dTranspose');\n        return ConvOps.conv2dDerInput(outputShape, x, filter, strides, pad, dimRoundingMode);\n    };\n    ConvOps.depthwiseConv2d = function (x, filter, strides, pad, dataFormat, dilations, dimRoundingMode) {\n        if (dataFormat === void 0) {\n            dataFormat = 'NHWC';\n        }\n        if (dilations === void 0) {\n            dilations = [1, 1];\n        }\n        util.assertArgumentsAreTensors({ x: x, filter: filter }, 'depthwiseConv2d');\n        var x4D = x;\n        var reshapedTo4D = false;\n        if (x.rank === 3) {\n            reshapedTo4D = true;\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        util.assert(x4D.rank === 4, \"Error in depthwiseConv2d: input must be rank 4, but got \" + (\"rank \" + x4D.rank + \".\"));\n        util.assert(filter.rank === 4, \"Error in depthwiseConv2d: filter must be rank 4, but got rank \" + (filter.rank + \".\"));\n        util.assert(x4D.shape[3] === filter.shape[2], \"Error in depthwiseConv2d: number of input channels \" + (\"(\" + x4D.shape[3] + \") must match the inChannels dimension in \") + (\"filter \" + filter.shape[2] + \".\"));\n        if (dilations == null) {\n            dilations = [1, 1];\n        }\n        util.assert(eitherStridesOrDilationsAreOne(strides, dilations), 'Error in depthwiseConv2d: Either strides or dilations must be 1. ' + (\"Got strides \" + strides + \" and dilations '\" + dilations + \"'\"));\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in depthwiseConv2d: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computeConv2DInfo(x4D.shape, filter.shape, strides, dilations, pad, dimRoundingMode, true);\n        var grad = function (dy) {\n            util.assert(tupleValuesAreOne(dilations), 'Error in gradient of depthwiseConv2d: dilation rates greater than ' + (\"1 are not yet supported. Got dilations '\" + dilations + \"'\"));\n            return {\n                x: function () {\n                    return depthwiseConv2dDerInput(x4D.shape, dy, filter, convInfo);\n                },\n                filter: function () {\n                    return depthwiseConv2dDerFilter(x4D, dy, filter.shape, convInfo);\n                }\n            };\n        };\n        var res = _environment.ENV.engine.runKernel(function (backend) {\n            return backend.depthwiseConv2D(x4D, filter, convInfo);\n        }, { x: x4D, filter: filter }, grad);\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    ConvOps.separableConv2d = function (x, depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat) {\n        if (dilation === void 0) {\n            dilation = [1, 1];\n        }\n        if (dataFormat === void 0) {\n            dataFormat = 'NHWC';\n        }\n        util.assertArgumentsAreTensors({ x: x, depthwiseFilter: depthwiseFilter, pointwiseFilter: pointwiseFilter }, 'separableConv2d');\n        var x4D = x;\n        var reshapedTo4D = false;\n        if (x.rank === 3) {\n            reshapedTo4D = true;\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        if (dataFormat === 'NCHW') {\n            throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' + 'NHWC is supported');\n        }\n        util.assert(x4D.rank === 4, \"Error in separableConv2d: input must be rank 4, but got \" + (\"rank \" + x4D.rank + \".\"));\n        util.assert(depthwiseFilter.rank === 4, \"Error in separableConv2d: depthwise filter must be rank 4, but got \" + (\"rank \" + depthwiseFilter.rank + \".\"));\n        util.assert(pointwiseFilter.rank === 4, \"Error in separableConv2d: pointwise filter must be rank 4, but got \" + (\"rank \" + depthwiseFilter.rank + \".\"));\n        util.assert(pointwiseFilter.shape[0] === 1, \"Error in separableConv2d: the first dimension of pointwise filter \" + (\" must be 1, but got \" + pointwiseFilter.shape[0] + \".\"));\n        util.assert(pointwiseFilter.shape[1] === 1, \"Error in separableConv2d: the second dimension of pointwise filter \" + (\" must be 1, but got \" + pointwiseFilter.shape[1] + \".\"));\n        var inChannels = depthwiseFilter.shape[2];\n        var channelMultiplier = depthwiseFilter.shape[3];\n        util.assert(pointwiseFilter.shape[2] === inChannels * channelMultiplier, \"Error in separableConv2d: the third dimension of pointwise filter \" + (\"must be \" + inChannels * channelMultiplier + \", \") + (\"but got \" + pointwiseFilter.shape[2] + \".\"));\n        var depthwise = ConvOps.depthwiseConv2d(x4D, depthwiseFilter, strides, pad, dataFormat, dilation);\n        var pointwiseStride = 1;\n        var res = ConvOps.conv2d(depthwise, pointwiseFilter, pointwiseStride, 'valid', dataFormat);\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Convolution' }), _operation.operation], ConvOps, \"conv1d\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Convolution' }), _operation.operation], ConvOps, \"conv2d\", null);\n    __decorate([_operation.operation], ConvOps, \"conv2dDerInput\", null);\n    __decorate([_operation.operation], ConvOps, \"conv2dDerFilter\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Convolution' }), _operation.operation], ConvOps, \"conv2dTranspose\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Convolution' }), _operation.operation], ConvOps, \"depthwiseConv2d\", null);\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Convolution' }), _operation.operation], ConvOps, \"separableConv2d\", null);\n    return ConvOps;\n}();\nexports.ConvOps = ConvOps;\n\nfunction parseTupleParam(param) {\n    return typeof param === 'number' ? [param, param] : param;\n}\nfunction tupleValuesAreOne(param) {\n    var _a = parseTupleParam(param),\n        dimA = _a[0],\n        dimB = _a[1];\n    return dimA === 1 && dimB === 1;\n}\nfunction eitherStridesOrDilationsAreOne(strides, dilations) {\n    return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\nfunction depthwiseConv2dDerInput(xShape, dy, filter, convInfo) {\n    var dy4D = dy;\n    var reshapedTo4D = false;\n    if (dy.rank === 3) {\n        reshapedTo4D = true;\n        dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n    }\n    var res = _environment.ENV.engine.runKernel(function (backend) {\n        return backend.depthwiseConv2DDerInput(dy4D, filter, convInfo);\n    }, { dy4D: dy4D });\n    if (reshapedTo4D) {\n        return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n    }\n    return res;\n}\nfunction depthwiseConv2dDerFilter(x, dy, filterShape, convInfo) {\n    var x4D = x;\n    if (x.rank === 3) {\n        x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n    }\n    var dy4D = dy;\n    if (dy4D.rank === 3) {\n        dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n    }\n    return _environment.ENV.engine.runKernel(function (backend) {\n        return backend.depthwiseConv2DDerFilter(x4D, dy4D, convInfo);\n    }, { x4D: x4D, dy4D: dy4D });\n}\n//# sourceMappingURL=conv.js.map"},"hash":"dbe6dc7ba842c54eaf5c1601d7b359d9","cacheData":{"env":{}}}