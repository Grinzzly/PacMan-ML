{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../../ops/erf_util","loc":{"line":1,"column":26}},{"name":"../../ops/selu_util","loc":{"line":2,"column":27}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.TO_INT = exports.LOGICAL_NOT = exports.RECIPROCAL = exports.SQUARE = exports.ERF = exports.ATANH = exports.ACOSH = exports.ASINH = exports.TANH = exports.COSH = exports.SINH = exports.ATAN = exports.ACOS = exports.ASIN = exports.TAN = exports.COS = exports.SIN = exports.SOFTPLUS = exports.SIGMOID = exports.RSQRT = exports.SQRT = exports.LOG1P = exports.LOG = exports.EXPM1 = exports.EXP = exports.ROUND = exports.SIGN = exports.FLOOR = exports.CEIL = exports.NEG = exports.SELU = exports.ELU = exports.RELU = exports.ABS = exports.UnaryOpProgram = undefined;\nexports.STEP = STEP;\n\nvar _erf_util = require('../../ops/erf_util');\n\nvar erf_util = _interopRequireWildcard(_erf_util);\n\nvar _selu_util = require('../../ops/selu_util');\n\nvar selu_util = _interopRequireWildcard(_selu_util);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar UnaryOpProgram = function () {\n    function UnaryOpProgram(aShape, opSnippet) {\n        this.variableNames = ['A'];\n        this.outputShape = aShape;\n        this.userCode = \"\\n      float unaryOperation(float x) {\\n        \" + opSnippet + \"\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        float y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \";\n    }\n    return UnaryOpProgram;\n}();\nexports.UnaryOpProgram = UnaryOpProgram;\n\nvar CHECK_NAN_SNIPPET = \"if (isNaN(x)) return x;\";\nvar ABS = exports.ABS = \"return abs(x);\";\nvar RELU = exports.RELU = CHECK_NAN_SNIPPET + \"\\n  return (x < 0.0) ? 0.0 : x;\\n\";\nvar ELU = exports.ELU = \"return (x >= 0.0) ? x : (exp(x) - 1.0);\";\nvar SELU = exports.SELU = \"\\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\\n  // see: https://arxiv.org/abs/1706.02515\\n  float scaleAlpha = \" + selu_util.SELU_SCALEALPHA + \";\\n  float scale = \" + selu_util.SELU_SCALE + \";\\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\\n\";\nfunction STEP(alpha) {\n    if (alpha === void 0) {\n        alpha = 0.0;\n    }\n    return CHECK_NAN_SNIPPET + (\"\\n    return x > 0.0 ? 1.0 : float(\" + alpha + \");\\n  \");\n}\nvar NEG = exports.NEG = \"return -x;\";\nvar CEIL = exports.CEIL = \"return ceil(x);\";\nvar FLOOR = exports.FLOOR = \"return floor(x);\";\nvar SIGN = exports.SIGN = \"\\n  if (isNaN(x)) { return 0.0; }\\n  return sign(x);\\n\";\nvar ROUND = exports.ROUND = \"\\n  // OpenGL ES does not support round function.\\n  // The algorithm is based on banker's rounding.\\n  float base = floor(x);\\n  if ((x - base) < 0.5) {\\n    return floor(x);\\n  } else if ((x - base) > 0.5) {\\n    return ceil(x);\\n  } else {\\n    if (mod(base, 2.0) == 0.0) {\\n      return base;\\n    } else {\\n      return base + 1.0;\\n    }\\n  }\\n\";\nvar EXP = exports.EXP = \"return exp(x);\";\nvar EXPM1 = exports.EXPM1 = \"return exp(x) - 1.0;\";\nvar LOG = exports.LOG = \"return log(x);\";\nvar LOG1P = exports.LOG1P = \"return log(1.0 + x);\";\nvar SQRT = exports.SQRT = \"return sqrt(x);\";\nvar RSQRT = exports.RSQRT = \"return inversesqrt(x);\";\nvar SIGMOID = exports.SIGMOID = \"return 1.0 / (1.0 + exp(-1.0 * x));\";\nvar SOFTPLUS = exports.SOFTPLUS = \"\\n  float epsilon = 1.1920928955078125e-7;\\n  float threshold = log(epsilon) + 2.0;\\n\\n  bool too_large = x > -threshold;\\n  bool too_small = x < threshold;\\n\\n  float result;\\n  float exp_x = exp(x);\\n\\n  if (too_large){\\n    result = x;\\n  }\\n  else if (too_small){\\n    result = exp_x;\\n  }\\n  else{\\n    result = log(exp_x + 1.0);\\n  }\\n  return result;\\n\";\nvar SIN = exports.SIN = \"return sin(x);\";\nvar COS = exports.COS = \"return cos(x);\";\nvar TAN = exports.TAN = \"return tan(x);\";\nvar ASIN = exports.ASIN = \"return asin(x);\";\nvar ACOS = exports.ACOS = \"return acos(x);\";\nvar ATAN = exports.ATAN = CHECK_NAN_SNIPPET + \"\\n  return atan(x);\\n\";\nvar SINH = exports.SINH = \"\\n  float e2x = exp(x);\\n  return (e2x - 1.0 / e2x) / 2.0;\\n\";\nvar COSH = exports.COSH = \"\\n  float e2x = exp(-x);\\n  return (e2x + 1.0 / e2x) / 2.0;\\n\";\nvar TANH = exports.TANH = \"\\n  float e2x = exp(-2.0 * abs(x));\\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\\n\";\nvar ASINH = exports.ASINH = \"return log(x + sqrt(x * x + 1.0));\";\nvar ACOSH = exports.ACOSH = \"return log(x + sqrt(x * x - 1.0));\";\nvar ATANH = exports.ATANH = \"return (log(1.0 + x) - log(1.0 - x)) / 2.0;\";\nvar ERF = exports.ERF = \"\\n  // Error function is calculated approximately with elementary function.\\n  // See \\\"Handbook of Mathematical Functions with Formulas,\\n  // Graphs, and Mathematical Tables\\\", Abramowitz and Stegun.\\n  float p = \" + erf_util.ERF_P + \";\\n  float a1 = \" + erf_util.ERF_A1 + \";\\n  float a2 = \" + erf_util.ERF_A2 + \";\\n  float a3 = \" + erf_util.ERF_A3 + \";\\n  float a4 = \" + erf_util.ERF_A4 + \";\\n  float a5 = \" + erf_util.ERF_A5 + \";\\n\\n  float t = 1.0 / (1.0 + p * x);\\n  return 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);\\n\";\nvar SQUARE = exports.SQUARE = \"return x * x;\";\nvar RECIPROCAL = exports.RECIPROCAL = \"return 1.0 / x;\";\nvar LOGICAL_NOT = exports.LOGICAL_NOT = \"return float(!(x >= 1.0));\";\nvar TO_INT = exports.TO_INT = \"return float(int(x));\";\n//# sourceMappingURL=unaryop_gpu.js.map"},"hash":"25fc110257c79086707d1ce5a595f3e6","cacheData":{"env":{}}}