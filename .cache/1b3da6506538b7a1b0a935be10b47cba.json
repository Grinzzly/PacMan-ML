{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../errors","loc":{"line":1,"column":27}},{"name":"./generic_utils","loc":{"line":2,"column":29}},{"name":"./math_utils","loc":{"line":3,"column":31}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.normalizeArray = normalizeArray;\nexports.convOutputLength = convOutputLength;\nexports.deconvLength = deconvLength;\n\nvar _errors = require('../errors');\n\nvar _generic_utils = require('./generic_utils');\n\nvar _math_utils = require('./math_utils');\n\nfunction normalizeArray(value, n, name) {\n    if (typeof value === 'number') {\n        return (0, _generic_utils.pyListRepeat)(value, n);\n    } else {\n        if (value.length !== n) {\n            throw new _errors.ValueError(\"The \" + name + \" argument must be a tuple of \" + n + \" integers. Received: \" + (value.length + \" elements.\"));\n        }\n        for (var i = 0; i < n; ++i) {\n            var singleValue = value[i];\n            if (!(0, _math_utils.isInteger)(singleValue)) {\n                throw new _errors.ValueError(\"The \" + name + \" argument must be a tuple of \" + n + \" integers. Received: \" + (JSON.stringify(value) + \" including a non-integer number \") + (\"\" + singleValue));\n            }\n        }\n        return value;\n    }\n}\nfunction convOutputLength(inputLength, filterSize, padding, stride, dilation) {\n    if (dilation === void 0) {\n        dilation = 1;\n    }\n    if (inputLength == null) {\n        return inputLength;\n    }\n    var dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n    var outputLength;\n    if (padding === 'same') {\n        outputLength = inputLength;\n    } else {\n        outputLength = inputLength - dilatedFilterSize + 1;\n    }\n    return Math.floor((outputLength + stride - 1) / stride);\n}\nfunction deconvLength(dimSize, strideSize, kernelSize, padding) {\n    if (dimSize == null) {\n        return null;\n    }\n    if (padding === 'valid') {\n        dimSize = dimSize * strideSize + (0, _math_utils.max)([kernelSize - strideSize, 0]);\n    } else if (padding === 'same') {\n        dimSize = dimSize * strideSize;\n    } else {\n        throw new _errors.ValueError(\"Unsupport padding mode: \" + padding + \".\");\n    }\n    return dimSize;\n}\n//# sourceMappingURL=conv_utils.js.map"},"hash":"bdf0def13df1eb61359202b1a7757253","cacheData":{"env":{}}}