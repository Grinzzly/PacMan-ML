{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../doc","loc":{"line":7,"column":20}},{"name":"../environment","loc":{"line":8,"column":20}},{"name":"../util","loc":{"line":9,"column":22}},{"name":"./axis_util","loc":{"line":10,"column":31}},{"name":"./concat_util","loc":{"line":11,"column":29}},{"name":"./operation","loc":{"line":12,"column":26}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ConcatOps = undefined;\n\nvar _doc = require(\"../doc\");\n\nvar _environment = require(\"../environment\");\n\nvar _util = require(\"../util\");\n\nvar util = _interopRequireWildcard(_util);\n\nvar _axis_util = require(\"./axis_util\");\n\nvar _concat_util = require(\"./concat_util\");\n\nvar concat_util = _interopRequireWildcard(_concat_util);\n\nvar _operation = require(\"./operation\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar ConcatOps = function () {\n    function ConcatOps() {}\n    ConcatOps.concat1d = function (tensors) {\n        return ConcatOps.concat(tensors, 0);\n    };\n    ConcatOps.concat2d = function (tensors, axis) {\n        return ConcatOps.concat(tensors, axis);\n    };\n    ConcatOps.concat3d = function (tensors, axis) {\n        return ConcatOps.concat(tensors, axis);\n    };\n    ConcatOps.concat4d = function (tensors, axis) {\n        return ConcatOps.concat(tensors, axis);\n    };\n    ConcatOps.concat = function (tensors, axis) {\n        if (axis === void 0) {\n            axis = 0;\n        }\n        util.assert(tensors.length >= 1, 'Pass at least one tensor to concat');\n        util.assertArgumentsAreTensors({ tensors: tensors }, 'concat');\n        var result = tensors[0];\n        if (tensors.length === 1) {\n            return result;\n        }\n        var axes = (0, _axis_util.parseAxisParam)(axis, result.shape);\n        for (var i = 1; i < tensors.length; ++i) {\n            result = concat2Tensors(result, tensors[i], axes[0]);\n        }\n        return result;\n    };\n    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Slicing and Joining' }), _operation.operation], ConcatOps, \"concat\", null);\n    return ConcatOps;\n}();\nexports.ConcatOps = ConcatOps;\n\nfunction concat2Tensors(a, b, axis) {\n    concat_util.assertParams(a.shape, b.shape, axis);\n    var outShape = concat_util.computeOutShape(a.shape, b.shape, axis);\n    var a2D = a.as2D(-1, util.sizeFromShape(a.shape.slice(axis)));\n    var b2D = b.as2D(-1, util.sizeFromShape(b.shape.slice(axis)));\n    var _a = concat_util.computeGradientSliceShapes(a2D.shape, b2D.shape),\n        aBegin = _a.aBegin,\n        aSize = _a.aSize,\n        bBegin = _a.bBegin,\n        bSize = _a.bSize;\n    var der = function (dy) {\n        return { a: function () {\n                return dy.slice(aBegin, aSize);\n            }, b: function () {\n                return dy.slice(bBegin, bSize);\n            } };\n    };\n    var res = _environment.ENV.engine.runKernel(function (backend) {\n        return backend.concat(a2D, b2D);\n    }, { a: a2D, b: b2D }, der);\n    return res.reshape(outShape);\n}\n//# sourceMappingURL=concat.js.map"},"hash":"804c996816e221700bd45734d2763fb5","cacheData":{"env":{}}}