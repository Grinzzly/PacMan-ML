{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../environment","loc":{"line":11,"column":20}},{"name":"../globals","loc":{"line":12,"column":27}},{"name":"../ops/ops","loc":{"line":13,"column":34}},{"name":"../serialization","loc":{"line":14,"column":33}},{"name":"./optimizer","loc":{"line":15,"column":26}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.AdamOptimizer = undefined;\n\nvar _environment = require('../environment');\n\nvar _globals = require('../globals');\n\nvar _ops = require('../ops/ops');\n\nvar _serialization = require('../serialization');\n\nvar _optimizer = require('./optimizer');\n\nvar __extends = undefined && undefined.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\nvar AdamOptimizer = function (_super) {\n    __extends(AdamOptimizer, _super);\n    function AdamOptimizer(learningRate, beta1, beta2, epsilon) {\n        if (epsilon === void 0) {\n            epsilon = 1e-8;\n        }\n        var _this = _super.call(this) || this;\n        _this.learningRate = learningRate;\n        _this.beta1 = beta1;\n        _this.beta2 = beta2;\n        _this.epsilon = epsilon;\n        _this.accumulatedFirstMoment = {};\n        _this.accumulatedSecondMoment = {};\n        _this.c = (0, _globals.keep)((0, _ops.scalar)(-learningRate));\n        _this.epsScalar = (0, _globals.keep)((0, _ops.scalar)(epsilon));\n        _this.beta1Scalar = (0, _globals.keep)((0, _ops.scalar)(beta1));\n        _this.beta2Scalar = (0, _globals.keep)((0, _ops.scalar)(beta2));\n        (0, _globals.tidy)(function () {\n            _this.accBeta1 = (0, _ops.scalar)(beta1).variable();\n            _this.accBeta2 = (0, _ops.scalar)(beta2).variable();\n        });\n        _this.oneMinusBeta1 = (0, _globals.keep)((0, _ops.scalar)(1 - beta1));\n        _this.oneMinusBeta2 = (0, _globals.keep)((0, _ops.scalar)(1 - beta2));\n        _this.one = (0, _globals.keep)((0, _ops.scalar)(1));\n        return _this;\n    }\n    AdamOptimizer.prototype.applyGradients = function (variableGradients) {\n        var _this = this;\n        (0, _globals.tidy)(function () {\n            var oneMinusAccBeta1 = _this.one.sub(_this.accBeta1);\n            var oneMinusAccBeta2 = _this.one.sub(_this.accBeta2);\n            for (var variableName in variableGradients) {\n                var value = _environment.ENV.engine.registeredVariables[variableName];\n                if (_this.accumulatedFirstMoment[variableName] == null) {\n                    var trainable = false;\n                    _this.accumulatedFirstMoment[variableName] = (0, _ops.zerosLike)(value).variable(trainable);\n                }\n                if (_this.accumulatedSecondMoment[variableName] == null) {\n                    var trainable = false;\n                    _this.accumulatedSecondMoment[variableName] = (0, _ops.zerosLike)(value).variable(trainable);\n                }\n                var gradient = variableGradients[variableName];\n                var firstMoment = _this.accumulatedFirstMoment[variableName];\n                var secondMoment = _this.accumulatedSecondMoment[variableName];\n                var newFirstMoment = _this.beta1Scalar.mul(firstMoment).add(_this.oneMinusBeta1.mul(gradient));\n                var newSecondMoment = _this.beta2Scalar.mul(secondMoment).add(_this.oneMinusBeta2.mul(gradient.square()));\n                var biasCorrectedFirstMoment = newFirstMoment.div(oneMinusAccBeta1);\n                var biasCorrectedSecondMoment = newSecondMoment.div(oneMinusAccBeta2);\n                _this.accumulatedFirstMoment[variableName].assign(newFirstMoment);\n                _this.accumulatedSecondMoment[variableName].assign(newSecondMoment);\n                var newValue = _this.c.mul(biasCorrectedFirstMoment.div(_this.epsScalar.add(biasCorrectedSecondMoment.sqrt()))).add(value);\n                value.assign(newValue);\n            }\n            _this.accBeta1.assign(_this.accBeta1.mul(_this.beta1Scalar));\n            _this.accBeta2.assign(_this.accBeta2.mul(_this.beta2Scalar));\n        });\n    };\n    AdamOptimizer.prototype.dispose = function () {\n        var _this = this;\n        this.c.dispose();\n        this.epsScalar.dispose();\n        this.beta1Scalar.dispose();\n        this.beta2Scalar.dispose();\n        this.accBeta1.dispose();\n        this.accBeta2.dispose();\n        this.oneMinusBeta1.dispose();\n        this.oneMinusBeta2.dispose();\n        this.one.dispose();\n        if (this.accumulatedFirstMoment != null) {\n            Object.keys(this.accumulatedFirstMoment).forEach(function (name) {\n                return _this.accumulatedFirstMoment[name].dispose();\n            });\n        }\n        if (this.accumulatedSecondMoment != null) {\n            Object.keys(this.accumulatedSecondMoment).forEach(function (name) {\n                return _this.accumulatedSecondMoment[name].dispose();\n            });\n        }\n    };\n    AdamOptimizer.prototype.getConfig = function () {\n        return {\n            learningRate: this.learningRate,\n            beta1: this.beta1,\n            beta2: this.beta2,\n            epsilon: this.epsilon\n        };\n    };\n    AdamOptimizer.fromConfig = function (cls, config) {\n        return new cls(config.learningRate, config.beta1, config.beta2, config.epsilon);\n    };\n    AdamOptimizer.className = 'AdamOptimizer';\n    return AdamOptimizer;\n}(_optimizer.Optimizer);\nexports.AdamOptimizer = AdamOptimizer;\n\n_serialization.SerializationMap.register(AdamOptimizer);\n//# sourceMappingURL=adam_optimizer.js.map"},"hash":"2b747181f64bcd50f284c6296ee47975","cacheData":{"env":{}}}