{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1528724212618},{"name":"@tensorflow/tfjs-core","loc":{"line":2,"column":21}},{"name":"./backend/tfjs_backend","loc":{"line":3,"column":19}},{"name":"./errors","loc":{"line":4,"column":48}},{"name":"./losses","loc":{"line":6,"column":61}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.sparseCategoricalCrossentropy = exports.cosine = exports.categoricalCrossentropy = exports.MAPE = exports.mape = exports.MAE = exports.mae = exports.MSE = exports.mse = undefined;\nexports.binaryAccuracy = binaryAccuracy;\nexports.categoricalAccuracy = categoricalAccuracy;\nexports.binaryCrossentropy = binaryCrossentropy;\nexports.sparseCategoricalAccuracy = sparseCategoricalAccuracy;\nexports.topKCategoricalAccuracy = topKCategoricalAccuracy;\nexports.sparseTopKCategoricalAccuracy = sparseTopKCategoricalAccuracy;\nexports.get = get;\n\nvar _tfjsCore = require('@tensorflow/tfjs-core');\n\nvar tfc = _interopRequireWildcard(_tfjsCore);\n\nvar _tfjs_backend = require('./backend/tfjs_backend');\n\nvar K = _interopRequireWildcard(_tfjs_backend);\n\nvar _errors = require('./errors');\n\nvar _losses = require('./losses');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction binaryAccuracy(yTrue, yPred) {\n    return (0, _tfjsCore.tidy)(function () {\n        var threshold = K.scalarTimesArray(K.getScalar(0.5), tfc.onesLike(yPred));\n        var yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\n        return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\n    });\n}\nfunction categoricalAccuracy(yTrue, yPred) {\n    return (0, _tfjsCore.tidy)(function () {\n        return K.cast(tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32');\n    });\n}\nfunction binaryCrossentropy(yTrue, yPred) {\n    return (0, _losses.binaryCrossentropy)(yTrue, yPred);\n}\nfunction sparseCategoricalAccuracy(yTrue, yPred) {\n    throw new _errors.NotImplementedError();\n}\nfunction topKCategoricalAccuracy(yTrue, yPred) {\n    throw new _errors.NotImplementedError();\n}\nfunction sparseTopKCategoricalAccuracy(yTrue, yPred) {\n    throw new _errors.NotImplementedError();\n}\nvar mse = exports.mse = _losses.meanSquaredError;\nvar MSE = exports.MSE = _losses.meanSquaredError;\nvar mae = exports.mae = _losses.meanAbsoluteError;\nvar MAE = exports.MAE = _losses.meanAbsoluteError;\nvar mape = exports.mape = _losses.meanAbsolutePercentageError;\nvar MAPE = exports.MAPE = _losses.meanAbsolutePercentageError;\nvar categoricalCrossentropy = exports.categoricalCrossentropy = _losses.categoricalCrossentropy;\nvar cosine = exports.cosine = _losses.cosineProximity;\nvar sparseCategoricalCrossentropy = exports.sparseCategoricalCrossentropy = _losses.sparseCategoricalCrossentropy;\nfunction get(identifier) {\n    var metricsMap = {\n        binaryAccuracy: binaryAccuracy,\n        categoricalAccuracy: categoricalAccuracy,\n        categoricalCrossentropy: categoricalCrossentropy,\n        sparseCategoricalCrossentropy: sparseCategoricalCrossentropy,\n        mse: mse,\n        MSE: MSE,\n        mae: mae,\n        MAE: MAE,\n        mape: mape,\n        MAPE: MAPE,\n        cosine: cosine\n    };\n    if (typeof identifier === 'string' && identifier in metricsMap) {\n        return metricsMap[identifier];\n    } else if (typeof identifier !== 'string' && identifier != null) {\n        return identifier;\n    } else {\n        throw new _errors.ValueError(\"Unknown metric \" + identifier);\n    }\n}\n//# sourceMappingURL=metrics.js.map"},"hash":"ceaa609d3bed7b17a2d5107db46c6dbb","cacheData":{"env":{}}}