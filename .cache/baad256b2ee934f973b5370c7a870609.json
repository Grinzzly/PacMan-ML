{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1528724212618},{"name":"./utils/generic_utils","loc":{"line":1,"column":42}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.VALID_POOL_MODE_VALUES = exports.VALID_PADDING_MODE_VALUES = exports.VALID_DATA_FORMAT_VALUES = undefined;\nexports.checkDataFormat = checkDataFormat;\nexports.checkPaddingMode = checkPaddingMode;\nexports.checkPoolMode = checkPoolMode;\nexports.nameScope = nameScope;\nexports.getScopedTensorName = getScopedTensorName;\nexports.getUniqueTensorName = getUniqueTensorName;\nexports.isValidTensorName = isValidTensorName;\n\nvar _generic_utils = require('./utils/generic_utils');\n\nvar nameMap = new Map();\nvar VALID_DATA_FORMAT_VALUES = exports.VALID_DATA_FORMAT_VALUES = ['channelsFirst', 'channelsLast'];\nfunction checkDataFormat(value) {\n    (0, _generic_utils.checkStringTypeUnionValue)(VALID_DATA_FORMAT_VALUES, 'DataFormat', value);\n}\nvar VALID_PADDING_MODE_VALUES = exports.VALID_PADDING_MODE_VALUES = ['valid', 'same', 'causal'];\nfunction checkPaddingMode(value) {\n    (0, _generic_utils.checkStringTypeUnionValue)(VALID_PADDING_MODE_VALUES, 'PaddingMode', value);\n}\nvar VALID_POOL_MODE_VALUES = exports.VALID_POOL_MODE_VALUES = ['max', 'avg'];\nfunction checkPoolMode(value) {\n    (0, _generic_utils.checkStringTypeUnionValue)(VALID_POOL_MODE_VALUES, 'PoolMode', value);\n}\nvar _nameScopeStack = [];\nvar _nameScopeDivider = '/';\nfunction nameScope(name, fn) {\n    _nameScopeStack.push(name);\n    try {\n        var val = fn();\n        _nameScopeStack.pop();\n        return val;\n    } catch (e) {\n        _nameScopeStack.pop();\n        throw e;\n    }\n}\nfunction currentNameScopePrefix() {\n    if (_nameScopeStack.length === 0) {\n        return '';\n    } else {\n        return _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;\n    }\n}\nfunction getScopedTensorName(tensorName) {\n    if (!isValidTensorName(tensorName)) {\n        throw new Error('Not a valid tensor name: \\'' + tensorName + '\\'');\n    }\n    return currentNameScopePrefix() + tensorName;\n}\nfunction getUniqueTensorName(scopedName) {\n    if (!isValidTensorName(scopedName)) {\n        throw new Error('Not a valid tensor name: \\'' + scopedName + '\\'');\n    }\n    if (!nameMap.has(scopedName)) {\n        nameMap.set(scopedName, 0);\n    }\n    var index = nameMap.get(scopedName);\n    nameMap.set(scopedName, nameMap.get(scopedName) + 1);\n    if (index > 0) {\n        var result = scopedName + '_' + index;\n        nameMap.set(result, 1);\n        return result;\n    } else {\n        return scopedName;\n    }\n}\nvar tensorNameRegex = new RegExp(/^[A-Za-z][A-Za-z0-9\\._\\/]*$/);\nfunction isValidTensorName(name) {\n    return name.match(tensorNameRegex) ? true : false;\n}\n//# sourceMappingURL=common.js.map"},"hash":"44021a965390321f303de4e9450b74a2","cacheData":{"env":{}}}