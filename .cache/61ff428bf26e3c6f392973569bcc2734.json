{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-converter/package.json","includedInParent":true,"mtime":1528724212618},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-converter/.babelrc","includedInParent":true,"mtime":1528724212614},{"name":"@tensorflow/tfjs-core","loc":{"line":1,"column":21}},{"name":"./utils","loc":{"line":2,"column":41}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.CATEGORY = exports.executeOp = undefined;\n\nvar _tfjsCore = require('@tensorflow/tfjs-core');\n\nvar tfc = _interopRequireWildcard(_tfjsCore);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar executeOp = exports.executeOp = function (node, tensorMap, context) {\n    switch (node.op) {\n        case 'const':\n            {\n                return tensorMap[node.name];\n            }\n        case 'placeholder':\n            var def = (0, _utils.getParamValue)('default', node, tensorMap, context);\n            return [(0, _utils.getTensor)(node.name, tensorMap, context) || def];\n        case 'identity':\n        case 'stopGradient':\n        case 'fakeQuantWithMinMaxVars':\n            return [(0, _utils.getParamValue)('x', node, tensorMap, context)];\n        case 'snapshot':\n            var snapshot = (0, _utils.getParamValue)('x', node, tensorMap, context);\n            return [snapshot.clone()];\n        case 'shape':\n            return [tfc.tensor1d((0, _utils.getParamValue)('x', node, tensorMap, context).shape, 'int32')];\n        case 'noop':\n            return [];\n        case 'print':\n            var input = (0, _utils.getParamValue)('x', node, tensorMap, context);\n            var data = (0, _utils.getParamValue)('data', node, tensorMap, context);\n            var message = (0, _utils.getParamValue)('message', node, tensorMap, context);\n            var summarize = (0, _utils.getParamValue)('summarize', node, tensorMap, context);\n            console.warn('The graph has a tf.print() operation,' + 'usually used for debugging, which slows down performance.');\n            console.log(message);\n            for (var i = 0; i < data.length; i++) {\n                console.log(Array.prototype.slice.call(data[0].dataSync()).slice(0, summarize));\n            }\n            return [input];\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nvar CATEGORY = exports.CATEGORY = 'graph';\n//# sourceMappingURL=graph_executor.js.map"},"hash":"75c16b764102099d2947de19d946ef05","cacheData":{"env":{}}}