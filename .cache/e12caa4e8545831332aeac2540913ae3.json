{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-converter/package.json","includedInParent":true,"mtime":1528724212618},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-converter/.babelrc","includedInParent":true,"mtime":1528724212614},{"name":"./executors/arithmetic_executor","loc":{"line":1,"column":28}},{"name":"./executors/basic_math_executor","loc":{"line":2,"column":27}},{"name":"./executors/control_executor","loc":{"line":3,"column":25}},{"name":"./executors/convolution_executor","loc":{"line":4,"column":29}},{"name":"./executors/creation_executor","loc":{"line":5,"column":26}},{"name":"./executors/graph_executor","loc":{"line":6,"column":23}},{"name":"./executors/image_executor","loc":{"line":7,"column":23}},{"name":"./executors/logical_executor","loc":{"line":8,"column":25}},{"name":"./executors/matrices_executor","loc":{"line":9,"column":26}},{"name":"./executors/normalization_executor","loc":{"line":10,"column":31}},{"name":"./executors/reduction_executor","loc":{"line":11,"column":27}},{"name":"./executors/slice_join_executor","loc":{"line":12,"column":27}},{"name":"./executors/transformation_executor","loc":{"line":13,"column":32}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.executeOp = executeOp;\n\nvar _arithmetic_executor = require('./executors/arithmetic_executor');\n\nvar arithmetic = _interopRequireWildcard(_arithmetic_executor);\n\nvar _basic_math_executor = require('./executors/basic_math_executor');\n\nvar basicMath = _interopRequireWildcard(_basic_math_executor);\n\nvar _control_executor = require('./executors/control_executor');\n\nvar control = _interopRequireWildcard(_control_executor);\n\nvar _convolution_executor = require('./executors/convolution_executor');\n\nvar convolution = _interopRequireWildcard(_convolution_executor);\n\nvar _creation_executor = require('./executors/creation_executor');\n\nvar creation = _interopRequireWildcard(_creation_executor);\n\nvar _graph_executor = require('./executors/graph_executor');\n\nvar graph = _interopRequireWildcard(_graph_executor);\n\nvar _image_executor = require('./executors/image_executor');\n\nvar image = _interopRequireWildcard(_image_executor);\n\nvar _logical_executor = require('./executors/logical_executor');\n\nvar logical = _interopRequireWildcard(_logical_executor);\n\nvar _matrices_executor = require('./executors/matrices_executor');\n\nvar matrices = _interopRequireWildcard(_matrices_executor);\n\nvar _normalization_executor = require('./executors/normalization_executor');\n\nvar normalization = _interopRequireWildcard(_normalization_executor);\n\nvar _reduction_executor = require('./executors/reduction_executor');\n\nvar reduction = _interopRequireWildcard(_reduction_executor);\n\nvar _slice_join_executor = require('./executors/slice_join_executor');\n\nvar sliceJoin = _interopRequireWildcard(_slice_join_executor);\n\nvar _transformation_executor = require('./executors/transformation_executor');\n\nvar transformation = _interopRequireWildcard(_transformation_executor);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction executeOp(node, tensorMap, context) {\n    switch (node.category) {\n        case 'arithmetic':\n            return arithmetic.executeOp(node, tensorMap, context);\n        case 'basic_math':\n            return basicMath.executeOp(node, tensorMap, context);\n        case 'control':\n            return control.executeOp(node, tensorMap, context);\n        case 'convolution':\n            return convolution.executeOp(node, tensorMap, context);\n        case 'creation':\n            return creation.executeOp(node, tensorMap, context);\n        case 'image':\n            return image.executeOp(node, tensorMap, context);\n        case 'graph':\n            return graph.executeOp(node, tensorMap, context);\n        case 'logical':\n            return logical.executeOp(node, tensorMap, context);\n        case 'matrices':\n            return matrices.executeOp(node, tensorMap, context);\n        case 'normalization':\n            return normalization.executeOp(node, tensorMap, context);\n        case 'reduction':\n            return reduction.executeOp(node, tensorMap, context);\n        case 'slice_join':\n            return sliceJoin.executeOp(node, tensorMap, context);\n        case 'transformation':\n            return transformation.executeOp(node, tensorMap, context);\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n}\n//# sourceMappingURL=operation_executor.js.map"},"hash":"a98f7ad44dfd28807388b88b8e202845","cacheData":{"env":{}}}