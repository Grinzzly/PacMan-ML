{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1528724212618},{"name":"@tensorflow/tfjs-core","loc":{"line":11,"column":36}},{"name":"../backend/tfjs_backend","loc":{"line":12,"column":19}},{"name":"../constraints","loc":{"line":13,"column":51}},{"name":"../engine/topology","loc":{"line":14,"column":22}},{"name":"../errors","loc":{"line":15,"column":48}},{"name":"../initializers","loc":{"line":16,"column":53}},{"name":"../regularizers","loc":{"line":17,"column":53}},{"name":"../utils/generic_utils","loc":{"line":19,"column":35}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Embedding = undefined;\n\nvar _tfjsCore = require('@tensorflow/tfjs-core');\n\nvar _tfjs_backend = require('../backend/tfjs_backend');\n\nvar K = _interopRequireWildcard(_tfjs_backend);\n\nvar _constraints = require('../constraints');\n\nvar _topology = require('../engine/topology');\n\nvar _errors = require('../errors');\n\nvar _initializers = require('../initializers');\n\nvar _regularizers = require('../regularizers');\n\nvar _generic_utils = require('../utils/generic_utils');\n\nvar generic_utils = _interopRequireWildcard(_generic_utils);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar __extends = undefined && undefined.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\nvar Embedding = function (_super) {\n    __extends(Embedding, _super);\n    function Embedding(config) {\n        var _this = _super.call(this, config) || this;\n        _this.embeddings = null;\n        _this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';\n        if (config.batchInputShape == null && config.inputShape == null) {\n            var batchSize = null;\n            if (config.batchSize != null) {\n                batchSize = config.batchSize;\n            }\n            if (config.inputLength == null) {\n                _this.batchInputShape = [batchSize, null];\n            } else {\n                _this.batchInputShape = [batchSize].concat(generic_utils.toList(config.inputLength));\n            }\n        }\n        _this.inputDim = config.inputDim;\n        _this.outputDim = config.outputDim;\n        _this.embeddingsInitializer = (0, _initializers.getInitializer)(config.embeddingsInitializer || _this.DEFAULT_EMBEDDINGS_INITIALIZER);\n        _this.embeddingsRegularizer = (0, _regularizers.getRegularizer)(config.embeddingsRegularizer);\n        _this.activityRegularizer = (0, _regularizers.getRegularizer)(config.activityRegularizer);\n        _this.embeddingsConstraint = (0, _constraints.getConstraint)(config.embeddingsConstraint);\n        _this.maskZero = config.maskZero;\n        _this.inputLength = config.inputLength;\n        return _this;\n    }\n    Embedding.prototype.build = function (inputShape) {\n        this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\n        this.built = true;\n    };\n    Embedding.prototype.computeMask = function (inputs, mask) {\n        throw new _errors.NotImplementedError('computeMask has not been implemented for Embedding yet');\n    };\n    Embedding.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        if (this.inputLength == null) {\n            return inputShape.concat([this.outputDim]);\n        }\n        var inLens = generic_utils.toList(this.inputLength);\n        if (inLens.length !== inputShape.length - 1) {\n            throw new _errors.ValueError(\"\\\"inputLength\\\" is \" + this.inputLength + \", but received \" + (\"input shape has shape \" + inputShape));\n        } else {\n            var i = 0;\n            for (var k = 0; k < inLens.length; ++k) {\n                var s1 = inLens[k];\n                var s2 = inputShape[k + 1];\n                if (s1 != null && s2 != null && s1 !== s2) {\n                    throw new _errors.ValueError(\"\\\"inputLength\\\" is \" + this.inputLength + \", but received \" + (\"input shape has shape \" + inputShape));\n                } else if (s1 == null) {\n                    inLens[i] = s2;\n                }\n                i++;\n            }\n        }\n        return [inputShape[0]].concat(inLens, [this.outputDim]);\n    };\n    Embedding.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return (0, _tfjsCore.tidy)(function () {\n            _this.invokeCallHook(inputs, kwargs);\n            var input = generic_utils.getExactlyOneTensor(inputs);\n            if (K.dtype(input) !== 'int32') {\n                input = K.cast(input, 'int32');\n            }\n            var output = K.gather(_this.embeddings.read(), input.as1D());\n            return output.reshape((0, _generic_utils.getExactlyOneShape)(_this.computeOutputShape(input.shape)));\n        });\n    };\n    Embedding.prototype.getConfig = function () {\n        var config = {\n            inputDim: this.inputDim,\n            outputDim: this.outputDim,\n            embeddingsInitializer: (0, _initializers.serializeInitializer)(this.embeddingsInitializer),\n            embeddingsRegularizer: (0, _regularizers.serializeRegularizer)(this.embeddingsRegularizer),\n            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),\n            embeddingsConstraint: (0, _constraints.serializeConstraint)(this.embeddingsConstraint),\n            maskZero: this.maskZero,\n            inputLength: this.inputLength\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    Embedding.className = 'Embedding';\n    return Embedding;\n}(_topology.Layer);\nexports.Embedding = Embedding;\n\n_tfjsCore.serialization.SerializationMap.register(Embedding);\n//# sourceMappingURL=embeddings.js.map"},"hash":"f0989ca7b616052095f92c9de3f3a2f3","cacheData":{"env":{}}}