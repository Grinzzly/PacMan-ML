{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1528724212618},{"name":"@tensorflow/tfjs-core","loc":{"line":12,"column":42}},{"name":"../backend/tfjs_backend","loc":{"line":13,"column":19}},{"name":"../engine/topology","loc":{"line":14,"column":22}},{"name":"../errors","loc":{"line":15,"column":48}},{"name":"../utils/generic_utils","loc":{"line":16,"column":31}},{"name":"../utils/math_utils","loc":{"line":17,"column":27}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Concatenate = exports.Minimum = exports.Maximum = exports.Average = exports.Multiply = exports.Add = exports.Merge = undefined;\nexports.add = add;\nexports.multiply = multiply;\nexports.average = average;\nexports.maximum = maximum;\nexports.minimum = minimum;\nexports.concatenate = concatenate;\n\nvar _tfjsCore = require('@tensorflow/tfjs-core');\n\nvar tfc = _interopRequireWildcard(_tfjsCore);\n\nvar _tfjs_backend = require('../backend/tfjs_backend');\n\nvar K = _interopRequireWildcard(_tfjs_backend);\n\nvar _topology = require('../engine/topology');\n\nvar _errors = require('../errors');\n\nvar _generic_utils = require('../utils/generic_utils');\n\nvar generic_utils = _interopRequireWildcard(_generic_utils);\n\nvar _math_utils = require('../utils/math_utils');\n\nvar mathUtils = _interopRequireWildcard(_math_utils);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar __extends = undefined && undefined.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\nvar Merge = function (_super) {\n    __extends(Merge, _super);\n    function Merge(config) {\n        var _this = _super.call(this, config || {}) || this;\n        _this.supportsMasking = true;\n        return _this;\n    }\n    Merge.prototype.mergeFunction = function (inputs) {\n        throw new _errors.NotImplementedError();\n    };\n    Merge.prototype.computeElementwiseOpOutputShape = function (shape1, shape2) {\n        if (shape1 == null || shape2 == null) {\n            return null;\n        } else if (shape1.length < shape2.length) {\n            return this.computeElementwiseOpOutputShape(shape2, shape1);\n        } else if (shape2.length === 0) {\n            return shape1;\n        }\n        var outputShape = shape1.slice(0, shape1.length - shape2.length);\n        for (var k = 0; k < shape2.length; ++k) {\n            var i = shape1[shape1.length - shape2.length + k];\n            var j = shape2[k];\n            if (i == null || j == null || i < 0 || j < 0) {\n                outputShape.push(null);\n            } else if (i === 1) {\n                outputShape.push(j);\n            } else if (j === 1) {\n                outputShape.push(i);\n            } else {\n                if (i !== j) {\n                    throw new _errors.ValueError('Operands could not be broadcast together with shapes ' + JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));\n                }\n                outputShape.push(i);\n            }\n        }\n        return outputShape;\n    };\n    Merge.prototype.build = function (inputShape) {\n        if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {\n            inputShape = [generic_utils.getExactlyOneShape(inputShape)];\n        }\n        inputShape = inputShape;\n        if (inputShape.length < 2) {\n            throw new _errors.ValueError('A merge layer should be called on an Array of at least 2 inputs.' + (\" Got \" + inputShape.length + \" input(s).\"));\n        }\n        var batchSizes = [];\n        for (var _i = 0, inputShape_1 = inputShape; _i < inputShape_1.length; _i++) {\n            var shape = inputShape_1[_i];\n            if (shape != null && shape[0] !== null) {\n                batchSizes.push(shape[0]);\n            }\n        }\n        batchSizes = generic_utils.unique(batchSizes);\n        if (batchSizes.length > 1) {\n            throw new _errors.ValueError(\"Can not merge tensors with different batch sizes. \" + (\"Got tensors with shapes: \" + JSON.stringify(inputShape) + \".\"));\n        }\n        var outputShape = inputShape[0] == null ? null : inputShape[0].slice(1);\n        for (var i = 1; i < inputShape.length; ++i) {\n            var shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n        }\n        var allRanks = inputShape.map(function (shape) {\n            return shape.length;\n        });\n        if (inputShape.indexOf(null) === -1 && generic_utils.unique(allRanks).length === 1) {\n            this.reshapeRequired = false;\n        } else {\n            this.reshapeRequired = true;\n        }\n    };\n    Merge.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return (0, _tfjsCore.tidy)(function () {\n            inputs = inputs;\n            if (_this.reshapeRequired) {\n                var reshapedInputs = [];\n                var inputDims = inputs.map(function (input) {\n                    return input.rank;\n                });\n                if (inputDims.indexOf(null) === -1) {\n                    var maxNDim = mathUtils.max(inputDims);\n                    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n                        var x = inputs_1[_i];\n                        var xNDim = x.rank;\n                        for (var k = 0; k < maxNDim - xNDim; ++k) {\n                            x = K.expandDims(x, 1);\n                        }\n                        reshapedInputs.push(x);\n                    }\n                    return _this.mergeFunction(reshapedInputs);\n                } else {\n                    var transposed = false;\n                    for (var _a = 0, inputs_2 = inputs; _a < inputs_2.length; _a++) {\n                        var x = inputs_2[_a];\n                        var xNDim = x.rank;\n                        if (xNDim == null) {\n                            var xShape = K.shape(x);\n                            var batchSize = xShape[0];\n                            var newShape = xShape.slice(1).concat([batchSize]);\n                            var xTransposed = x.reshape([batchSize].concat(mathUtils.arrayProd(xShape.slice(1))));\n                            xTransposed = tfc.transpose(xTransposed, [1, 0]);\n                            xTransposed = xTransposed.reshape(newShape);\n                            reshapedInputs.push(xTransposed);\n                            transposed = true;\n                        } else if (xNDim > 1) {\n                            var dims = mathUtils.range(1, xNDim).concat([0]);\n                            reshapedInputs.push(tfc.transpose(x, dims));\n                            transposed = true;\n                        } else {\n                            reshapedInputs.push(x);\n                        }\n                    }\n                    var y = _this.mergeFunction(reshapedInputs);\n                    var yNDim = y.rank;\n                    if (transposed) {\n                        if (yNDim == null) {\n                            var yShape = K.shape(y);\n                            var yNDim_1 = yShape.length;\n                            var batchSize = yShape[yNDim_1 - 1];\n                            var newShape = [batchSize].concat(yShape.slice(0, yShape.length - 1));\n                            y = tfc.transpose(y.reshape([-1, batchSize]), [1, 0]).reshape(newShape);\n                        } else if (yNDim > 1) {\n                            var dims = [yNDim - 1].concat(mathUtils.range(0, yNDim - 1));\n                            y = tfc.transpose(y, dims);\n                        }\n                    }\n                    return y;\n                }\n            } else {\n                return _this.mergeFunction(inputs);\n            }\n        });\n    };\n    Merge.prototype.computeOutputShape = function (inputShape) {\n        inputShape = inputShape;\n        var outputShape;\n        if (inputShape[0] == null) {\n            outputShape = null;\n        } else {\n            outputShape = inputShape[0].slice(1);\n        }\n        for (var i = 1; i < inputShape.length; ++i) {\n            var shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n        }\n        var batchSizes = [];\n        for (var _i = 0, inputShape_2 = inputShape; _i < inputShape_2.length; _i++) {\n            var shape = inputShape_2[_i];\n            if (shape != null && shape[0] !== null) {\n                batchSizes.push(shape[0]);\n            }\n        }\n        batchSizes = generic_utils.unique(batchSizes);\n        if (batchSizes.length === 1) {\n            outputShape = batchSizes.concat(outputShape);\n        } else {\n            outputShape = [null].concat(outputShape);\n        }\n        return outputShape;\n    };\n    return Merge;\n}(_topology.Layer);\nexports.Merge = Merge;\n\nvar Add = function (_super) {\n    __extends(Add, _super);\n    function Add(config) {\n        return _super.call(this, config) || this;\n    }\n    Add.prototype.mergeFunction = function (inputs) {\n        return (0, _tfjsCore.tidy)(function () {\n            var output = tfc.zeros(inputs[0].shape);\n            for (var _i = 0, inputs_3 = inputs; _i < inputs_3.length; _i++) {\n                var input = inputs_3[_i];\n                output = tfc.add(output, input);\n            }\n            return output;\n        });\n    };\n    Add.className = 'Add';\n    return Add;\n}(Merge);\nexports.Add = Add;\n\n_tfjsCore.serialization.SerializationMap.register(Add);\nfunction add(config) {\n    if (Array.isArray(config)) {\n        var layer = new Add({});\n        return layer.apply(config);\n    } else {\n        return new Add(config);\n    }\n}\nvar Multiply = function (_super) {\n    __extends(Multiply, _super);\n    function Multiply(config) {\n        return _super.call(this, config) || this;\n    }\n    Multiply.prototype.mergeFunction = function (inputs) {\n        return (0, _tfjsCore.tidy)(function () {\n            var output = tfc.ones(inputs[0].shape);\n            for (var _i = 0, inputs_4 = inputs; _i < inputs_4.length; _i++) {\n                var input = inputs_4[_i];\n                output = tfc.mul(output, input);\n            }\n            return output;\n        });\n    };\n    Multiply.className = 'Multiply';\n    return Multiply;\n}(Merge);\nexports.Multiply = Multiply;\n\n_tfjsCore.serialization.SerializationMap.register(Multiply);\nfunction multiply(config) {\n    if (Array.isArray(config)) {\n        var layer = new Multiply({});\n        return layer.apply(config);\n    } else {\n        return new Multiply(config);\n    }\n}\nvar Average = function (_super) {\n    __extends(Average, _super);\n    function Average(config) {\n        return _super.call(this, config) || this;\n    }\n    Average.prototype.mergeFunction = function (inputs) {\n        return (0, _tfjsCore.tidy)(function () {\n            var output = tfc.zeros(inputs[0].shape);\n            for (var _i = 0, inputs_5 = inputs; _i < inputs_5.length; _i++) {\n                var input = inputs_5[_i];\n                output = tfc.add(output, input);\n            }\n            return K.scalarTimesArray(K.getScalar(1 / inputs.length), output);\n        });\n    };\n    Average.className = 'Average';\n    return Average;\n}(Merge);\nexports.Average = Average;\n\n_tfjsCore.serialization.SerializationMap.register(Average);\nfunction average(config) {\n    if (Array.isArray(config)) {\n        var layer = new Average({});\n        return layer.apply(config);\n    } else {\n        return new Average(config);\n    }\n}\nvar Maximum = function (_super) {\n    __extends(Maximum, _super);\n    function Maximum(config) {\n        return _super.call(this, config) || this;\n    }\n    Maximum.prototype.mergeFunction = function (inputs) {\n        return (0, _tfjsCore.tidy)(function () {\n            var output = inputs[0];\n            for (var i = 1; i < inputs.length; ++i) {\n                output = tfc.maximum(output, inputs[i]);\n            }\n            return output;\n        });\n    };\n    Maximum.className = 'Maximum';\n    return Maximum;\n}(Merge);\nexports.Maximum = Maximum;\n\n_tfjsCore.serialization.SerializationMap.register(Maximum);\nfunction maximum(config) {\n    if (Array.isArray(config)) {\n        var layer = new Maximum({});\n        return layer.apply(config);\n    } else {\n        return new Maximum(config);\n    }\n}\nvar Minimum = function (_super) {\n    __extends(Minimum, _super);\n    function Minimum(config) {\n        return _super.call(this, config) || this;\n    }\n    Minimum.prototype.mergeFunction = function (inputs) {\n        return (0, _tfjsCore.tidy)(function () {\n            var output = inputs[0];\n            for (var i = 1; i < inputs.length; ++i) {\n                output = tfc.minimum(output, inputs[i]);\n            }\n            return output;\n        });\n    };\n    Minimum.className = 'Minimum';\n    return Minimum;\n}(Merge);\nexports.Minimum = Minimum;\n\n_tfjsCore.serialization.SerializationMap.register(Minimum);\nfunction minimum(config) {\n    if (Array.isArray(config)) {\n        var layer = new Minimum({});\n        return layer.apply(config);\n    } else {\n        return new Minimum(config);\n    }\n}\nvar Concatenate = function (_super) {\n    __extends(Concatenate, _super);\n    function Concatenate(config) {\n        var _this = _super.call(this, config) || this;\n        _this.DEFAULT_AXIS = -1;\n        if (config == null) {\n            config = {};\n        }\n        _this.axis = config.axis == null ? _this.DEFAULT_AXIS : config.axis;\n        _this.supportsMasking = true;\n        _this.reshapeRequired = false;\n        return _this;\n    }\n    Concatenate.prototype.build = function (inputShape) {\n        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) || inputShape.length === 1) {\n            throw new _errors.ValueError('A `Concatenate` layer should be called on a list of at least 2 ' + 'inputs');\n        }\n        inputShape = inputShape;\n        var allNoneShape = true;\n        for (var _i = 0, inputShape_3 = inputShape; _i < inputShape_3.length; _i++) {\n            var shape = inputShape_3[_i];\n            if (shape != null) {\n                allNoneShape = false;\n                break;\n            }\n        }\n        if (allNoneShape) {\n            return;\n        }\n        var shapeSet = [];\n        for (var i = 0; i < inputShape.length; ++i) {\n            var shapeWithoutConcatAxis = inputShape[i].slice();\n            shapeWithoutConcatAxis.splice(this.axis, 1);\n            var exists = false;\n            for (var _a = 0, shapeSet_1 = shapeSet; _a < shapeSet_1.length; _a++) {\n                var shape = shapeSet_1[_a];\n                if (_tfjsCore.util.arraysEqual(shape, shapeWithoutConcatAxis)) {\n                    exists = true;\n                    break;\n                }\n            }\n            if (!exists) {\n                shapeSet.push(shapeWithoutConcatAxis);\n            }\n        }\n        if (shapeSet.length > 1) {\n            throw new _errors.ValueError('A `Concatenate` layer requires inputs with matching shapes ' + 'except for the concat axis. Got input shapes: ' + JSON.stringify(inputShape));\n        }\n    };\n    Concatenate.prototype.mergeFunction = function (inputs) {\n        var _this = this;\n        return (0, _tfjsCore.tidy)(function () {\n            return K.concatenate(inputs, _this.axis);\n        });\n    };\n    Concatenate.prototype.computeOutputShape = function (inputShape) {\n        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {\n            throw new _errors.ValueError('A `Concatenate` layer should be called on a list of inputs.');\n        }\n        var inputShapes = inputShape;\n        var outputShape = inputShapes[0].slice();\n        var axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;\n        for (var _i = 0, _a = inputShapes.slice(1); _i < _a.length; _i++) {\n            var shape = _a[_i];\n            if (outputShape[axis] == null || shape[axis] == null) {\n                outputShape[axis] = null;\n                break;\n            }\n            outputShape[axis] += shape[axis];\n        }\n        return outputShape;\n    };\n    Concatenate.prototype.getConfig = function () {\n        var config = {\n            'axis': this.axis\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    Concatenate.className = 'Concatenate';\n    return Concatenate;\n}(Merge);\nexports.Concatenate = Concatenate;\n\n_tfjsCore.serialization.SerializationMap.register(Concatenate);\nfunction concatenate(config) {\n    if (Array.isArray(config)) {\n        var layer = new Concatenate({});\n        return layer.apply(config);\n    } else {\n        return new Concatenate(config);\n    }\n}\n//# sourceMappingURL=merge.js.map"},"hash":"319af7a6c16ce83a96af15421b657bf6","cacheData":{"env":{}}}