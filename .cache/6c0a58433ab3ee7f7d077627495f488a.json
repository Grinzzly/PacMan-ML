{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../errors","loc":{"line":9,"column":43}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.pyListRepeat = pyListRepeat;\nexports.assert = assert;\nexports.count = count;\nexports.singletonOrArray = singletonOrArray;\nexports.toList = toList;\nexports.objectListUid = objectListUid;\nexports.isArrayOfShapes = isArrayOfShapes;\nexports.normalizeShapeList = normalizeShapeList;\nexports.toSnakeCase = toSnakeCase;\nexports.toCamelCase = toCamelCase;\nexports.serializeKerasObject = serializeKerasObject;\nexports.deserializeKerasObject = deserializeKerasObject;\nexports.getExactlyOneTensor = getExactlyOneTensor;\nexports.getExactlyOneShape = getExactlyOneShape;\nexports.numberCompare = numberCompare;\nexports.reverseNumberCompare = reverseNumberCompare;\nexports.stringToDType = stringToDType;\nexports.stringsEqual = stringsEqual;\nexports.unique = unique;\nexports.isObjectEmpty = isObjectEmpty;\nexports.checkStringTypeUnionValue = checkStringTypeUnionValue;\n\nvar _errors = require('../errors');\n\nvar __assign = undefined && undefined.__assign || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n};\nfunction pyListRepeat(value, numValues) {\n    if (Array.isArray(value)) {\n        var newArray = [];\n        for (var i = 0; i < numValues; i++) {\n            newArray = newArray.concat(value);\n        }\n        return newArray;\n    } else {\n        var newArray = new Array(numValues);\n        newArray.fill(value);\n        return newArray;\n    }\n}\nfunction assert(val, message) {\n    if (!val) {\n        throw new _errors.AssertionError(message);\n    }\n}\nfunction count(array, refernce) {\n    var counter = 0;\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n        var item = array_1[_i];\n        if (item === refernce) {\n            counter++;\n        }\n    }\n    return counter;\n}\nfunction singletonOrArray(xs) {\n    if (xs.length === 1) {\n        return xs[0];\n    }\n    return xs;\n}\nfunction toList(x) {\n    if (Array.isArray(x)) {\n        return x;\n    }\n    return [x];\n}\nfunction objectListUid(objs) {\n    var objectList = toList(objs);\n    var retVal = '';\n    for (var _i = 0, objectList_1 = objectList; _i < objectList_1.length; _i++) {\n        var obj = objectList_1[_i];\n        if (obj.id == null) {\n            throw new _errors.ValueError(\"Object \" + obj + \" passed to objectListUid without an id\");\n        }\n        if (retVal !== '') {\n            retVal = retVal + ', ';\n        }\n        retVal = retVal + Math.abs(obj.id);\n    }\n    return retVal;\n}\nfunction isArrayOfShapes(x) {\n    return Array.isArray(x) && Array.isArray(x[0]);\n}\nfunction normalizeShapeList(x) {\n    if (x.length === 0) {\n        return [];\n    }\n    if (!Array.isArray(x[0])) {\n        return [x];\n    }\n    return x;\n}\nfunction toSnakeCase(name) {\n    var intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n    var insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n    if (insecure[0] !== '_') {\n        return insecure;\n    }\n    return 'private' + insecure;\n}\nfunction toCamelCase(identifier) {\n    if (identifier.length <= 1) {\n        return identifier;\n    }\n    if (identifier.indexOf('_') === -1) {\n        return identifier;\n    }\n    return identifier.replace(/[_]+(\\w|$)/g, function (m, p1) {\n        return p1.toUpperCase();\n    });\n}\nvar _GLOBAL_CUSTOM_OBJECTS = {};\nfunction serializeKerasObject(instance) {\n    if (instance === null || instance === undefined) {\n        return null;\n    }\n    return { className: instance.getClassName(), config: instance.getConfig() };\n}\nfunction deserializeKerasObject(identifier, moduleObjects, customObjects, printableModuleName) {\n    if (moduleObjects === void 0) {\n        moduleObjects = {};\n    }\n    if (customObjects === void 0) {\n        customObjects = {};\n    }\n    if (printableModuleName === void 0) {\n        printableModuleName = 'object';\n    }\n    if (typeof identifier === 'string') {\n        var functionName = identifier;\n        var fn = void 0;\n        if (functionName in customObjects) {\n            fn = customObjects[functionName];\n        } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n            fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n        } else {\n            fn = moduleObjects[functionName];\n            if (fn == null) {\n                throw new _errors.ValueError(\"Unknown \" + printableModuleName + \": \" + identifier);\n            }\n        }\n        return fn;\n    } else {\n        var config = identifier;\n        if (config.className == null || config.config == null) {\n            throw new _errors.ValueError(printableModuleName + \": Improper config format: \" + (JSON.stringify(config) + \".\\n\") + \"'className' and 'config' must set.\");\n        }\n        var className = config.className;\n        var cls = void 0,\n            fromConfig = void 0;\n        if (className in customObjects) {\n            _a = customObjects.get(className), cls = _a[0], fromConfig = _a[1];\n        } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n            _b = _GLOBAL_CUSTOM_OBJECTS.className, cls = _b[0], fromConfig = _b[1];\n        } else if (className in moduleObjects) {\n            _c = moduleObjects[className], cls = _c[0], fromConfig = _c[1];\n        }\n        if (cls == null) {\n            throw new _errors.ValueError(\"Unknown \" + printableModuleName + \": \" + className);\n        }\n        if (fromConfig != null) {\n            var customObjectsCombined = {};\n            for (var _i = 0, _d = Object.keys(_GLOBAL_CUSTOM_OBJECTS); _i < _d.length; _i++) {\n                var key = _d[_i];\n                customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n            }\n            for (var _e = 0, _f = Object.keys(customObjects); _e < _f.length; _e++) {\n                var key = _f[_e];\n                customObjectsCombined[key] = customObjects[key];\n            }\n            var nestedConfig = config.config;\n            nestedConfig.customObjects = customObjectsCombined;\n            var backupCustomObjects = __assign({}, _GLOBAL_CUSTOM_OBJECTS);\n            for (var _g = 0, _h = Object.keys(customObjects); _g < _h.length; _g++) {\n                var key = _h[_g];\n                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n            }\n            var returnObj = fromConfig(cls, config.config);\n            _GLOBAL_CUSTOM_OBJECTS = __assign({}, backupCustomObjects);\n            return returnObj;\n        } else {\n            var backupCustomObjects = __assign({}, _GLOBAL_CUSTOM_OBJECTS);\n            for (var _j = 0, _k = Object.keys(customObjects); _j < _k.length; _j++) {\n                var key = _k[_j];\n                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n            }\n            var returnObj = new cls(config.config);\n            _GLOBAL_CUSTOM_OBJECTS = __assign({}, backupCustomObjects);\n            return returnObj;\n        }\n    }\n    var _a, _b, _c;\n}\nfunction getExactlyOneTensor(xs) {\n    var x;\n    if (Array.isArray(xs)) {\n        if (xs.length !== 1) {\n            throw new _errors.ValueError(\"Expected Tensor length to be 1; got \" + xs.length);\n        }\n        x = xs[0];\n    } else {\n        x = xs;\n    }\n    return x;\n}\nfunction getExactlyOneShape(shapes) {\n    if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n        if (shapes.length === 1) {\n            shapes = shapes;\n            return shapes[0];\n        } else {\n            throw new _errors.ValueError(\"Expected exactly 1 Shape; got \" + shapes.length);\n        }\n    } else {\n        return shapes;\n    }\n}\nfunction numberCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\nfunction reverseNumberCompare(a, b) {\n    return -1 * numberCompare(a, b);\n}\nfunction stringToDType(dtype) {\n    switch (dtype) {\n        case 'float32':\n            return 'float32';\n        default:\n            throw new _errors.ValueError(\"Invalid dtype: \" + dtype);\n    }\n}\nfunction stringsEqual(xs, ys) {\n    if (xs == null || ys == null) {\n        return xs === ys;\n    }\n    if (xs.length !== ys.length) {\n        return false;\n    }\n    for (var i = 0; i < xs.length; ++i) {\n        if (xs[i] !== ys[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unique(xs) {\n    if (xs == null) {\n        return xs;\n    }\n    var out = [];\n    for (var _i = 0, xs_1 = xs; _i < xs_1.length; _i++) {\n        var x = xs_1[_i];\n        if (out.indexOf(x) === -1) {\n            out.push(x);\n        }\n    }\n    return out;\n}\nfunction isObjectEmpty(obj) {\n    if (obj == null) {\n        throw new _errors.ValueError(\"Invalid value in obj: \" + JSON.stringify(obj));\n    }\n    for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction checkStringTypeUnionValue(values, label, value) {\n    if (value == null) {\n        return;\n    }\n    if (values.indexOf(value) < 0) {\n        throw new _errors.ValueError(value + \" is not a valid \" + label + \".  Valid values are \" + values + \" or null/undefined.\");\n    }\n}\n//# sourceMappingURL=generic_utils.js.map"},"hash":"9f4f4ffe228a6ad8a995de4a3225cb33","cacheData":{"env":{}}}