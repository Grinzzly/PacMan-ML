{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../doc","loc":{"line":7,"column":20}},{"name":"../util","loc":{"line":8,"column":22}},{"name":"./axis_util","loc":{"line":9,"column":27}},{"name":"./operation","loc":{"line":10,"column":26}},{"name":"./ops","loc":{"line":11,"column":21}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.NormOps = undefined;\n\nvar _doc = require(\"../doc\");\n\nvar _util = require(\"../util\");\n\nvar util = _interopRequireWildcard(_util);\n\nvar _axis_util = require(\"./axis_util\");\n\nvar axis_util = _interopRequireWildcard(_axis_util);\n\nvar _operation = require(\"./operation\");\n\nvar _ops = require(\"./ops\");\n\nvar ops = _interopRequireWildcard(_ops);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar NormOps = function () {\n    function NormOps() {}\n    NormOps.norm = function (x, ord, axis, keepDims) {\n        if (ord === void 0) {\n            ord = 'euclidean';\n        }\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        util.assertArgumentsAreTensors({ x: x }, 'norm');\n        var norm = normImpl(x, ord, axis);\n        var keepDimsShape = norm.shape;\n        if (keepDims) {\n            var axes = axis_util.parseAxisParam(axis, x.shape);\n            keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n        }\n        return norm.reshape(keepDimsShape);\n    };\n    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Matrices' }), _operation.operation], NormOps, \"norm\", null);\n    return NormOps;\n}();\nexports.NormOps = NormOps;\n\nfunction normImpl(x, p, axis) {\n    if (axis === void 0) {\n        axis = null;\n    }\n    if (x.rank === 0) {\n        return x.abs();\n    }\n    if (x.rank !== 1 && axis === null) {\n        return normImpl(x.reshape([-1]), p, axis);\n    }\n    if (x.rank === 1 || typeof axis === 'number' || axis instanceof Array && axis.length === 1) {\n        if (p === 1) {\n            return x.abs().sum(axis);\n        }\n        if (p === Infinity) {\n            return x.abs().max(axis);\n        }\n        if (p === -Infinity) {\n            return x.abs().min(axis);\n        }\n        if (p === 'euclidean' || p === 2) {\n            return x.abs().pow(ops.scalar(2, 'int32')).sum(axis).sqrt();\n        }\n        throw new Error(\"Error in norm: invalid ord value: \" + p);\n    }\n    if (axis instanceof Array && axis.length === 2) {\n        if (p === 1) {\n            return x.abs().sum(axis[0]).max(axis[1] - 1);\n        }\n        if (p === Infinity) {\n            return x.abs().sum(axis[1]).max(axis[0]);\n        }\n        if (p === -Infinity) {\n            return x.abs().sum(axis[1]).min(axis[0]);\n        }\n        if (p === 'fro' || p === 'euclidean') {\n            return x.square().sum(axis).sqrt();\n        }\n        throw new Error(\"Error in norm: invalid ord value: \" + p);\n    }\n    throw new Error(\"Error in norm: invalid axis: \" + axis);\n}\n//# sourceMappingURL=norm.js.map"},"hash":"1f3cfef261ef4896ffd73136303ba6b5","cacheData":{"env":{}}}