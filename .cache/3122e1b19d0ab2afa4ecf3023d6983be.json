{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-converter/package.json","includedInParent":true,"mtime":1528724212618},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-converter/.babelrc","includedInParent":true,"mtime":1528724212614}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getParamValue = getParamValue;\nexports.getTensor = getTensor;\nexports.getNodeNameAndIndex = getNodeNameAndIndex;\nexports.parseNodeName = parseNodeName;\nexports.split = split;\nfunction getParamValue(paramName, node, tensorMap, context) {\n    var param = node.params[paramName];\n    if (param && param.inputIndex !== undefined) {\n        if (param.type === 'tensor') {\n            return getTensor(node.inputNames[param.inputIndex], tensorMap, context);\n        }\n        if (param.type === 'tensors') {\n            var inputs = param.inputIndex === 0 ? param.inputParamLength === 0 ? node.inputNames : node.inputNames.slice(param.inputIndex, -param.inputParamLength) : node.inputNames.splice(param.inputIndex);\n            return inputs.map(function (name) {\n                return getTensor(name, tensorMap, context);\n            });\n        }\n        var data = Array.prototype.slice.call(getTensor(node.inputNames.slice(param.inputIndex)[0], tensorMap, context).dataSync());\n        return param.type === 'number' ? data[0] : data;\n    }\n    return param && param.value;\n}\nfunction getTensor(name, tensorsMap, context) {\n    var _a = parseNodeName(name),\n        nodeName = _a[0],\n        index = _a[1];\n    var contextId = context.currentContextIds.find(function (contextId) {\n        return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n    });\n    return contextId !== undefined ? tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] : undefined;\n}\nfunction getNodeNameAndIndex(inputName, context) {\n    var _a = parseNodeName(inputName),\n        nodeName = _a[0],\n        index = _a[1];\n    return [getNodeNameWithContextId(nodeName, context && context.currentContextId), index];\n}\nfunction getNodeNameWithContextId(name, contextId) {\n    return !!contextId ? name + \"-\" + contextId : name;\n}\nfunction parseNodeName(name) {\n    var index = name.lastIndexOf(':');\n    if (index === -1) return [name, 0];\n    var nodeName = name.substring(0, index);\n    return [nodeName, Number(name.substring(index + 1))];\n}\nfunction split(arr, size) {\n    var res = [];\n    for (var i = 0; i < arr.length; i += size) {\n        res.push(arr.slice(i, i + size));\n    }\n    return res;\n}\n//# sourceMappingURL=utils.js.map"},"hash":"0f671568d4fcc8f2f807fc9cb1d9e3ff","cacheData":{"env":{}}}