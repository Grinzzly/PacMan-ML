{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-converter/package.json","includedInParent":true,"mtime":1528724212618},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-converter/.babelrc","includedInParent":true,"mtime":1528724212614},{"name":"./utils","loc":{"line":36,"column":41}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.CATEGORY = undefined;\nexports.executeOp = executeOp;\n\nvar _utils = require(\"./utils\");\n\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = undefined && undefined.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nfunction executeOp(node, tensorMap, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var _a, pred, data_1, inputName, frameId, data, tensor, input;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _a = node.op;\n                    switch (_a) {\n                        case 'loopCond':\n                            return [3, 1];\n                        case 'switch':\n                            return [3, 2];\n                        case 'merge':\n                            return [3, 4];\n                        case 'enter':\n                            return [3, 5];\n                        case 'exit':\n                            return [3, 6];\n                        case 'nextIteration':\n                            return [3, 7];\n                    }\n                    return [3, 8];\n                case 1:\n                    return [2, [(0, _utils.getParamValue)('pred', node, tensorMap, context)]];\n                case 2:\n                    pred = (0, _utils.getParamValue)('pred', node, tensorMap, context);\n                    data_1 = (0, _utils.getParamValue)('data', node, tensorMap, context);\n                    return [4, pred.data()];\n                case 3:\n                    return [2, _b.sent()[0] ? [undefined, data_1] : [data_1, undefined]];\n                case 4:\n                    inputName = node.inputNames.find(function (name) {\n                        return (0, _utils.getTensor)(name, tensorMap, context) !== undefined;\n                    });\n                    return [2, inputName ? [(0, _utils.getTensor)(inputName, tensorMap, context)] : undefined];\n                case 5:\n                    frameId = (0, _utils.getParamValue)('frameName', node, tensorMap, context);\n                    data = (0, _utils.getParamValue)('tensor', node, tensorMap, context);\n                    context.enterFrame(frameId);\n                    return [2, [data]];\n                case 6:\n                    tensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);\n                    context.exitFrame();\n                    return [2, [tensor]];\n                case 7:\n                    input = (0, _utils.getParamValue)('tensor', node, tensorMap, context);\n                    context.nextIteration();\n                    return [2, [input]];\n                case 8:\n                    throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n            }\n        });\n    });\n}\nvar CATEGORY = exports.CATEGORY = 'control';\n//# sourceMappingURL=control_executor.js.map"},"hash":"50e193c3fb52ca628838624a0ea26ae5","cacheData":{"env":{}}}