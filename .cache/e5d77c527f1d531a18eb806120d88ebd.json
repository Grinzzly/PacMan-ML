{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../../util","loc":{"line":2,"column":22}},{"name":"../../environment","loc":{"line":3,"column":20}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createWebGLRenderingContext = createWebGLRenderingContext;\nexports.createWebGLRenderingContextFromCanvas = createWebGLRenderingContextFromCanvas;\nexports.callAndCheck = callAndCheck;\nexports.enableDebugWebGLErrorChecking = enableDebugWebGLErrorChecking;\nexports.checkWebGLError = checkWebGLError;\nexports.getWebGLErrorMessage = getWebGLErrorMessage;\nexports.getExtensionOrThrow = getExtensionOrThrow;\nexports.createVertexShader = createVertexShader;\nexports.createFragmentShader = createFragmentShader;\nexports.createProgram = createProgram;\nexports.linkProgram = linkProgram;\nexports.validateProgram = validateProgram;\nexports.createStaticVertexBuffer = createStaticVertexBuffer;\nexports.createStaticIndexBuffer = createStaticIndexBuffer;\nexports.queryMaxTextureSize = queryMaxTextureSize;\nexports.getChannelsPerTexture = getChannelsPerTexture;\nexports.createTexture = createTexture;\nexports.validateTextureSize = validateTextureSize;\nexports.createFramebuffer = createFramebuffer;\nexports.bindVertexBufferToProgramAttribute = bindVertexBufferToProgramAttribute;\nexports.bindTextureUnit = bindTextureUnit;\nexports.unbindTextureUnit = unbindTextureUnit;\nexports.getProgramUniformLocationOrThrow = getProgramUniformLocationOrThrow;\nexports.getProgramUniformLocation = getProgramUniformLocation;\nexports.bindTextureToProgramUniformSampler = bindTextureToProgramUniformSampler;\nexports.bindCanvasToFramebuffer = bindCanvasToFramebuffer;\nexports.bindColorTextureToFramebuffer = bindColorTextureToFramebuffer;\nexports.unbindColorTextureFromFramebuffer = unbindColorTextureFromFramebuffer;\nexports.validateFramebuffer = validateFramebuffer;\nexports.getFramebufferErrorMessage = getFramebufferErrorMessage;\nexports.getTextureShapeFromLogicalShape = getTextureShapeFromLogicalShape;\n\nvar _util = require('../../util');\n\nvar util = _interopRequireWildcard(_util);\n\nvar _environment = require('../../environment');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar MAX_TEXTURE_SIZE = null;\nfunction createWebGLRenderingContext(attributes) {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    return createWebGLRenderingContextFromCanvas(canvas, attributes);\n}\nfunction createWebGLRenderingContextFromCanvas(canvas, attributes) {\n    var gl;\n    var webglVersion = _environment.ENV.get('WEBGL_VERSION');\n    if (webglVersion === 2) {\n        gl = canvas.getContext('webgl2', attributes);\n    } else if (webglVersion === 1) {\n        gl = canvas.getContext('webgl', attributes) || canvas.getContext('experimental-webgl', attributes);\n    }\n    if (webglVersion === 0 || gl == null) {\n        throw new Error('This browser does not support WebGL.');\n    }\n    return gl;\n}\nfunction callAndCheck(gl, func) {\n    var returnValue = func();\n    checkWebGLError(gl);\n    return returnValue;\n}\nvar webGLDebugErrorCheckingEnabled = false;\nfunction enableDebugWebGLErrorChecking(enabled) {\n    webGLDebugErrorCheckingEnabled = enabled;\n}\nfunction checkWebGLError(gl) {\n    if (webGLDebugErrorCheckingEnabled) {\n        var error = gl.getError();\n        if (error !== gl.NO_ERROR) {\n            throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n        }\n    }\n}\nfunction getWebGLErrorMessage(gl, status) {\n    switch (status) {\n        case gl.NO_ERROR:\n            return 'NO_ERROR';\n        case gl.INVALID_ENUM:\n            return 'INVALID_ENUM';\n        case gl.INVALID_VALUE:\n            return 'INVALID_VALUE';\n        case gl.INVALID_OPERATION:\n            return 'INVALID_OPERATION';\n        case gl.INVALID_FRAMEBUFFER_OPERATION:\n            return 'INVALID_FRAMEBUFFER_OPERATION';\n        case gl.OUT_OF_MEMORY:\n            return 'OUT_OF_MEMORY';\n        case gl.CONTEXT_LOST_WEBGL:\n            return 'CONTEXT_LOST_WEBGL';\n        default:\n            return \"Unknown error code \" + status;\n    }\n}\nfunction getExtensionOrThrow(gl, extensionName) {\n    return throwIfNull(gl, function () {\n        return gl.getExtension(extensionName);\n    }, 'Extension \"' + extensionName + '\" not supported on this browser.');\n}\nfunction createVertexShader(gl, vertexShaderSource) {\n    var vertexShader = throwIfNull(gl, function () {\n        return gl.createShader(gl.VERTEX_SHADER);\n    }, 'Unable to create vertex WebGLShader.');\n    callAndCheck(gl, function () {\n        return gl.shaderSource(vertexShader, vertexShaderSource);\n    });\n    callAndCheck(gl, function () {\n        return gl.compileShader(vertexShader);\n    });\n    if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n        console.log(gl.getShaderInfoLog(vertexShader));\n        throw new Error('Failed to compile vertex shader.');\n    }\n    return vertexShader;\n}\nfunction createFragmentShader(gl, fragmentShaderSource) {\n    var fragmentShader = throwIfNull(gl, function () {\n        return gl.createShader(gl.FRAGMENT_SHADER);\n    }, 'Unable to create fragment WebGLShader.');\n    callAndCheck(gl, function () {\n        return gl.shaderSource(fragmentShader, fragmentShaderSource);\n    });\n    callAndCheck(gl, function () {\n        return gl.compileShader(fragmentShader);\n    });\n    if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n        logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n    }\n    return fragmentShader;\n}\nvar lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {\n    var lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n    if (lineNumberRegexResult == null) {\n        console.log(\"Couldn't parse line number in error: \" + shaderInfoLog);\n        console.log(shaderSource);\n        return;\n    }\n    var lineNumber = +lineNumberRegexResult[1];\n    var shaderLines = shaderSource.split('\\n');\n    var pad = shaderLines.length.toString().length + 2;\n    var linesWithLineNumbers = shaderLines.map(function (line, lineNumber) {\n        return util.rightPad((lineNumber + 1).toString(), pad) + line;\n    });\n    var maxLineLength = 0;\n    for (var i = 0; i < linesWithLineNumbers.length; i++) {\n        maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n    }\n    var beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n    var errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n    var afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n    console.log(beforeErrorLines.join('\\n'));\n    console.log(shaderInfoLog.split('\\n')[0]);\n    console.log(\"%c \" + util.rightPad(errorLine[0], maxLineLength), 'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n    console.log(afterErrorLines.join('\\n'));\n}\nfunction createProgram(gl) {\n    return throwIfNull(gl, function () {\n        return gl.createProgram();\n    }, 'Unable to create WebGLProgram.');\n}\nfunction linkProgram(gl, program) {\n    callAndCheck(gl, function () {\n        return gl.linkProgram(program);\n    });\n    if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n        console.log(gl.getProgramInfoLog(program));\n        throw new Error('Failed to link vertex and fragment shaders.');\n    }\n}\nfunction validateProgram(gl, program) {\n    callAndCheck(gl, function () {\n        return gl.validateProgram(program);\n    });\n    if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n        console.log(gl.getProgramInfoLog(program));\n        throw new Error('Shader program validation failed.');\n    }\n}\nfunction createStaticVertexBuffer(gl, data) {\n    var buffer = throwIfNull(gl, function () {\n        return gl.createBuffer();\n    }, 'Unable to create WebGLBuffer');\n    callAndCheck(gl, function () {\n        return gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    });\n    callAndCheck(gl, function () {\n        return gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n    });\n    return buffer;\n}\nfunction createStaticIndexBuffer(gl, data) {\n    var buffer = throwIfNull(gl, function () {\n        return gl.createBuffer();\n    }, 'Unable to create WebGLBuffer');\n    callAndCheck(gl, function () {\n        return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n    });\n    callAndCheck(gl, function () {\n        return gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW);\n    });\n    return buffer;\n}\nfunction queryMaxTextureSize(gl) {\n    if (MAX_TEXTURE_SIZE != null) {\n        return MAX_TEXTURE_SIZE;\n    }\n    MAX_TEXTURE_SIZE = callAndCheck(gl, function () {\n        return gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    });\n    return MAX_TEXTURE_SIZE;\n}\nfunction getChannelsPerTexture() {\n    if (!_environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {\n        return 4;\n    }\n    if (_environment.ENV.get('WEBGL_VERSION') === 2) {\n        return 1;\n    }\n    return 4;\n}\nfunction createTexture(gl) {\n    return throwIfNull(gl, function () {\n        return gl.createTexture();\n    }, 'Unable to create WebGLTexture.');\n}\nfunction validateTextureSize(gl, width, height) {\n    var maxTextureSize = queryMaxTextureSize(gl);\n    if (width <= 0 || height <= 0) {\n        var requested = \"[\" + width + \"x\" + height + \"]\";\n        throw new Error('Requested texture size ' + requested + ' is invalid.');\n    }\n    if (width > maxTextureSize || height > maxTextureSize) {\n        var requested = \"[\" + width + \"x\" + height + \"]\";\n        var max = \"[\" + maxTextureSize + \"x\" + maxTextureSize + \"]\";\n        throw new Error('Requested texture size ' + requested + ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n    }\n}\nfunction createFramebuffer(gl) {\n    return throwIfNull(gl, function () {\n        return gl.createFramebuffer();\n    }, 'Unable to create WebGLFramebuffer.');\n}\nfunction bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {\n    var loc = gl.getAttribLocation(program, attribute);\n    if (loc === -1) {\n        return false;\n    }\n    callAndCheck(gl, function () {\n        return gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    });\n    callAndCheck(gl, function () {\n        return gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes);\n    });\n    callAndCheck(gl, function () {\n        return gl.enableVertexAttribArray(loc);\n    });\n    return true;\n}\nfunction bindTextureUnit(gl, texture, textureUnit) {\n    validateTextureUnit(gl, textureUnit);\n    callAndCheck(gl, function () {\n        return gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    });\n    callAndCheck(gl, function () {\n        return gl.bindTexture(gl.TEXTURE_2D, texture);\n    });\n}\nfunction unbindTextureUnit(gl, textureUnit) {\n    validateTextureUnit(gl, textureUnit);\n    callAndCheck(gl, function () {\n        return gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    });\n    callAndCheck(gl, function () {\n        return gl.bindTexture(gl.TEXTURE_2D, null);\n    });\n}\nfunction getProgramUniformLocationOrThrow(gl, program, uniformName) {\n    return throwIfNull(gl, function () {\n        return gl.getUniformLocation(program, uniformName);\n    }, 'uniform \"' + uniformName + '\" not present in program.');\n}\nfunction getProgramUniformLocation(gl, program, uniformName) {\n    return gl.getUniformLocation(program, uniformName);\n}\nfunction bindTextureToProgramUniformSampler(gl, program, texture, uniformSamplerLocation, textureUnit) {\n    callAndCheck(gl, function () {\n        return bindTextureUnit(gl, texture, textureUnit);\n    });\n    callAndCheck(gl, function () {\n        return gl.uniform1i(uniformSamplerLocation, textureUnit);\n    });\n}\nfunction bindCanvasToFramebuffer(gl) {\n    callAndCheck(gl, function () {\n        return gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    });\n    callAndCheck(gl, function () {\n        return gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    });\n    callAndCheck(gl, function () {\n        return gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n    });\n}\nfunction bindColorTextureToFramebuffer(gl, texture, framebuffer) {\n    callAndCheck(gl, function () {\n        return gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    });\n    callAndCheck(gl, function () {\n        return gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    });\n}\nfunction unbindColorTextureFromFramebuffer(gl, framebuffer) {\n    callAndCheck(gl, function () {\n        return gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    });\n    callAndCheck(gl, function () {\n        return gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);\n    });\n}\nfunction validateFramebuffer(gl) {\n    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n        throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n    }\n}\nfunction getFramebufferErrorMessage(gl, status) {\n    switch (status) {\n        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n            return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n            return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n            return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n        case gl.FRAMEBUFFER_UNSUPPORTED:\n            return 'FRAMEBUFFER_UNSUPPORTED';\n        default:\n            return \"unknown error \" + status;\n    }\n}\nfunction throwIfNull(gl, returnTOrNull, failureMessage) {\n    var tOrNull = callAndCheck(gl, function () {\n        return returnTOrNull();\n    });\n    if (tOrNull == null) {\n        throw new Error(failureMessage);\n    }\n    return tOrNull;\n}\nfunction validateTextureUnit(gl, textureUnit) {\n    var maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n    var glTextureUnit = textureUnit + gl.TEXTURE0;\n    if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n        var textureUnitRange = \"[gl.TEXTURE0, gl.TEXTURE\" + maxTextureUnit + \"]\";\n        throw new Error(\"textureUnit must be in \" + textureUnitRange + \".\");\n    }\n}\nfunction getTextureShapeFromLogicalShape(gl, logShape) {\n    if (logShape.length !== 2) {\n        var squeezeResult = util.squeezeShape(logShape);\n        logShape = squeezeResult.newShape;\n    }\n    var maxTexSize = queryMaxTextureSize(gl);\n    var size = util.sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTexSize) {\n        return [size, 1];\n    } else if (logShape.length === 2 && logShape[0] <= maxTexSize && logShape[1] <= maxTexSize) {\n        return logShape;\n    } else if (logShape.length === 3 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] <= maxTexSize) {\n        return [logShape[0], logShape[1] * logShape[2]];\n    } else if (logShape.length === 4 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n        return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n        return util.sizeToSquarishShape(size);\n    }\n}\n//# sourceMappingURL=webgl_util.js.map"},"hash":"13266fd149699d4b2977f98369785517","cacheData":{"env":{}}}