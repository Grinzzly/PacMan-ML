{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1528724212618},{"name":"@tensorflow/tfjs-core","loc":{"line":12,"column":36}},{"name":"../backend/common","loc":{"line":13,"column":32}},{"name":"../backend/tfjs_backend","loc":{"line":14,"column":19}},{"name":"../common","loc":{"line":15,"column":32}},{"name":"../constraints","loc":{"line":16,"column":30}},{"name":"../errors","loc":{"line":17,"column":27}},{"name":"../initializers","loc":{"line":18,"column":31}},{"name":"../regularizers","loc":{"line":19,"column":31}},{"name":"../utils/conv_utils","loc":{"line":20,"column":33}},{"name":"../utils/generic_utils","loc":{"line":21,"column":56}},{"name":"./convolutional","loc":{"line":22,"column":46}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.DepthwiseConv2D = undefined;\nexports.depthwiseConv2d = depthwiseConv2d;\n\nvar _tfjsCore = require('@tensorflow/tfjs-core');\n\nvar tfc = _interopRequireWildcard(_tfjsCore);\n\nvar _common = require('../backend/common');\n\nvar _tfjs_backend = require('../backend/tfjs_backend');\n\nvar K = _interopRequireWildcard(_tfjs_backend);\n\nvar _common2 = require('../common');\n\nvar _constraints = require('../constraints');\n\nvar _errors = require('../errors');\n\nvar _initializers = require('../initializers');\n\nvar _regularizers = require('../regularizers');\n\nvar _conv_utils = require('../utils/conv_utils');\n\nvar _generic_utils = require('../utils/generic_utils');\n\nvar _convolutional = require('./convolutional');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar __extends = undefined && undefined.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nfunction depthwiseConv2d(x, depthwiseKernel, strides, padding, dataFormat, dilationRate) {\n    if (strides === void 0) {\n        strides = [1, 1];\n    }\n    if (padding === void 0) {\n        padding = 'valid';\n    }\n    return (0, _tfjsCore.tidy)(function () {\n        if (dataFormat == null) {\n            dataFormat = (0, _common.imageDataFormat)();\n        }\n        (0, _common2.checkDataFormat)(dataFormat);\n        var y = (0, _convolutional.preprocessConv2DInput)(x, dataFormat);\n        if (x.rank !== 4) {\n            throw new _errors.ValueError(\"Input for depthwiseConv2d is required to be 4-D, but is instead \" + (x.rank + \"-D\"));\n        }\n        if (depthwiseKernel.rank !== 4) {\n            throw new _errors.ValueError(\"depthwiseKernel is required to be 4-D, but is instead \" + (depthwiseKernel.rank + \"-D\"));\n        }\n        y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]);\n        }\n        return y;\n    });\n}\nvar DepthwiseConv2D = function (_super) {\n    __extends(DepthwiseConv2D, _super);\n    function DepthwiseConv2D(config) {\n        var _this = _super.call(this, config) || this;\n        _this.depthwiseKernel = null;\n        _this.depthMultiplier = config.depthMultiplier == null ? 1 : config.depthMultiplier;\n        _this.depthwiseInitializer = (0, _initializers.getInitializer)(config.depthwiseInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.depthwiseConstraint = (0, _constraints.getConstraint)(config.depthwiseConstraint);\n        _this.depthwiseRegularizer = (0, _regularizers.getRegularizer)(config.depthwiseRegularizer);\n        return _this;\n    }\n    DepthwiseConv2D.prototype.build = function (inputShape) {\n        inputShape = (0, _generic_utils.getExactlyOneShape)(inputShape);\n        if (inputShape.length < 4) {\n            throw new _errors.ValueError(\"Inputs to DepthwiseConv2D should have rank 4. \" + (\"Received input shape: \" + JSON.stringify(inputShape) + \".\"));\n        }\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new _errors.ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' + (\"be defined, but is not (\" + inputShape[channelAxis] + \").\"));\n        }\n        var inputDim = inputShape[channelAxis];\n        var depthwiseKernelShape = [this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier];\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        } else {\n            this.bias = null;\n        }\n        this.built = true;\n    };\n    DepthwiseConv2D.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return (0, _tfjsCore.tidy)(function () {\n            inputs = (0, _generic_utils.getExactlyOneTensor)(inputs);\n            var outputs = depthwiseConv2d(inputs, _this.depthwiseKernel.read(), _this.strides, _this.padding, _this.dataFormat, null);\n            if (_this.useBias) {\n                outputs = K.biasAdd(outputs, _this.bias.read(), _this.dataFormat);\n            }\n            if (_this.activation != null) {\n                outputs = _this.activation.apply(outputs);\n            }\n            return outputs;\n        });\n    };\n    DepthwiseConv2D.prototype.computeOutputShape = function (inputShape) {\n        inputShape = (0, _generic_utils.getExactlyOneShape)(inputShape);\n        var rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        var cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        var outFilters = this.dataFormat === 'channelsFirst' ? inputShape[1] * this.depthMultiplier : inputShape[3] * this.depthMultiplier;\n        var outRows = (0, _conv_utils.convOutputLength)(rows, this.kernelSize[0], this.padding, this.strides[0]);\n        var outCols = (0, _conv_utils.convOutputLength)(cols, this.kernelSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], outFilters, outRows, outCols];\n        } else {\n            return [inputShape[0], outRows, outCols, outFilters];\n        }\n    };\n    DepthwiseConv2D.className = 'DepthwiseConv2D';\n    return DepthwiseConv2D;\n}(_convolutional.Conv2D);\nexports.DepthwiseConv2D = DepthwiseConv2D;\n\n_tfjsCore.serialization.SerializationMap.register(DepthwiseConv2D);\n//# sourceMappingURL=convolutional_depthwise.js.map"},"hash":"69e367743a11dfad5054424c811a059b","cacheData":{"env":{}}}