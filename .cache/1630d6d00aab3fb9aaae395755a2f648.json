{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../environment","loc":{"line":36,"column":20}},{"name":"../ops/axis_util","loc":{"line":37,"column":27}},{"name":"../ops/ops","loc":{"line":38,"column":21}},{"name":"../ops/reduce_util","loc":{"line":39,"column":29}},{"name":"../ops/slice_util","loc":{"line":40,"column":37}},{"name":"../tensor","loc":{"line":41,"column":23}},{"name":"../types","loc":{"line":42,"column":23}},{"name":"../util","loc":{"line":43,"column":22}},{"name":"./backend_util","loc":{"line":44,"column":30}},{"name":"./webgl/argminmax_gpu","loc":{"line":45,"column":33}},{"name":"./webgl/avg_pool_backprop_gpu","loc":{"line":46,"column":41}},{"name":"./webgl/batchnorm_gpu","loc":{"line":47,"column":33}},{"name":"./webgl/binaryop_gpu","loc":{"line":49,"column":32}},{"name":"./webgl/clip_gpu","loc":{"line":50,"column":28}},{"name":"./webgl/concat_gpu","loc":{"line":51,"column":30}},{"name":"./webgl/conv_backprop_gpu","loc":{"line":52,"column":62}},{"name":"./webgl/conv_backprop_gpu_depthwise","loc":{"line":53,"column":80}},{"name":"./webgl/conv_gpu","loc":{"line":54,"column":30}},{"name":"./webgl/conv_gpu_depthwise","loc":{"line":55,"column":39}},{"name":"./webgl/cumsum_gpu","loc":{"line":56,"column":30}},{"name":"./webgl/from_pixels_gpu","loc":{"line":57,"column":34}},{"name":"./webgl/gather_gpu","loc":{"line":58,"column":30}},{"name":"./webgl/gpgpu_context","loc":{"line":59,"column":29}},{"name":"./webgl/gpgpu_math","loc":{"line":60,"column":28}},{"name":"./webgl/gpgpu_util","loc":{"line":61,"column":28}},{"name":"./webgl/logical_gpu","loc":{"line":62,"column":29}},{"name":"./webgl/lrn_gpu","loc":{"line":63,"column":27}},{"name":"./webgl/max_pool_backprop_gpu","loc":{"line":64,"column":41}},{"name":"./webgl/mulmat_gpu","loc":{"line":65,"column":30}},{"name":"./webgl/multinomial_gpu","loc":{"line":66,"column":35}},{"name":"./webgl/onehot_gpu","loc":{"line":67,"column":30}},{"name":"./webgl/pad_gpu","loc":{"line":68,"column":27}},{"name":"./webgl/pool_gpu","loc":{"line":69,"column":30}},{"name":"./webgl/reduce_gpu","loc":{"line":70,"column":30}},{"name":"./webgl/resize_bilinear_backprop_gpu","loc":{"line":71,"column":46}},{"name":"./webgl/resize_bilinear_gpu","loc":{"line":72,"column":38}},{"name":"./webgl/resize_nearest_neighbor_gpu","loc":{"line":73,"column":45}},{"name":"./webgl/reverse_gpu","loc":{"line":74,"column":31}},{"name":"./webgl/slice_gpu","loc":{"line":75,"column":29}},{"name":"./webgl/strided_slice_gpu","loc":{"line":76,"column":36}},{"name":"./webgl/tex_util","loc":{"line":77,"column":28}},{"name":"./webgl/texture_manager","loc":{"line":78,"column":31}},{"name":"./webgl/tile_gpu","loc":{"line":79,"column":28}},{"name":"./webgl/transpose_gpu","loc":{"line":80,"column":33}},{"name":"./webgl/unaryop_gpu","loc":{"line":82,"column":31}},{"name":"./webgl/webgl_util","loc":{"line":83,"column":28}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.MathBackendWebGL = undefined;\n\nvar _environment = require(\"../environment\");\n\nvar _axis_util = require(\"../ops/axis_util\");\n\nvar axis_util = _interopRequireWildcard(_axis_util);\n\nvar _ops = require(\"../ops/ops\");\n\nvar ops = _interopRequireWildcard(_ops);\n\nvar _reduce_util = require(\"../ops/reduce_util\");\n\nvar reduce_util = _interopRequireWildcard(_reduce_util);\n\nvar _slice_util = require(\"../ops/slice_util\");\n\nvar _tensor = require(\"../tensor\");\n\nvar _types = require(\"../types\");\n\nvar types = _interopRequireWildcard(_types);\n\nvar _util = require(\"../util\");\n\nvar util = _interopRequireWildcard(_util);\n\nvar _backend_util = require(\"./backend_util\");\n\nvar backend_util = _interopRequireWildcard(_backend_util);\n\nvar _argminmax_gpu = require(\"./webgl/argminmax_gpu\");\n\nvar _avg_pool_backprop_gpu = require(\"./webgl/avg_pool_backprop_gpu\");\n\nvar _batchnorm_gpu = require(\"./webgl/batchnorm_gpu\");\n\nvar _binaryop_gpu = require(\"./webgl/binaryop_gpu\");\n\nvar binaryop_gpu = _interopRequireWildcard(_binaryop_gpu);\n\nvar _clip_gpu = require(\"./webgl/clip_gpu\");\n\nvar _concat_gpu = require(\"./webgl/concat_gpu\");\n\nvar _conv_backprop_gpu = require(\"./webgl/conv_backprop_gpu\");\n\nvar _conv_backprop_gpu_depthwise = require(\"./webgl/conv_backprop_gpu_depthwise\");\n\nvar _conv_gpu = require(\"./webgl/conv_gpu\");\n\nvar _conv_gpu_depthwise = require(\"./webgl/conv_gpu_depthwise\");\n\nvar _cumsum_gpu = require(\"./webgl/cumsum_gpu\");\n\nvar _from_pixels_gpu = require(\"./webgl/from_pixels_gpu\");\n\nvar _gather_gpu = require(\"./webgl/gather_gpu\");\n\nvar _gpgpu_context = require(\"./webgl/gpgpu_context\");\n\nvar _gpgpu_math = require(\"./webgl/gpgpu_math\");\n\nvar gpgpu_math = _interopRequireWildcard(_gpgpu_math);\n\nvar _gpgpu_util = require(\"./webgl/gpgpu_util\");\n\nvar gpgpu_util = _interopRequireWildcard(_gpgpu_util);\n\nvar _logical_gpu = require(\"./webgl/logical_gpu\");\n\nvar _lrn_gpu = require(\"./webgl/lrn_gpu\");\n\nvar _max_pool_backprop_gpu = require(\"./webgl/max_pool_backprop_gpu\");\n\nvar _mulmat_gpu = require(\"./webgl/mulmat_gpu\");\n\nvar _multinomial_gpu = require(\"./webgl/multinomial_gpu\");\n\nvar _onehot_gpu = require(\"./webgl/onehot_gpu\");\n\nvar _pad_gpu = require(\"./webgl/pad_gpu\");\n\nvar _pool_gpu = require(\"./webgl/pool_gpu\");\n\nvar _reduce_gpu = require(\"./webgl/reduce_gpu\");\n\nvar _resize_bilinear_backprop_gpu = require(\"./webgl/resize_bilinear_backprop_gpu\");\n\nvar _resize_bilinear_gpu = require(\"./webgl/resize_bilinear_gpu\");\n\nvar _resize_nearest_neighbor_gpu = require(\"./webgl/resize_nearest_neighbor_gpu\");\n\nvar _reverse_gpu = require(\"./webgl/reverse_gpu\");\n\nvar _slice_gpu = require(\"./webgl/slice_gpu\");\n\nvar _strided_slice_gpu = require(\"./webgl/strided_slice_gpu\");\n\nvar _tex_util = require(\"./webgl/tex_util\");\n\nvar _texture_manager = require(\"./webgl/texture_manager\");\n\nvar _tile_gpu = require(\"./webgl/tile_gpu\");\n\nvar _transpose_gpu = require(\"./webgl/transpose_gpu\");\n\nvar _unaryop_gpu = require(\"./webgl/unaryop_gpu\");\n\nvar unary_op = _interopRequireWildcard(_unaryop_gpu);\n\nvar _webgl_util = require(\"./webgl/webgl_util\");\n\nvar webgl_util = _interopRequireWildcard(_webgl_util);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = undefined && undefined.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\nvar BEFORE_PAGING_CONSTANT = 300;\nvar MathBackendWebGL = function () {\n    function MathBackendWebGL(gpgpu, delayedStorage) {\n        if (delayedStorage === void 0) {\n            delayedStorage = true;\n        }\n        this.gpgpu = gpgpu;\n        this.delayedStorage = delayedStorage;\n        this.texData = new WeakMap();\n        this.pendingRead = new WeakMap();\n        this.pendingDisposal = new WeakSet();\n        this.lruDataGPU = [];\n        this.numBytesInGPU = 0;\n        this.uploadWaitMs = 0;\n        this.downloadWaitMs = 0;\n        this.binaryCache = {};\n        this.disposed = false;\n        if (_environment.ENV.get('WEBGL_VERSION') < 1) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        if (_environment.ENV.get('IS_BROWSER')) {\n            this.canvas = document.createElement('canvas');\n        }\n        if (gpgpu == null) {\n            this.gpgpu = new _gpgpu_context.GPGPUContext(gpgpu_util.createWebGLContext(this.canvas));\n            this.gpgpuCreatedLocally = true;\n        } else {\n            this.gpgpuCreatedLocally = false;\n        }\n        this.NUM_BYTES_BEFORE_PAGING = window.screen.height * window.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT;\n        this.textureManager = new _texture_manager.TextureManager(this.gpgpu);\n    }\n    MathBackendWebGL.prototype.register = function (dataId, shape, dtype) {\n        if (this.texData.has(dataId)) {\n            throw new Error('Data buffer is already registered');\n        }\n        this.texData.set(dataId, {\n            shape: shape,\n            dtype: dtype,\n            values: null,\n            texture: null,\n            texShape: null,\n            texType: _tex_util.TextureType.FLOAT\n        });\n    };\n    MathBackendWebGL.prototype.fromPixels = function (pixels, numChannels) {\n        if (pixels == null) {\n            throw new Error('MathBackendWebGL.writePixels(): pixels can not be null');\n        }\n        var texShape = [pixels.height, pixels.width];\n        var outShape = [pixels.height, pixels.width, numChannels];\n        if (pixels instanceof HTMLVideoElement) {\n            if (this.fromPixelsCanvas == null) {\n                if (!_environment.ENV.get('IS_BROWSER')) {\n                    throw new Error('Can\\'t read pixels from HTMLImageElement outside the browser.');\n                }\n                if (document.readyState !== 'complete') {\n                    throw new Error('The DOM is not ready yet. Please call tf.fromPixels() ' + 'once the DOM is ready. One way to do that is to add an event ' + 'listener for `DOMContentLoaded` on the document object');\n                }\n                this.fromPixelsCanvas = document.createElement('canvas');\n            }\n            this.fromPixelsCanvas.width = pixels.width;\n            this.fromPixelsCanvas.height = pixels.height;\n            this.fromPixelsCanvas.getContext('2d').drawImage(pixels, 0, 0, pixels.width, pixels.height);\n            pixels = this.fromPixelsCanvas;\n        }\n        var tempPixelArray = _tensor.Tensor.make(texShape, {}, 'int32');\n        this.texData.get(tempPixelArray.dataId).texType = _tex_util.TextureType.UNSIGNED_BYTE;\n        this.gpgpu.uploadPixelDataToTexture(this.getTexture(tempPixelArray.dataId), pixels);\n        var program = new _from_pixels_gpu.FromPixelsProgram(outShape);\n        var res = this.compileAndRun(program, [tempPixelArray]);\n        tempPixelArray.dispose();\n        return res;\n    };\n    MathBackendWebGL.prototype.write = function (dataId, values) {\n        if (values == null) {\n            throw new Error('MathBackendWebGL.write(): values can not be null');\n        }\n        this.throwIfNoData(dataId);\n        var texData = this.texData.get(dataId);\n        var texture = texData.texture,\n            texShape = texData.texShape,\n            texType = texData.texType;\n        if (texture != null) {\n            this.releaseTexture(dataId, texture, texShape, texType);\n            texData.texture = null;\n            texData.texShape = null;\n        }\n        texData.values = values;\n        if (!this.delayedStorage) {\n            this.uploadToGPU(dataId);\n        }\n    };\n    MathBackendWebGL.prototype.readSync = function (dataId) {\n        this.throwIfNoData(dataId);\n        var texData = this.texData.get(dataId);\n        var texture = texData.texture,\n            values = texData.values,\n            texShape = texData.texShape;\n        if (values != null) {\n            this.cacheOnCPU(dataId);\n            return values;\n        }\n        var shouldTimeProgram = this.activeTimers != null;\n        var start;\n        if (shouldTimeProgram) {\n            start = performance.now();\n        }\n        var float32Values = this.gpgpu.downloadMatrixFromTexture(texture, texShape[0], texShape[1]);\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += performance.now() - start;\n        }\n        this.cacheOnCPU(dataId, float32Values);\n        return texData.values;\n    };\n    MathBackendWebGL.prototype.read = function (dataId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var subscribers_1, texData, texture, values, texShape, float32Values, subscribers, vals;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.pendingRead.has(dataId)) {\n                            subscribers_1 = this.pendingRead.get(dataId);\n                            return [2, new Promise(function (resolve) {\n                                return subscribers_1.push(resolve);\n                            })];\n                        }\n                        this.throwIfNoData(dataId);\n                        texData = this.texData.get(dataId);\n                        texture = texData.texture, values = texData.values, texShape = texData.texShape;\n                        if (values != null) {\n                            this.cacheOnCPU(dataId);\n                            return [2, values];\n                        }\n                        if (!_environment.ENV.get('WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED')) return [3, 2];\n                        return [4, this.gpgpu.downloadMatrixFromTextureAsync(texture, texShape[0], texShape[1])];\n                    case 1:\n                        float32Values = _a.sent();\n                        this.cacheOnCPU(dataId, float32Values);\n                        return [2, texData.values];\n                    case 2:\n                        if (_environment.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 0) {\n                            return [2, this.readSync(dataId)];\n                        }\n                        this.pendingRead.set(dataId, []);\n                        return [4, this.gpgpu.runQuery(function () {})];\n                    case 3:\n                        _a.sent();\n                        subscribers = this.pendingRead.get(dataId);\n                        this.pendingRead.delete(dataId);\n                        vals = this.readSync(dataId);\n                        subscribers.forEach(function (resolve) {\n                            return resolve(vals);\n                        });\n                        if (this.pendingDisposal.has(dataId)) {\n                            this.pendingDisposal.delete(dataId);\n                            this.disposeData(dataId);\n                        }\n                        return [2, vals];\n                }\n            });\n        });\n    };\n    MathBackendWebGL.prototype.time = function (f) {\n        return __awaiter(this, void 0, void 0, function () {\n            var oldActiveTimers, newActiveTimers, outerMostTime, flattenedActiveTimers, kernelMs, res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        oldActiveTimers = this.activeTimers;\n                        newActiveTimers = [];\n                        outerMostTime = false;\n                        if (this.programTimersStack == null) {\n                            this.programTimersStack = newActiveTimers;\n                            outerMostTime = true;\n                        } else {\n                            this.activeTimers.push(newActiveTimers);\n                        }\n                        this.activeTimers = newActiveTimers;\n                        f();\n                        flattenedActiveTimers = util.flatten(this.activeTimers);\n                        this.activeTimers = oldActiveTimers;\n                        if (outerMostTime) {\n                            this.programTimersStack = null;\n                        }\n                        return [4, Promise.all(flattenedActiveTimers).then(function (results) {\n                            var sum = 0;\n                            results.forEach(function (result) {\n                                return sum += result;\n                            });\n                            return sum;\n                        })];\n                    case 1:\n                        kernelMs = _a.sent();\n                        res = {\n                            uploadWaitMs: this.uploadWaitMs,\n                            downloadWaitMs: this.downloadWaitMs,\n                            kernelMs: kernelMs,\n                            wallMs: null\n                        };\n                        this.uploadWaitMs = 0;\n                        this.downloadWaitMs = 0;\n                        return [2, res];\n                }\n            });\n        });\n    };\n    MathBackendWebGL.prototype.memory = function () {\n        return { unreliable: false, numBytesInGPU: this.numBytesInGPU };\n    };\n    MathBackendWebGL.prototype.startTimer = function () {\n        if (_environment.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: performance.now(), endMs: null };\n    };\n    MathBackendWebGL.prototype.endTimer = function (query) {\n        if (_environment.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = performance.now();\n        return query;\n    };\n    MathBackendWebGL.prototype.getQueryTime = function (query) {\n        return __awaiter(this, void 0, void 0, function () {\n            var timerQuery;\n            return __generator(this, function (_a) {\n                if (_environment.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n                    return [2, this.gpgpu.pollQueryTime(query)];\n                }\n                timerQuery = query;\n                return [2, timerQuery.endMs - timerQuery.startMs];\n            });\n        });\n    };\n    MathBackendWebGL.prototype.disposeData = function (dataId) {\n        if (this.pendingDisposal.has(dataId)) {\n            return;\n        }\n        if (this.pendingRead.has(dataId)) {\n            this.pendingDisposal.add(dataId);\n            return;\n        }\n        if (this.texData.has(dataId)) {\n            var _a = this.texData.get(dataId),\n                texture = _a.texture,\n                texShape = _a.texShape,\n                texType = _a.texType;\n            if (texture != null) {\n                this.releaseTexture(dataId, texture, texShape, texType);\n            }\n            this.texData.delete(dataId);\n        }\n    };\n    MathBackendWebGL.prototype.getTexture = function (dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture;\n    };\n    MathBackendWebGL.prototype.getGPGPUContext = function () {\n        return this.gpgpu;\n    };\n    MathBackendWebGL.prototype.getCanvas = function () {\n        return this.canvas;\n    };\n    MathBackendWebGL.prototype.slice = function (x, begin, size) {\n        var program = new _slice_gpu.SliceProgram(size);\n        var customSetup = program.getCustomSetupFunc(begin);\n        return this.compileAndRun(program, [x], null, customSetup);\n    };\n    MathBackendWebGL.prototype.stridedSlice = function (x, begin, end, strides, beginMask, endMask) {\n        var _a = (0, _slice_util.getStridedSlicedInfo)(x.shape, begin, end, strides, beginMask, endMask),\n            beginIndex = _a[0],\n            size = _a[1];\n        if (size.some(function (axis) {\n            return axis === 0;\n        })) {\n            return ops.tensor([], size);\n        }\n        var program = new _strided_slice_gpu.StridedSliceProgram(beginIndex, strides, size);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.reverse = function (x, axis) {\n        var program = new _reverse_gpu.ReverseProgram(x.shape, axis);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.concat = function (a, b) {\n        var program = new _concat_gpu.ConcatProgram(a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.neg = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.NEG);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.matMul = function (a, b, transposeA, transposeB) {\n        var program = new _mulmat_gpu.MatMulProgram(a.shape, b.shape, transposeA, transposeB);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.multiply = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.batchNormalization = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        var inputs = [x, mean, variance];\n        var offsetShape = null;\n        if (offset != null) {\n            offsetShape = offset.shape;\n            inputs.push(offset);\n        }\n        var scaleShape = null;\n        if (scale != null) {\n            scaleShape = scale.shape;\n            inputs.push(scale);\n        }\n        var program = new _batchnorm_gpu.BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n        return this.compileAndRun(program, inputs);\n    };\n    MathBackendWebGL.prototype.localResponseNormalization4D = function (x, radius, bias, alpha, beta) {\n        var program = new _lrn_gpu.LRNProgram(x.shape, radius, bias, alpha, beta);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.tile = function (x, reps) {\n        var program = new _tile_gpu.TileProgram(x.shape, reps);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.pad = function (x, paddings, constantValue) {\n        var program = new _pad_gpu.PadProgram(x.shape, paddings, constantValue);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.transpose = function (x, perm) {\n        var program = new _transpose_gpu.TransposeProgram(x.shape, perm);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.gather = function (x, indices, axis) {\n        var program = new _gather_gpu.GatherProgram(x.shape, indices.size, axis);\n        return this.compileAndRun(program, [x, indices]);\n    };\n    MathBackendWebGL.prototype.reduce = function (x, reduceType, dtype) {\n        var batchSize = x.shape[0];\n        var inSize = x.shape[1];\n        var windowSize = reduce_util.computeOptimalWindowSize(inSize);\n        var reduceInfo = { windowSize: windowSize, inSize: inSize, batchSize: batchSize };\n        var program = new _reduce_gpu.ReduceProgram(reduceInfo, reduceType);\n        var _a = program.outputShape,\n            rows = _a[0],\n            cols = _a[1];\n        var output = this.makeOutputArray([rows, cols], dtype);\n        this.compileAndRun(program, [x], output);\n        if (output.shape[1] === 1) {\n            return output;\n        }\n        return this.reduce(output, reduceType, dtype);\n    };\n    MathBackendWebGL.prototype.argReduce = function (x, reduceType, bestIndicesA) {\n        if (bestIndicesA === void 0) {\n            bestIndicesA = null;\n        }\n        var batchSize = x.shape[0];\n        var inSize = x.shape[1];\n        if (bestIndicesA != null) {\n            batchSize = bestIndicesA.shape[0];\n            inSize = bestIndicesA.shape[1];\n        }\n        var windowSize = reduce_util.computeOptimalWindowSize(inSize);\n        var reduceInfo = { windowSize: windowSize, inSize: inSize, batchSize: batchSize };\n        var program = new _argminmax_gpu.ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n        var _a = program.outputShape,\n            rows = _a[0],\n            cols = _a[1];\n        var output = this.makeOutputArray([rows, cols], 'int32');\n        var inputs = [x];\n        if (bestIndicesA != null) {\n            inputs.push(bestIndicesA);\n        }\n        this.compileAndRun(program, inputs, output);\n        if (output.shape[1] === 1) {\n            return output;\n        }\n        return this.argReduce(x, reduceType, output);\n    };\n    MathBackendWebGL.prototype.sum = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),\n            outShape = _a[0],\n            reduceShape = _a[1];\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        var outputDType = types.sumOutType(x.dtype);\n        return this.reduce(a2D, 'sum', outputDType).reshape(outShape);\n    };\n    MathBackendWebGL.prototype.argMin = function (x, axis) {\n        var axes = [axis];\n        axis_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),\n            outShape = _a[0],\n            reduceShape = _a[1];\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        return this.argReduce(a2D, 'min').reshape(outShape);\n    };\n    MathBackendWebGL.prototype.argMax = function (x, axis) {\n        var axes = [axis];\n        axis_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),\n            outShape = _a[0],\n            reduceShape = _a[1];\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        return this.argReduce(a2D, 'max').reshape(outShape);\n    };\n    MathBackendWebGL.prototype.cumsum = function (x, axis, exclusive, reverse) {\n        if (axis !== x.rank - 1) {\n            throw new Error(\"WebGL cumsum shader expects an inner-most axis=\" + (x.rank - 1) + \" \" + (\"but got axis=\" + axis));\n        }\n        var program = new _cumsum_gpu.CumSumProgram(x.shape, exclusive, reverse);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.equal = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.notEqual = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.less = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.lessEqual = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.greater = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.greaterEqual = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.logicalNot = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.logicalAnd = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.logicalOr = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.where = function (condition, a, b, dtype) {\n        var program = new _logical_gpu.WhereProgram(condition.rank, a.shape, a.rank);\n        var output = this.makeOutputArray(program.outputShape, dtype);\n        return this.compileAndRun(program, [condition, a, b], output);\n    };\n    MathBackendWebGL.prototype.topKValues = function (x, k) {\n        throw new Error('topKValues GPU not yet implemented!');\n    };\n    MathBackendWebGL.prototype.topKIndices = function (x, k) {\n        throw new Error('topKIndices GPU not yet implemented!');\n    };\n    MathBackendWebGL.prototype.min = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),\n            outShape = _a[0],\n            reduceShape = _a[1];\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);\n    };\n    MathBackendWebGL.prototype.minimum = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.mod = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.max = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('max', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),\n            outShape = _a[0],\n            reduceShape = _a[1];\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        return this.reduce(a2D, 'max', a2D.dtype).reshape(outShape);\n    };\n    MathBackendWebGL.prototype.maximum = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.squaredDifference = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.SQUARED_DIFFERENCE, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.realDivide = function (a, b) {\n        var op = binaryop_gpu.DIV;\n        var outputDtype = 'float32';\n        var program = new _binaryop_gpu.BinaryOpProgram(op, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, outputDtype);\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.floorDiv = function (a, b) {\n        var op = binaryop_gpu.INT_DIV;\n        var outputDtype = 'int32';\n        var program = new _binaryop_gpu.BinaryOpProgram(op, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, outputDtype);\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.add = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.subtract = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.pow = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.ceil = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.CEIL);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.floor = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.FLOOR);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.sign = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SIGN);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.round = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ROUND);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.exp = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.EXP);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.expm1 = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.EXPM1);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.log = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.LOG);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.log1p = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.LOG1P);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.sqrt = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SQRT);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.rsqrt = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.RSQRT);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.square = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SQUARE);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.reciprocal = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.RECIPROCAL);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.relu = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.RELU);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.elu = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ELU);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.eluDer = function (dy, y) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);\n        return this.compileAndRun(program, [dy, y]);\n    };\n    MathBackendWebGL.prototype.selu = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SELU);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.int = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.TO_INT);\n        var output = this.makeOutputArray(program.outputShape, 'int32');\n        return this.compileAndRun(program, [x], output);\n    };\n    MathBackendWebGL.prototype.clip = function (x, min, max) {\n        var program = new _clip_gpu.ClipProgram(x.shape, min, max);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.abs = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ABS);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.sigmoid = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SIGMOID);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.softplus = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SOFTPLUS);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.sin = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SIN);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.cos = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.COS);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.tan = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.TAN);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.asin = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ASIN);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.acos = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ACOS);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.atan = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ATAN);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.atan2 = function (a, b) {\n        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.ATAN2, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.sinh = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SINH);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.cosh = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.COSH);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.tanh = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.TANH);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.asinh = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ASINH);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.acosh = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ACOSH);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.atanh = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ATANH);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.erf = function (x) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ERF);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.step = function (x, alpha) {\n        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.STEP(alpha));\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.conv2d = function (x, filter, convInfo) {\n        var program = new _conv_gpu.Conv2DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n    };\n    MathBackendWebGL.prototype.conv2dDerInput = function (dy, filter, convInfo) {\n        var program = new _conv_backprop_gpu.Conv2DDerInputProgram(convInfo);\n        return this.compileAndRun(program, [dy, filter]);\n    };\n    MathBackendWebGL.prototype.conv2dDerFilter = function (x, dy, convInfo) {\n        var program = new _conv_backprop_gpu.Conv2DDerFilterProgram(convInfo);\n        return this.compileAndRun(program, [x, dy]);\n    };\n    MathBackendWebGL.prototype.depthwiseConv2D = function (x, filter, convInfo) {\n        var program = new _conv_gpu_depthwise.DepthwiseConv2DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n    };\n    MathBackendWebGL.prototype.depthwiseConv2DDerInput = function (dy, filter, convInfo) {\n        var program = new _conv_backprop_gpu_depthwise.DepthwiseConv2DDerInputProgram(convInfo);\n        return this.compileAndRun(program, [dy, filter]);\n    };\n    MathBackendWebGL.prototype.depthwiseConv2DDerFilter = function (x, dy, convInfo) {\n        var program = new _conv_backprop_gpu_depthwise.DepthwiseConv2DDerFilterProgram(convInfo);\n        return this.compileAndRun(program, [x, dy]);\n    };\n    MathBackendWebGL.prototype.maxPool = function (x, convInfo) {\n        var program = new _pool_gpu.Pool2DProgram(convInfo, 'max', false);\n        var output = this.makeOutputArray(program.outputShape, x.dtype);\n        return this.compileAndRun(program, [x], output);\n    };\n    MathBackendWebGL.prototype.avgPool = function (x, convInfo) {\n        var program = new _pool_gpu.Pool2DProgram(convInfo, 'avg', false);\n        var output = this.makeOutputArray(program.outputShape, 'float32');\n        return this.compileAndRun(program, [x], output);\n    };\n    MathBackendWebGL.prototype.maxPoolBackprop = function (dy, x, y, convInfo) {\n        var getPositions = true;\n        var maxPoolPositionsProgram = new _pool_gpu.Pool2DProgram(convInfo, 'max', getPositions);\n        var maxPoolPositions = this.compileAndRun(maxPoolPositionsProgram, [x]);\n        var maxPoolBackPropProgram = new _max_pool_backprop_gpu.MaxPool2DBackpropProgram(convInfo);\n        var output = this.makeOutputArray(maxPoolBackPropProgram.outputShape, x.dtype);\n        var result = this.compileAndRun(maxPoolBackPropProgram, [dy, maxPoolPositions], output);\n        maxPoolPositions.dispose();\n        return result;\n    };\n    MathBackendWebGL.prototype.avgPoolBackprop = function (dy, x, convInfo) {\n        var avgPoolBackpropProgram = new _avg_pool_backprop_gpu.AvgPool2DBackpropProgram(convInfo);\n        var output = this.makeOutputArray(avgPoolBackpropProgram.outputShape, x.dtype);\n        return this.compileAndRun(avgPoolBackpropProgram, [dy], output);\n    };\n    MathBackendWebGL.prototype.cast = function (x, dtype) {\n        return backend_util.castTensor(x, dtype, this);\n    };\n    MathBackendWebGL.prototype.reshape = function (x, shape) {\n        return backend_util.reshapeTensor(x, shape);\n    };\n    MathBackendWebGL.prototype.resizeBilinear = function (x, newHeight, newWidth, alignCorners) {\n        var program = new _resize_bilinear_gpu.ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.resizeBilinearBackprop = function (dy, x, alignCorners) {\n        var program = new _resize_bilinear_backprop_gpu.ResizeBilinearBackpropProgram(dy, x, alignCorners);\n        return this.compileAndRun(program, [dy]);\n    };\n    MathBackendWebGL.prototype.resizeNearestNeighbor = function (x, newHeight, newWidth, alignCorners) {\n        var program = new _resize_nearest_neighbor_gpu.ResizeNearestNeighborProgram(x.shape, newHeight, newWidth, alignCorners);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.multinomial = function (logits, normalized, numSamples, seed) {\n        var probs = normalized ? logits : ops.softmax(logits);\n        var batchSize = probs.shape[0];\n        var numOutcomes = probs.shape[1];\n        var program = new _multinomial_gpu.MultinomialProgram(batchSize, numOutcomes, numSamples);\n        var output = this.makeOutputArray(program.outputShape, 'int32');\n        var customSetup = program.getCustomSetupFunc(seed);\n        return this.compileAndRun(program, [probs], output, customSetup);\n    };\n    MathBackendWebGL.prototype.oneHot = function (indices, depth, onValue, offValue) {\n        var program = new _onehot_gpu.OneHotProgram(indices.size, depth, onValue, offValue);\n        return this.compileAndRun(program, [indices]);\n    };\n    MathBackendWebGL.prototype.makeOutputArray = function (shape, dtype) {\n        return _tensor.Tensor.make(shape, {}, dtype);\n    };\n    MathBackendWebGL.prototype.compileAndRun = function (program, inputs, output, customSetup) {\n        var _this = this;\n        if (output == null) {\n            output = this.makeOutputArray(program.outputShape, inputs[0].dtype);\n        }\n        var inputsData = inputs.map(function (input) {\n            _this.uploadToGPU(input.dataId);\n            return { tensor: input, texData: _this.texData.get(input.dataId) };\n        });\n        this.uploadToGPU(output.dataId);\n        var outputData = {\n            tensor: output,\n            texData: this.texData.get(output.dataId)\n        };\n        var key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n        var binary = this.getAndSaveBinary(key, function () {\n            return gpgpu_math.compileProgram(_this.gpgpu, program, inputsData, outputData);\n        });\n        var shouldTimeProgram = this.activeTimers != null;\n        var query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        gpgpu_math.runProgram(binary, inputsData, outputData, customSetup);\n        if (this.numBytesInGPU > this.NUM_BYTES_BEFORE_PAGING) {\n            var numBytesToPage = this.numBytesInGPU - this.NUM_BYTES_BEFORE_PAGING;\n            while (numBytesToPage > 0) {\n                var dataId = this.lruDataGPU.shift();\n                var _a = this.texData.get(dataId),\n                    shape = _a.shape,\n                    dtype = _a.dtype;\n                numBytesToPage -= this.computeBytes(shape, dtype);\n                this.read(dataId);\n            }\n        }\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push(this.getQueryTime(query));\n        }\n        return output;\n    };\n    MathBackendWebGL.prototype.getAndSaveBinary = function (key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    };\n    MathBackendWebGL.prototype.getTextureManager = function () {\n        return this.textureManager;\n    };\n    MathBackendWebGL.prototype.dispose = function () {\n        if (this.disposed) {\n            return;\n        }\n        for (var key in this.binaryCache) {\n            this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        }\n        this.textureManager.dispose();\n        this.canvas.remove();\n        if (this.fromPixelsCanvas != null) {\n            this.fromPixelsCanvas.remove();\n        }\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    };\n    MathBackendWebGL.prototype.throwIfNoData = function (dataId) {\n        if (!this.texData.has(dataId)) {\n            throw new Error(\"WebGL backend: No data found for this tensor. \" + \"Did you change your backend in the middle of the program? \" + \"New backends can't use Tensors created with previous backends\");\n        }\n    };\n    MathBackendWebGL.prototype.uploadToGPU = function (dataId) {\n        this.throwIfNoData(dataId);\n        var texData = this.texData.get(dataId);\n        var shape = texData.shape,\n            values = texData.values,\n            texture = texData.texture,\n            dtype = texData.dtype,\n            texType = texData.texType;\n        if (texture != null) {\n            this.lruDataGPU.splice(this.lruDataGPU.indexOf(dataId), 1);\n            this.lruDataGPU.push(dataId);\n            return;\n        }\n        var shouldTimeProgram = this.activeTimers != null;\n        var start;\n        if (shouldTimeProgram) {\n            start = performance.now();\n        }\n        var texShape = webgl_util.getTextureShapeFromLogicalShape(this.gpgpu.gl, shape);\n        texData.texShape = texShape;\n        var newTexture = this.acquireTexture(dataId, texShape, texType);\n        texData.texture = newTexture;\n        if (values != null) {\n            this.gpgpu.uploadMatrixToTexture(newTexture, texShape[0], texShape[1], typedArrayToFloat32(values, dtype));\n            texData.values = null;\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += performance.now() - start;\n            }\n        }\n    };\n    MathBackendWebGL.prototype.cacheOnCPU = function (dataId, float32Values) {\n        var dontKeepCopyOnGPU = this.delayedStorage;\n        var texData = this.texData.get(dataId);\n        var texture = texData.texture,\n            texShape = texData.texShape,\n            dtype = texData.dtype,\n            texType = texData.texType;\n        if (dontKeepCopyOnGPU && texture != null) {\n            this.releaseTexture(dataId, texture, texShape, texType);\n            texData.texture = null;\n            texData.texShape = null;\n        }\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n    };\n    MathBackendWebGL.prototype.releaseTexture = function (dataId, texture, texShape, texType) {\n        var _a = this.texData.get(dataId),\n            shape = _a.shape,\n            dtype = _a.dtype;\n        var idx = this.lruDataGPU.indexOf(dataId);\n        if (idx >= 0) {\n            this.lruDataGPU.splice(idx, 1);\n        }\n        this.numBytesInGPU -= this.computeBytes(shape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, texType);\n    };\n    MathBackendWebGL.prototype.acquireTexture = function (dataId, texShape, texType) {\n        var _a = this.texData.get(dataId),\n            shape = _a.shape,\n            dtype = _a.dtype;\n        this.lruDataGPU.push(dataId);\n        this.numBytesInGPU += this.computeBytes(shape, dtype);\n        return this.textureManager.acquireTexture(texShape, texType);\n    };\n    MathBackendWebGL.prototype.computeBytes = function (shape, dtype) {\n        return util.sizeFromShape(shape) * util.bytesPerElement(dtype);\n    };\n    return MathBackendWebGL;\n}();\nexports.MathBackendWebGL = MathBackendWebGL;\n\nif (_environment.ENV.get('IS_BROWSER')) {\n    _environment.ENV.registerBackend('webgl', function () {\n        return new MathBackendWebGL();\n    }, 2);\n}\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32') {\n        return a;\n    } else if (dtype === 'int32' || dtype === 'bool') {\n        var result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n        for (var i = 0; i < result.length; ++i) {\n            result[i] = Math.round(a[i]);\n        }\n        return result;\n    } else {\n        throw new Error(\"Unknown dtype \" + dtype);\n    }\n}\nfunction typedArrayToFloat32(a, dtype) {\n    return a instanceof Float32Array ? a : new Float32Array(a);\n}\n//# sourceMappingURL=backend_webgl.js.map"},"hash":"7e5e6d12c8bd6f95071ab8a8f33d7a0b","cacheData":{"env":{}}}