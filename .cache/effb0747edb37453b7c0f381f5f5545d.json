{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../environment","loc":{"line":36,"column":20}},{"name":"./io_utils","loc":{"line":37,"column":80}},{"name":"./router_registry","loc":{"line":38,"column":33}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.browserDownloadsRouter = exports.BrowserDownloads = undefined;\nexports.browserDownloads = browserDownloads;\nexports.browserFiles = browserFiles;\n\nvar _environment = require(\"../environment\");\n\nvar _io_utils = require(\"./io_utils\");\n\nvar _router_registry = require(\"./router_registry\");\n\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = undefined && undefined.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\nvar DEFAULT_FILE_NAME_PREFIX = 'model';\nvar DEFAULT_JSON_EXTENSION_NAME = '.json';\nvar DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nvar BrowserDownloads = function () {\n    function BrowserDownloads(fileNamePrefix) {\n        if (!_environment.ENV.get('IS_BROWSER')) {\n            throw new Error('triggerDownloads() cannot proceed because the current environment ' + 'is not a browser.');\n        }\n        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n            fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n        }\n        if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n            fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n        }\n        this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n        this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n    }\n    BrowserDownloads.prototype.save = function (modelArtifacts) {\n        return __awaiter(this, void 0, void 0, function () {\n            var weightsURL, weightsManifest, modelTopologyAndWeightManifest, modelTopologyAndWeightManifestURL, jsonAnchor, weightDataAnchor;\n            return __generator(this, function (_a) {\n                weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }));\n                if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n                    throw new Error('DownloadTrigger.save() does not support saving model topology ' + 'in binary formats yet.');\n                } else {\n                    weightsManifest = [{\n                        paths: ['./' + this.weightDataFileName],\n                        weights: modelArtifacts.weightSpecs\n                    }];\n                    modelTopologyAndWeightManifest = {\n                        modelTopology: modelArtifacts.modelTopology,\n                        weightsManifest: weightsManifest\n                    };\n                    modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: 'application/json' }));\n                    jsonAnchor = this.jsonAnchor == null ? document.createElement('a') : this.jsonAnchor;\n                    jsonAnchor.download = this.modelTopologyFileName;\n                    jsonAnchor.href = modelTopologyAndWeightManifestURL;\n                    jsonAnchor.click();\n                    if (modelArtifacts.weightData != null) {\n                        weightDataAnchor = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;\n                        weightDataAnchor.download = this.weightDataFileName;\n                        weightDataAnchor.href = weightsURL;\n                        weightDataAnchor.click();\n                    }\n                    return [2, { modelArtifactsInfo: (0, _io_utils.getModelArtifactsInfoForJSON)(modelArtifacts) }];\n                }\n                return [2];\n            });\n        });\n    };\n    BrowserDownloads.URL_SCHEME = 'downloads://';\n    return BrowserDownloads;\n}();\nexports.BrowserDownloads = BrowserDownloads;\n\nvar BrowserFiles = function () {\n    function BrowserFiles(files) {\n        if (files == null || files.length < 1) {\n            throw new Error(\"When calling browserFiles, at least 1 file is required, \" + (\"but received \" + files));\n        }\n        this.files = files;\n    }\n    BrowserFiles.prototype.load = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var jsonFile, weightFiles;\n            return __generator(this, function (_a) {\n                jsonFile = this.files[0];\n                weightFiles = this.files.slice(1);\n                return [2, new Promise(function (resolve, reject) {\n                    var jsonReader = new FileReader();\n                    jsonReader.onload = function (event) {\n                        var modelJSON = JSON.parse(event.target.result);\n                        var modelTopology = modelJSON.modelTopology;\n                        if (modelTopology == null) {\n                            reject(new Error(\"modelTopology field is missing from file \" + jsonFile.name));\n                            return;\n                        }\n                        if (weightFiles.length === 0) {\n                            resolve({ modelTopology: modelTopology });\n                        }\n                        var weightsManifest = modelJSON.weightsManifest;\n                        if (weightsManifest == null) {\n                            reject(new Error(\"weightManifest field is missing from file \" + jsonFile.name));\n                            return;\n                        }\n                        var pathToFile;\n                        try {\n                            pathToFile = _this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n                        } catch (err) {\n                            reject(err);\n                            return;\n                        }\n                        var weightSpecs = [];\n                        var paths = [];\n                        var perFileBuffers = [];\n                        weightsManifest.forEach(function (weightsGroup) {\n                            weightsGroup.paths.forEach(function (path) {\n                                paths.push(path);\n                                perFileBuffers.push(null);\n                            });\n                            weightSpecs.push.apply(weightSpecs, weightsGroup.weights);\n                        });\n                        weightsManifest.forEach(function (weightsGroup) {\n                            weightsGroup.paths.forEach(function (path) {\n                                var weightFileReader = new FileReader();\n                                weightFileReader.onload = function (event) {\n                                    var weightData = event.target.result;\n                                    var index = paths.indexOf(path);\n                                    perFileBuffers[index] = weightData;\n                                    if (perFileBuffers.indexOf(null) === -1) {\n                                        resolve({\n                                            modelTopology: modelTopology,\n                                            weightSpecs: weightSpecs,\n                                            weightData: (0, _io_utils.concatenateArrayBuffers)(perFileBuffers)\n                                        });\n                                    }\n                                };\n                                weightFileReader.onerror = function (error) {\n                                    reject(\"Failed to weights data from file of path '\" + path + \"'.\");\n                                    return;\n                                };\n                                weightFileReader.readAsArrayBuffer(pathToFile[path]);\n                            });\n                        });\n                    };\n                    jsonReader.onerror = function (error) {\n                        reject(\"Failed to read model topology and weights manifest JSON \" + (\"from file '\" + jsonFile.name + \"'. BrowserFiles supports loading \") + \"Keras-style tf.Model artifacts only.\");\n                        return;\n                    };\n                    jsonReader.readAsText(jsonFile);\n                })];\n            });\n        });\n    };\n    BrowserFiles.prototype.checkManifestAndWeightFiles = function (manifest, files) {\n        var basenames = [];\n        var fileNames = files.map(function (file) {\n            return (0, _io_utils.basename)(file.name);\n        });\n        var pathToFile = {};\n        for (var _i = 0, manifest_1 = manifest; _i < manifest_1.length; _i++) {\n            var group = manifest_1[_i];\n            group.paths.forEach(function (path) {\n                var pathBasename = (0, _io_utils.basename)(path);\n                if (basenames.indexOf(pathBasename) !== -1) {\n                    throw new Error(\"Duplicate file basename found in weights manifest: \" + (\"'\" + pathBasename + \"'\"));\n                }\n                basenames.push(pathBasename);\n                if (fileNames.indexOf(pathBasename) === -1) {\n                    throw new Error(\"Weight file with basename '\" + pathBasename + \"' is not provided.\");\n                } else {\n                    pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n                }\n            });\n        }\n        if (basenames.length !== files.length) {\n            throw new Error(\"Mismatch in the number of files in weights manifest \" + (\"(\" + basenames.length + \") and the number of weight files provided \") + (\"(\" + files.length + \").\"));\n        }\n        return pathToFile;\n    };\n    return BrowserFiles;\n}();\nvar browserDownloadsRouter = exports.browserDownloadsRouter = function (url) {\n    if (!_environment.ENV.get('IS_BROWSER')) {\n        return null;\n    } else {\n        if (url.startsWith(BrowserDownloads.URL_SCHEME)) {\n            return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n        } else {\n            return null;\n        }\n    }\n};\n_router_registry.IORouterRegistry.registerSaveRouter(browserDownloadsRouter);\nfunction browserDownloads(fileNamePrefix) {\n    if (fileNamePrefix === void 0) {\n        fileNamePrefix = 'model';\n    }\n    return new BrowserDownloads(fileNamePrefix);\n}\nfunction browserFiles(files) {\n    return new BrowserFiles(files);\n}\n//# sourceMappingURL=browser_files.js.map"},"hash":"73b4bfa0a91e9ee143dd9d77a0e645bd","cacheData":{"env":{}}}