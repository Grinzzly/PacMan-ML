{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../environment","loc":{"line":11,"column":20}},{"name":"../globals","loc":{"line":12,"column":27}},{"name":"../ops/ops","loc":{"line":13,"column":34}},{"name":"../serialization","loc":{"line":14,"column":33}},{"name":"./optimizer","loc":{"line":15,"column":26}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.RMSPropOptimizer = undefined;\n\nvar _environment = require('../environment');\n\nvar _globals = require('../globals');\n\nvar _ops = require('../ops/ops');\n\nvar _serialization = require('../serialization');\n\nvar _optimizer = require('./optimizer');\n\nvar __extends = undefined && undefined.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\nvar RMSPropOptimizer = function (_super) {\n    __extends(RMSPropOptimizer, _super);\n    function RMSPropOptimizer(learningRate, decay, momentum, epsilon, centered) {\n        if (decay === void 0) {\n            decay = 0.9;\n        }\n        if (momentum === void 0) {\n            momentum = 0.0;\n        }\n        if (epsilon === void 0) {\n            epsilon = 1e-8;\n        }\n        if (centered === void 0) {\n            centered = false;\n        }\n        var _this = _super.call(this) || this;\n        _this.learningRate = learningRate;\n        _this.decay = decay;\n        _this.momentum = momentum;\n        _this.epsilon = epsilon;\n        _this.accumulatedMeanSquares = {};\n        _this.accumulatedMeanGrads = {};\n        _this.accumulatedMoments = {};\n        _this.c = (0, _globals.keep)((0, _ops.scalar)(learningRate));\n        _this.epsilonScalar = (0, _globals.keep)((0, _ops.scalar)(epsilon));\n        _this.decayScalar = (0, _globals.keep)((0, _ops.scalar)(decay));\n        _this.momentumScalar = (0, _globals.keep)((0, _ops.scalar)(momentum));\n        _this.oneMinusDecay = (0, _globals.keep)((0, _ops.scalar)(1 - decay));\n        _this.centered = centered;\n        return _this;\n    }\n    RMSPropOptimizer.prototype.applyGradients = function (variableGradients) {\n        var _this = this;\n        var _loop_1 = function (variableName) {\n            var value = _environment.ENV.engine.registeredVariables[variableName];\n            if (this_1.accumulatedMeanSquares[variableName] == null) {\n                var trainable_1 = false;\n                (0, _globals.tidy)(function () {\n                    _this.accumulatedMeanSquares[variableName] = (0, _ops.zerosLike)(value).variable(trainable_1);\n                });\n            }\n            if (this_1.accumulatedMeanGrads[variableName] == null && this_1.centered) {\n                var trainable_2 = false;\n                (0, _globals.tidy)(function () {\n                    _this.accumulatedMeanGrads[variableName] = (0, _ops.zerosLike)(value).variable(trainable_2);\n                });\n            }\n            if (this_1.accumulatedMoments[variableName] == null) {\n                var trainable_3 = false;\n                (0, _globals.tidy)(function () {\n                    _this.accumulatedMoments[variableName] = (0, _ops.zerosLike)(value).variable(trainable_3);\n                });\n            }\n            var accumulatedMeanSquare = this_1.accumulatedMeanSquares[variableName];\n            var accumulatedMeanGrad = this_1.accumulatedMeanGrads[variableName];\n            var accumulatedMoments = this_1.accumulatedMoments[variableName];\n            var gradient = variableGradients[variableName];\n            (0, _globals.tidy)(function () {\n                var newAccumulatedMeanSquare = _this.decayScalar.mul(accumulatedMeanSquare).add(_this.oneMinusDecay.mul(gradient.square()));\n                if (_this.centered) {\n                    var newAccumulatedMeanGrad = _this.decayScalar.mul(accumulatedMeanGrad).add(_this.oneMinusDecay.mul(gradient));\n                    var newAccumulatedMoments = _this.momentumScalar.mul(accumulatedMoments).add(_this.c.mul(gradient).div(newAccumulatedMeanSquare.sub(newAccumulatedMeanGrad.square().add(_this.epsilonScalar)).sqrt()));\n                    _this.accumulatedMeanSquares[variableName].assign(newAccumulatedMeanSquare);\n                    _this.accumulatedMeanGrads[variableName].assign(newAccumulatedMeanGrad);\n                    _this.accumulatedMoments[variableName].assign(newAccumulatedMoments);\n                    var newValue = value.sub(newAccumulatedMoments);\n                    value.assign(newValue);\n                } else {\n                    var newAccumulatedMeanSquare_1 = _this.decayScalar.mul(accumulatedMeanSquare).add(_this.oneMinusDecay.mul(gradient.square()));\n                    var newAccumulatedMoments = _this.momentumScalar.mul(accumulatedMoments).add(_this.c.mul(gradient).div(newAccumulatedMeanSquare_1.add(_this.epsilonScalar).sqrt()));\n                    _this.accumulatedMeanSquares[variableName].assign(newAccumulatedMeanSquare_1);\n                    _this.accumulatedMoments[variableName].assign(newAccumulatedMoments);\n                    var newValue = value.sub(newAccumulatedMoments);\n                    value.assign(newValue);\n                }\n            });\n        };\n        var this_1 = this;\n        for (var variableName in variableGradients) {\n            _loop_1(variableName);\n        }\n    };\n    RMSPropOptimizer.prototype.dispose = function () {\n        var _this = this;\n        this.c.dispose();\n        this.epsilonScalar.dispose();\n        this.decayScalar.dispose();\n        this.momentumScalar.dispose();\n        this.oneMinusDecay.dispose();\n        if (this.accumulatedMeanSquares != null) {\n            Object.keys(this.accumulatedMeanSquares).forEach(function (name) {\n                return _this.accumulatedMeanSquares[name].dispose();\n            });\n        }\n        if (this.accumulatedMeanGrads != null && this.centered) {\n            Object.keys(this.accumulatedMeanGrads).forEach(function (name) {\n                return _this.accumulatedMeanGrads[name].dispose();\n            });\n        }\n        if (this.accumulatedMoments != null) {\n            Object.keys(this.accumulatedMoments).forEach(function (name) {\n                return _this.accumulatedMoments[name].dispose();\n            });\n        }\n    };\n    RMSPropOptimizer.prototype.getConfig = function () {\n        return {\n            learningRate: this.learningRate,\n            decay: this.decay,\n            momentum: this.momentum,\n            epsilon: this.epsilon,\n            centered: this.centered\n        };\n    };\n    RMSPropOptimizer.fromConfig = function (cls, config) {\n        return new cls(config.learningRate, config.decay, config.momentum, config.epsilon, config.centered);\n    };\n    RMSPropOptimizer.className = 'RMSPropOptimizer';\n    return RMSPropOptimizer;\n}(_optimizer.Optimizer);\nexports.RMSPropOptimizer = RMSPropOptimizer;\n\n_serialization.SerializationMap.register(RMSPropOptimizer);\n//# sourceMappingURL=rmsprop_optimizer.js.map"},"hash":"c2088da311fd9c92c98bf0bf86af8f1c","cacheData":{"env":{}}}