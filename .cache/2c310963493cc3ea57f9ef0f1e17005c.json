{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../environment","loc":{"line":36,"column":20}},{"name":"./io_utils","loc":{"line":37,"column":45}},{"name":"./model_management","loc":{"line":38,"column":42}},{"name":"./router_registry","loc":{"line":39,"column":33}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.BrowserIndexedDBManager = exports.indexedDBRouter = exports.BrowserIndexedDB = undefined;\nexports.deleteDatabase = deleteDatabase;\nexports.browserIndexedDB = browserIndexedDB;\n\nvar _environment = require(\"../environment\");\n\nvar _io_utils = require(\"./io_utils\");\n\nvar _model_management = require(\"./model_management\");\n\nvar _router_registry = require(\"./router_registry\");\n\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = undefined && undefined.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\nvar DATABASE_NAME = 'tensorflowjs';\nvar DATABASE_VERSION = 1;\nvar MODEL_STORE_NAME = 'models_store';\nvar INFO_STORE_NAME = 'model_info_store';\nfunction deleteDatabase() {\n    return __awaiter(this, void 0, void 0, function () {\n        var idbFactory;\n        return __generator(this, function (_a) {\n            idbFactory = getIndexedDBFactory();\n            return [2, new Promise(function (resolve, reject) {\n                var deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n                deleteRequest.onsuccess = function () {\n                    return resolve();\n                };\n                deleteRequest.onerror = function (error) {\n                    return reject(error);\n                };\n            })];\n        });\n    });\n}\nfunction getIndexedDBFactory() {\n    if (!_environment.ENV.get('IS_BROWSER')) {\n        throw new Error('Failed to obtain IndexedDB factory because the current environment' + 'is not a web browser.');\n    }\n    var theWindow = window;\n    var factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;\n    if (factory == null) {\n        throw new Error('The current browser does not appear to support IndexedDB.');\n    }\n    return factory;\n}\nfunction setUpDatabase(openRequest) {\n    var db = openRequest.result;\n    db.createObjectStore(MODEL_STORE_NAME, { keyPath: 'modelPath' });\n    db.createObjectStore(INFO_STORE_NAME, { keyPath: 'modelPath' });\n}\nvar BrowserIndexedDB = function () {\n    function BrowserIndexedDB(modelPath) {\n        this.indexedDB = getIndexedDBFactory();\n        if (modelPath == null || !modelPath) {\n            throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n        }\n        this.modelPath = modelPath;\n    }\n    BrowserIndexedDB.prototype.save = function (modelArtifacts) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n                    throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n                }\n                return [2, this.databaseAction(this.modelPath, modelArtifacts)];\n            });\n        });\n    };\n    BrowserIndexedDB.prototype.load = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2, this.databaseAction(this.modelPath)];\n            });\n        });\n    };\n    BrowserIndexedDB.prototype.databaseAction = function (modelPath, modelArtifacts) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var openRequest = _this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = function () {\n                return setUpDatabase(openRequest);\n            };\n            openRequest.onsuccess = function () {\n                var db = openRequest.result;\n                if (modelArtifacts == null) {\n                    var modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n                    var modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                    var getRequest_1 = modelStore.get(_this.modelPath);\n                    getRequest_1.onsuccess = function () {\n                        if (getRequest_1.result == null) {\n                            db.close();\n                            return reject(new Error(\"Cannot find model with path '\" + _this.modelPath + \"' \" + \"in IndexedDB.\"));\n                        } else {\n                            resolve(getRequest_1.result.modelArtifacts);\n                        }\n                    };\n                    getRequest_1.onerror = function (error) {\n                        db.close();\n                        return reject(getRequest_1.error);\n                    };\n                    modelTx.oncomplete = function () {\n                        return db.close();\n                    };\n                } else {\n                    var modelArtifactsInfo_1 = (0, _io_utils.getModelArtifactsInfoForJSON)(modelArtifacts);\n                    var infoTx_1 = db.transaction(INFO_STORE_NAME, 'readwrite');\n                    var infoStore_1 = infoTx_1.objectStore(INFO_STORE_NAME);\n                    var putInfoRequest_1 = infoStore_1.put({ modelPath: _this.modelPath, modelArtifactsInfo: modelArtifactsInfo_1 });\n                    var modelTx_1;\n                    putInfoRequest_1.onsuccess = function () {\n                        modelTx_1 = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                        var modelStore = modelTx_1.objectStore(MODEL_STORE_NAME);\n                        var putModelRequest = modelStore.put({\n                            modelPath: _this.modelPath,\n                            modelArtifacts: modelArtifacts,\n                            modelArtifactsInfo: modelArtifactsInfo_1\n                        });\n                        putModelRequest.onsuccess = function () {\n                            return resolve({ modelArtifactsInfo: modelArtifactsInfo_1 });\n                        };\n                        putModelRequest.onerror = function (error) {\n                            infoStore_1 = infoTx_1.objectStore(INFO_STORE_NAME);\n                            var deleteInfoRequest = infoStore_1.delete(_this.modelPath);\n                            deleteInfoRequest.onsuccess = function () {\n                                db.close();\n                                return reject(putModelRequest.error);\n                            };\n                            deleteInfoRequest.onerror = function (error) {\n                                db.close();\n                                return reject(putModelRequest.error);\n                            };\n                        };\n                    };\n                    putInfoRequest_1.onerror = function (error) {\n                        db.close();\n                        return reject(putInfoRequest_1.error);\n                    };\n                    infoTx_1.oncomplete = function () {\n                        if (modelTx_1 == null) {\n                            db.close();\n                        } else {\n                            modelTx_1.oncomplete = function () {\n                                return db.close();\n                            };\n                        }\n                    };\n                }\n            };\n            openRequest.onerror = function (error) {\n                return reject(openRequest.error);\n            };\n        });\n    };\n    BrowserIndexedDB.URL_SCHEME = 'indexeddb://';\n    return BrowserIndexedDB;\n}();\nexports.BrowserIndexedDB = BrowserIndexedDB;\nvar indexedDBRouter = exports.indexedDBRouter = function (url) {\n    if (!_environment.ENV.get('IS_BROWSER')) {\n        return null;\n    } else {\n        if (url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n            return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n        } else {\n            return null;\n        }\n    }\n};\n_router_registry.IORouterRegistry.registerSaveRouter(indexedDBRouter);\n_router_registry.IORouterRegistry.registerLoadRouter(indexedDBRouter);\nfunction browserIndexedDB(modelPath) {\n    return new BrowserIndexedDB(modelPath);\n}\nfunction maybeStripScheme(key) {\n    return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;\n}\nvar BrowserIndexedDBManager = function () {\n    function BrowserIndexedDBManager() {\n        this.indexedDB = getIndexedDBFactory();\n    }\n    BrowserIndexedDBManager.prototype.listModels = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2, new Promise(function (resolve, reject) {\n                    var openRequest = _this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n                    openRequest.onupgradeneeded = function () {\n                        return setUpDatabase(openRequest);\n                    };\n                    openRequest.onsuccess = function () {\n                        var db = openRequest.result;\n                        var tx = db.transaction(INFO_STORE_NAME, 'readonly');\n                        var store = tx.objectStore(INFO_STORE_NAME);\n                        var getAllInfoRequest = store.getAll();\n                        getAllInfoRequest.onsuccess = function () {\n                            var out = {};\n                            for (var _i = 0, _a = getAllInfoRequest.result; _i < _a.length; _i++) {\n                                var item = _a[_i];\n                                out[item.modelPath] = item.modelArtifactsInfo;\n                            }\n                            resolve(out);\n                        };\n                        getAllInfoRequest.onerror = function (error) {\n                            db.close();\n                            return reject(getAllInfoRequest.error);\n                        };\n                        tx.oncomplete = function () {\n                            return db.close();\n                        };\n                    };\n                    openRequest.onerror = function (error) {\n                        return reject(openRequest.error);\n                    };\n                })];\n            });\n        });\n    };\n    BrowserIndexedDBManager.prototype.removeModel = function (path) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                path = maybeStripScheme(path);\n                return [2, new Promise(function (resolve, reject) {\n                    var openRequest = _this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n                    openRequest.onupgradeneeded = function () {\n                        return setUpDatabase(openRequest);\n                    };\n                    openRequest.onsuccess = function () {\n                        var db = openRequest.result;\n                        var infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                        var infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                        var getInfoRequest = infoStore.get(path);\n                        var modelTx;\n                        getInfoRequest.onsuccess = function () {\n                            if (getInfoRequest.result == null) {\n                                db.close();\n                                return reject(new Error(\"Cannot find model with path '\" + path + \"' \" + \"in IndexedDB.\"));\n                            } else {\n                                var deleteInfoRequest = infoStore.delete(path);\n                                var deleteModelData_1 = function () {\n                                    modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                                    var modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                                    var deleteModelRequest = modelStore.delete(path);\n                                    deleteModelRequest.onsuccess = function () {\n                                        return resolve(getInfoRequest.result.modelArtifactsInfo);\n                                    };\n                                    deleteModelRequest.onerror = function (error) {\n                                        return reject(getInfoRequest.error);\n                                    };\n                                };\n                                deleteInfoRequest.onsuccess = deleteModelData_1;\n                                deleteInfoRequest.onerror = function (error) {\n                                    deleteModelData_1();\n                                    db.close();\n                                    return reject(getInfoRequest.error);\n                                };\n                            }\n                        };\n                        getInfoRequest.onerror = function (error) {\n                            db.close();\n                            return reject(getInfoRequest.error);\n                        };\n                        infoTx.oncomplete = function () {\n                            if (modelTx == null) {\n                                db.close();\n                            } else {\n                                modelTx.oncomplete = function () {\n                                    return db.close();\n                                };\n                            }\n                        };\n                    };\n                    openRequest.onerror = function (error) {\n                        return reject(openRequest.error);\n                    };\n                })];\n            });\n        });\n    };\n    return BrowserIndexedDBManager;\n}();\nexports.BrowserIndexedDBManager = BrowserIndexedDBManager;\n\nif (_environment.ENV.get('IS_BROWSER')) {\n    try {\n        _model_management.ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());\n    } catch (err) {}\n}\n//# sourceMappingURL=indexed_db.js.map"},"hash":"5c22a98d9491265b2a5129944fc49fe0","cacheData":{"env":{}}}