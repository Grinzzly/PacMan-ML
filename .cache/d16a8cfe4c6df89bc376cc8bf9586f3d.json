{"dependencies":[{"name":"/home/szamulko/Desktop/Projects/PacMan/package.json","includedInParent":true,"mtime":1528724217926},{"name":"/home/szamulko/Desktop/Projects/PacMan/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1528724212618},{"name":"../../ops/broadcast_util","loc":{"line":1,"column":32}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.BinaryOpProgram = exports.ELU_DER = exports.ATAN2 = exports.MOD = exports.MIN = exports.MAX = exports.LOGICAL_OR = exports.LOGICAL_AND = exports.GREATER_EQUAL = exports.GREATER = exports.LESS_EQUAL = exports.LESS = exports.NOT_EQUAL = exports.EQUAL = exports.SQUARED_DIFFERENCE = exports.POW = exports.INT_DIV = exports.DIV = exports.MUL = exports.SUB = exports.ADD = undefined;\n\nvar _broadcast_util = require('../../ops/broadcast_util');\n\nvar broadcast_util = _interopRequireWildcard(_broadcast_util);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar CHECK_NAN_SNIPPET = \"\\n  if (isNaN(a)) return a;\\n  if (isNaN(b)) return b;\\n\";\nvar ADD = exports.ADD = 'return a + b;';\nvar SUB = exports.SUB = 'return a - b;';\nvar MUL = exports.MUL = 'return a * b;';\nvar DIV = exports.DIV = 'return a / b;';\nvar INT_DIV = exports.INT_DIV = \"\\n  float resultSign = sign(a) * sign(b);\\n  int ia = round(a);\\n  int ib = round(b);\\n  int result = ia / ib;\\n  int amodb = ia - ib * result;\\n\\n  if (resultSign < 0.0 && amodb != 0) {\\n    result -= 1;\\n  }\\n  return float(result);\\n\";\nvar POW = exports.POW = \"\\n  return (round(mod(b, 2.0)) == 0 || round(mod(b, 2.0)) == 2) ?\\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\\n\";\nvar SQUARED_DIFFERENCE = exports.SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nvar EQUAL = exports.EQUAL = \"return float(a == b);\";\nvar NOT_EQUAL = exports.NOT_EQUAL = \"return float(a != b);\";\nvar LESS = exports.LESS = \"return float(a < b);\";\nvar LESS_EQUAL = exports.LESS_EQUAL = \"return float(a <= b);\";\nvar GREATER = exports.GREATER = \"return float(a > b);\";\nvar GREATER_EQUAL = exports.GREATER_EQUAL = \"return float(a >= b);\";\nvar LOGICAL_AND = exports.LOGICAL_AND = \"return float(a >= 1.0 && b >= 1.0);\";\nvar LOGICAL_OR = exports.LOGICAL_OR = \"return float(a >= 1.0 || b >= 1.0);\";\nvar MAX = exports.MAX = CHECK_NAN_SNIPPET + \"\\n  return max(a, b);\\n\";\nvar MIN = exports.MIN = CHECK_NAN_SNIPPET + \"\\n  return min(a, b);\\n\";\nvar MOD = exports.MOD = \"return mod(a, b);\";\nvar ATAN2 = exports.ATAN2 = CHECK_NAN_SNIPPET + \"\\n  return atan(a, b);\\n\";\nvar ELU_DER = exports.ELU_DER = \"return (b >= 1.0) ? a : a * (b + 1.0);\";\nvar BinaryOpProgram = function () {\n    function BinaryOpProgram(op, aShape, bShape) {\n        this.variableNames = ['A', 'B'];\n        this.supportsBroadcasting = true;\n        this.outputShape = broadcast_util.assertAndGetBroadcastShape(aShape, bShape);\n        this.userCode = \"\\n      float binaryOperation(float a, float b) {\\n        \" + op + \"\\n      }\\n\\n      void main() {\\n        float a = getAAtOutCoords();\\n        float b = getBAtOutCoords();\\n        setOutput(binaryOperation(a, b));\\n      }\\n    \";\n    }\n    return BinaryOpProgram;\n}();\nexports.BinaryOpProgram = BinaryOpProgram;\n//# sourceMappingURL=binaryop_gpu.js.map"},"hash":"05ccbb6598caf0a62e5d34d2d7fad88c","cacheData":{"env":{}}}